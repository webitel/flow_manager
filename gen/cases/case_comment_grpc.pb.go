// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: case_comment.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaseComments_LocateComment_FullMethodName  = "/webitel.cases.CaseComments/LocateComment"
	CaseComments_UpdateComment_FullMethodName  = "/webitel.cases.CaseComments/UpdateComment"
	CaseComments_DeleteComment_FullMethodName  = "/webitel.cases.CaseComments/DeleteComment"
	CaseComments_ListComments_FullMethodName   = "/webitel.cases.CaseComments/ListComments"
	CaseComments_PublishComment_FullMethodName = "/webitel.cases.CaseComments/PublishComment"
)

// CaseCommentsClient is the client API for CaseComments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaseCommentsClient interface {
	// Retrieves a specific comment based on its etag.
	LocateComment(ctx context.Context, in *LocateCommentRequest, opts ...grpc.CallOption) (*CaseComment, error)
	// Updates a specific comment based on the provided data.
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*CaseComment, error)
	// Deletes a specific comment based on its etag.
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*CaseComment, error)
	// Lists all comments associated with a specific case.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*CaseCommentList, error)
	// Publish comment into a case.
	PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...grpc.CallOption) (*CaseComment, error)
}

type caseCommentsClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseCommentsClient(cc grpc.ClientConnInterface) CaseCommentsClient {
	return &caseCommentsClient{cc}
}

func (c *caseCommentsClient) LocateComment(ctx context.Context, in *LocateCommentRequest, opts ...grpc.CallOption) (*CaseComment, error) {
	out := new(CaseComment)
	err := c.cc.Invoke(ctx, CaseComments_LocateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseCommentsClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*CaseComment, error) {
	out := new(CaseComment)
	err := c.cc.Invoke(ctx, CaseComments_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseCommentsClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*CaseComment, error) {
	out := new(CaseComment)
	err := c.cc.Invoke(ctx, CaseComments_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseCommentsClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*CaseCommentList, error) {
	out := new(CaseCommentList)
	err := c.cc.Invoke(ctx, CaseComments_ListComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseCommentsClient) PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...grpc.CallOption) (*CaseComment, error) {
	out := new(CaseComment)
	err := c.cc.Invoke(ctx, CaseComments_PublishComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseCommentsServer is the server API for CaseComments service.
// All implementations must embed UnimplementedCaseCommentsServer
// for forward compatibility
type CaseCommentsServer interface {
	// Retrieves a specific comment based on its etag.
	LocateComment(context.Context, *LocateCommentRequest) (*CaseComment, error)
	// Updates a specific comment based on the provided data.
	UpdateComment(context.Context, *UpdateCommentRequest) (*CaseComment, error)
	// Deletes a specific comment based on its etag.
	DeleteComment(context.Context, *DeleteCommentRequest) (*CaseComment, error)
	// Lists all comments associated with a specific case.
	ListComments(context.Context, *ListCommentsRequest) (*CaseCommentList, error)
	// Publish comment into a case.
	PublishComment(context.Context, *PublishCommentRequest) (*CaseComment, error)
	mustEmbedUnimplementedCaseCommentsServer()
}

// UnimplementedCaseCommentsServer must be embedded to have forward compatible implementations.
type UnimplementedCaseCommentsServer struct {
}

func (UnimplementedCaseCommentsServer) LocateComment(context.Context, *LocateCommentRequest) (*CaseComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateComment not implemented")
}
func (UnimplementedCaseCommentsServer) UpdateComment(context.Context, *UpdateCommentRequest) (*CaseComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCaseCommentsServer) DeleteComment(context.Context, *DeleteCommentRequest) (*CaseComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCaseCommentsServer) ListComments(context.Context, *ListCommentsRequest) (*CaseCommentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedCaseCommentsServer) PublishComment(context.Context, *PublishCommentRequest) (*CaseComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishComment not implemented")
}
func (UnimplementedCaseCommentsServer) mustEmbedUnimplementedCaseCommentsServer() {}

// UnsafeCaseCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseCommentsServer will
// result in compilation errors.
type UnsafeCaseCommentsServer interface {
	mustEmbedUnimplementedCaseCommentsServer()
}

func RegisterCaseCommentsServer(s grpc.ServiceRegistrar, srv CaseCommentsServer) {
	s.RegisterService(&CaseComments_ServiceDesc, srv)
}

func _CaseComments_LocateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommentsServer).LocateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseComments_LocateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommentsServer).LocateComment(ctx, req.(*LocateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseComments_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommentsServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseComments_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommentsServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseComments_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommentsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseComments_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommentsServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseComments_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommentsServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseComments_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommentsServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseComments_PublishComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseCommentsServer).PublishComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseComments_PublishComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseCommentsServer).PublishComment(ctx, req.(*PublishCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseComments_ServiceDesc is the grpc.ServiceDesc for CaseComments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseComments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.CaseComments",
	HandlerType: (*CaseCommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocateComment",
			Handler:    _CaseComments_LocateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CaseComments_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CaseComments_DeleteComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _CaseComments_ListComments_Handler,
		},
		{
			MethodName: "PublishComment",
			Handler:    _CaseComments_PublishComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "case_comment.proto",
}
