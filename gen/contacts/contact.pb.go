// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: contacts/contact.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A contact's name.
// If the name is a mononym, the family name is empty.
//
// Inspired:
// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
// https://developers.google.com/people/api/rest/v1/people#name
type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether Contact, as a Person, realy owns this associated name.
	Verified bool `protobuf:"varint,12,opt,name=verified,proto3" json:"verified,omitempty"`
	// OPTIONAL. Given name(s) or first name(s) of the End-User.
	// Note that in some cultures, people can have multiple given names;
	// all can be present, with the names being separated by space characters.
	// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name
	GivenName string `protobuf:"bytes,13,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// OPTIONAL. Middle name(s) of the End-User.
	// Note that in some cultures, people can have multiple middle names;
	// all can be present, with the names being separated by space characters.
	// Also note that in some cultures, middle names are not used.
	MiddleName string `protobuf:"bytes,14,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	// OPTIONAL. Surname(s) or last name(s) of the End-User.
	// Note that in some cultures, people can have multiple family names or no family name;
	// all can be present, with the names being separated by space characters.
	// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name
	FamilyName string `protobuf:"bytes,15,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// REQUIRED. End-User's full name in displayable form
	// including all name parts, possibly including titles and suffixes,
	// ordered according to the End-User's locale and preferences.
	CommonName string `protobuf:"bytes,16,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_contacts_contact_proto_rawDescGZIP(), []int{0}
}

func (x *Name) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *Name) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *Name) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Name) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *Name) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

type InputName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether Contact, as a Person, realy owns this associated name.
	Verified bool `protobuf:"varint,12,opt,name=verified,proto3" json:"verified,omitempty"`
	// OPTIONAL. Given name(s) or first name(s) of the End-User.
	// Note that in some cultures, people can have multiple given names;
	// all can be present, with the names being separated by space characters.
	// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name
	GivenName string `protobuf:"bytes,13,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// OPTIONAL. Middle name(s) of the End-User.
	// Note that in some cultures, people can have multiple middle names;
	// all can be present, with the names being separated by space characters.
	// Also note that in some cultures, middle names are not used.
	MiddleName string `protobuf:"bytes,14,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	// OPTIONAL. Surname(s) or last name(s) of the End-User.
	// Note that in some cultures, people can have multiple family names or no family name;
	// all can be present, with the names being separated by space characters.
	// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name
	FamilyName string `protobuf:"bytes,15,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// REQUIRED. End-User's full name in displayable form
	// including all name parts, possibly including titles and suffixes,
	// ordered according to the End-User's locale and preferences.
	CommonName string `protobuf:"bytes,16,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
}

func (x *InputName) Reset() {
	*x = InputName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputName) ProtoMessage() {}

func (x *InputName) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputName.ProtoReflect.Descriptor instead.
func (*InputName) Descriptor() ([]byte, []int) {
	return file_contacts_contact_proto_rawDescGZIP(), []int{1}
}

func (x *InputName) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *InputName) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *InputName) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *InputName) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *InputName) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

// The Contact principal source.
// OUTPUT purpose only.
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the association. Never changes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// READONLY. Operational attributes
	// Version of the latest update. Numeric sequence.
	Ver int32 `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// [R]ecord[b]ased[A]ccess[C]ontrol mode granted.
	Mode string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// READONLY. The contact's metadata.
	Domain    *Lookup `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	CreatedAt int64   `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // unix
	CreatedBy *Lookup `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // user
	UpdatedAt int64   `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // unix
	UpdatedBy *Lookup `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`  // user
	User      *Lookup `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty"`                             // user connected to the contact
	// The Contact's name.
	// This field is a singleton for Contact sources.
	Name *Name `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// BIO. Short description about the Contact person.
	// OPTIONAL. Multi-lined text.
	About string `protobuf:"bytes,21,opt,name=about,proto3" json:"about,omitempty"`
	// The Contact's associated tag(s).
	Labels *LabelList `protobuf:"bytes,23,opt,name=labels,proto3" json:"labels,omitempty"`
	// The Contact's email address(es).
	Emails *EmailList `protobuf:"bytes,24,opt,name=emails,proto3" json:"emails,omitempty"`
	// The Contact's phone numbers.
	Phones *PhoneList `protobuf:"bytes,25,opt,name=phones,proto3" json:"phones,omitempty"`
	// Output only. The Contact's photo(s).
	Photos *PhotoList `protobuf:"bytes,26,opt,name=photos,proto3" json:"photos,omitempty"`
	// The Contact's internal manager(s).
	Managers *ManagerList `protobuf:"bytes,27,opt,name=managers,proto3" json:"managers,omitempty"`
	// The Contact's internal comment(s).
	Comments *CommentList `protobuf:"bytes,28,opt,name=comments,proto3" json:"comments,omitempty"`
	// A Contact's locale preference(s).
	Languages *LanguageList `protobuf:"bytes,29,opt,name=languages,proto3" json:"languages,omitempty"`
	// The Contact's timezone preference(s).
	Timezones *TimezoneList `protobuf:"bytes,30,opt,name=timezones,proto3" json:"timezones,omitempty"`
	// The Contact's associated group(s).
	Groups *ContactGroupList `protobuf:"bytes,31,opt,name=groups,proto3" json:"groups,omitempty"`
	// The contact's [I]nstant[M]essaging clients.
	Imclients *IMClientList `protobuf:"bytes,32,opt,name=imclients,proto3" json:"imclients,omitempty"`
	// Arbitrary client data that is populated by clients.
	// Duplicate keys and values are allowed.
	Variables *VariableList `protobuf:"bytes,34,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_contacts_contact_proto_rawDescGZIP(), []int{2}
}

func (x *Contact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contact) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Contact) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Contact) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Contact) GetDomain() *Lookup {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Contact) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Contact) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Contact) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Contact) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Contact) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Contact) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Contact) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *Contact) GetLabels() *LabelList {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Contact) GetEmails() *EmailList {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *Contact) GetPhones() *PhoneList {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *Contact) GetPhotos() *PhotoList {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Contact) GetManagers() *ManagerList {
	if x != nil {
		return x.Managers
	}
	return nil
}

func (x *Contact) GetComments() *CommentList {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Contact) GetLanguages() *LanguageList {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Contact) GetTimezones() *TimezoneList {
	if x != nil {
		return x.Timezones
	}
	return nil
}

func (x *Contact) GetGroups() *ContactGroupList {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Contact) GetImclients() *IMClientList {
	if x != nil {
		return x.Imclients
	}
	return nil
}

func (x *Contact) GetVariables() *VariableList {
	if x != nil {
		return x.Variables
	}
	return nil
}

// The Contact principal input.
type InputContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the latest version of an existing resorce.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// The Contact's name. Singleton
	Name *InputName `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// BIO. Short description about the Contact person.
	// OPTIONAL. Multi-lined text.
	About string `protobuf:"bytes,21,opt,name=about,proto3" json:"about,omitempty"`
	// Output only. The Contact's photo(s).
	Photos []*InputPhoto `protobuf:"bytes,23,rep,name=photos,proto3" json:"photos,omitempty"`
	// The Contact's associated label(s).
	Labels []*InputLabel `protobuf:"bytes,24,rep,name=labels,proto3" json:"labels,omitempty"`
	// The Contact's email address(es).
	Emails []*InputEmailAddress `protobuf:"bytes,25,rep,name=emails,proto3" json:"emails,omitempty"`
	// The Contact's phone numbers.
	Phones []*InputPhoneNumber `protobuf:"bytes,26,rep,name=phones,proto3" json:"phones,omitempty"`
	// The Contact's internal manager(s).
	Managers []*InputManager `protobuf:"bytes,27,rep,name=managers,proto3" json:"managers,omitempty"`
	// Publish NEW comment(s) for this Contact.
	Comments []*InputComment `protobuf:"bytes,28,rep,name=comments,proto3" json:"comments,omitempty"`
	// A Contact's locale preference(s).
	Languages []*InputLanguage `protobuf:"bytes,29,rep,name=languages,proto3" json:"languages,omitempty"`
	// The Contact's timezone preference(s).
	Timezones []*InputTimezone `protobuf:"bytes,30,rep,name=timezones,proto3" json:"timezones,omitempty"`
	// The contact's [I]nstant[M]essaging clients.
	Imclients []*InputIMClient `protobuf:"bytes,32,rep,name=imclients,proto3" json:"imclients,omitempty"`
	// Arbitrary client data that is populated by clients.
	Variables []*InputVariable `protobuf:"bytes,34,rep,name=variables,proto3" json:"variables,omitempty"`
	// The Contact's associated group(s).
	Groups []*InputContactGroup `protobuf:"bytes,35,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *InputContact) Reset() {
	*x = InputContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contact_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContact) ProtoMessage() {}

func (x *InputContact) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contact_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContact.ProtoReflect.Descriptor instead.
func (*InputContact) Descriptor() ([]byte, []int) {
	return file_contacts_contact_proto_rawDescGZIP(), []int{3}
}

func (x *InputContact) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputContact) GetName() *InputName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InputContact) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *InputContact) GetPhotos() []*InputPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *InputContact) GetLabels() []*InputLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InputContact) GetEmails() []*InputEmailAddress {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *InputContact) GetPhones() []*InputPhoneNumber {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *InputContact) GetManagers() []*InputManager {
	if x != nil {
		return x.Managers
	}
	return nil
}

func (x *InputContact) GetComments() []*InputComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *InputContact) GetLanguages() []*InputLanguage {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *InputContact) GetTimezones() []*InputTimezone {
	if x != nil {
		return x.Timezones
	}
	return nil
}

func (x *InputContact) GetImclients() []*InputIMClient {
	if x != nil {
		return x.Imclients
	}
	return nil
}

func (x *InputContact) GetVariables() []*InputVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *InputContact) GetGroups() []*InputContactGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

var File_contacts_contact_proto protoreflect.FileDescriptor

var file_contacts_contact_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x03, 0x92, 0x41,
	0x00, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x08,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x8e, 0x06, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0xca, 0x3e, 0x07, 0xfa, 0x02, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x69,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x42, 0xa7, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x42, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xa2,
	0x02, 0x03, 0x57, 0x43, 0x58, 0xaa, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xca, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1c, 0x57, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x57, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contacts_contact_proto_rawDescOnce sync.Once
	file_contacts_contact_proto_rawDescData = file_contacts_contact_proto_rawDesc
)

func file_contacts_contact_proto_rawDescGZIP() []byte {
	file_contacts_contact_proto_rawDescOnce.Do(func() {
		file_contacts_contact_proto_rawDescData = protoimpl.X.CompressGZIP(file_contacts_contact_proto_rawDescData)
	})
	return file_contacts_contact_proto_rawDescData
}

var file_contacts_contact_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_contacts_contact_proto_goTypes = []interface{}{
	(*Name)(nil),              // 0: webitel.contacts.Name
	(*InputName)(nil),         // 1: webitel.contacts.InputName
	(*Contact)(nil),           // 2: webitel.contacts.Contact
	(*InputContact)(nil),      // 3: webitel.contacts.InputContact
	(*Lookup)(nil),            // 4: webitel.contacts.Lookup
	(*LabelList)(nil),         // 5: webitel.contacts.LabelList
	(*EmailList)(nil),         // 6: webitel.contacts.EmailList
	(*PhoneList)(nil),         // 7: webitel.contacts.PhoneList
	(*PhotoList)(nil),         // 8: webitel.contacts.PhotoList
	(*ManagerList)(nil),       // 9: webitel.contacts.ManagerList
	(*CommentList)(nil),       // 10: webitel.contacts.CommentList
	(*LanguageList)(nil),      // 11: webitel.contacts.LanguageList
	(*TimezoneList)(nil),      // 12: webitel.contacts.TimezoneList
	(*ContactGroupList)(nil),  // 13: webitel.contacts.ContactGroupList
	(*IMClientList)(nil),      // 14: webitel.contacts.IMClientList
	(*VariableList)(nil),      // 15: webitel.contacts.VariableList
	(*InputPhoto)(nil),        // 16: webitel.contacts.InputPhoto
	(*InputLabel)(nil),        // 17: webitel.contacts.InputLabel
	(*InputEmailAddress)(nil), // 18: webitel.contacts.InputEmailAddress
	(*InputPhoneNumber)(nil),  // 19: webitel.contacts.InputPhoneNumber
	(*InputManager)(nil),      // 20: webitel.contacts.InputManager
	(*InputComment)(nil),      // 21: webitel.contacts.InputComment
	(*InputLanguage)(nil),     // 22: webitel.contacts.InputLanguage
	(*InputTimezone)(nil),     // 23: webitel.contacts.InputTimezone
	(*InputIMClient)(nil),     // 24: webitel.contacts.InputIMClient
	(*InputVariable)(nil),     // 25: webitel.contacts.InputVariable
	(*InputContactGroup)(nil), // 26: webitel.contacts.InputContactGroup
}
var file_contacts_contact_proto_depIdxs = []int32{
	4,  // 0: webitel.contacts.Contact.domain:type_name -> webitel.contacts.Lookup
	4,  // 1: webitel.contacts.Contact.created_by:type_name -> webitel.contacts.Lookup
	4,  // 2: webitel.contacts.Contact.updated_by:type_name -> webitel.contacts.Lookup
	4,  // 3: webitel.contacts.Contact.user:type_name -> webitel.contacts.Lookup
	0,  // 4: webitel.contacts.Contact.name:type_name -> webitel.contacts.Name
	5,  // 5: webitel.contacts.Contact.labels:type_name -> webitel.contacts.LabelList
	6,  // 6: webitel.contacts.Contact.emails:type_name -> webitel.contacts.EmailList
	7,  // 7: webitel.contacts.Contact.phones:type_name -> webitel.contacts.PhoneList
	8,  // 8: webitel.contacts.Contact.photos:type_name -> webitel.contacts.PhotoList
	9,  // 9: webitel.contacts.Contact.managers:type_name -> webitel.contacts.ManagerList
	10, // 10: webitel.contacts.Contact.comments:type_name -> webitel.contacts.CommentList
	11, // 11: webitel.contacts.Contact.languages:type_name -> webitel.contacts.LanguageList
	12, // 12: webitel.contacts.Contact.timezones:type_name -> webitel.contacts.TimezoneList
	13, // 13: webitel.contacts.Contact.groups:type_name -> webitel.contacts.ContactGroupList
	14, // 14: webitel.contacts.Contact.imclients:type_name -> webitel.contacts.IMClientList
	15, // 15: webitel.contacts.Contact.variables:type_name -> webitel.contacts.VariableList
	1,  // 16: webitel.contacts.InputContact.name:type_name -> webitel.contacts.InputName
	16, // 17: webitel.contacts.InputContact.photos:type_name -> webitel.contacts.InputPhoto
	17, // 18: webitel.contacts.InputContact.labels:type_name -> webitel.contacts.InputLabel
	18, // 19: webitel.contacts.InputContact.emails:type_name -> webitel.contacts.InputEmailAddress
	19, // 20: webitel.contacts.InputContact.phones:type_name -> webitel.contacts.InputPhoneNumber
	20, // 21: webitel.contacts.InputContact.managers:type_name -> webitel.contacts.InputManager
	21, // 22: webitel.contacts.InputContact.comments:type_name -> webitel.contacts.InputComment
	22, // 23: webitel.contacts.InputContact.languages:type_name -> webitel.contacts.InputLanguage
	23, // 24: webitel.contacts.InputContact.timezones:type_name -> webitel.contacts.InputTimezone
	24, // 25: webitel.contacts.InputContact.imclients:type_name -> webitel.contacts.InputIMClient
	25, // 26: webitel.contacts.InputContact.variables:type_name -> webitel.contacts.InputVariable
	26, // 27: webitel.contacts.InputContact.groups:type_name -> webitel.contacts.InputContactGroup
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_contacts_contact_proto_init() }
func file_contacts_contact_proto_init() {
	if File_contacts_contact_proto != nil {
		return
	}
	file_contacts_fields_proto_init()
	file_contacts_labels_proto_init()
	file_contacts_emails_proto_init()
	file_contacts_photos_proto_init()
	file_contacts_phones_proto_init()
	file_contacts_managers_proto_init()
	file_contacts_comments_proto_init()
	file_contacts_variables_proto_init()
	file_contacts_languages_proto_init()
	file_contacts_timezones_proto_init()
	file_contacts_imclients_proto_init()
	file_contacts_contact_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contacts_contact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contact_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contacts_contact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contacts_contact_proto_goTypes,
		DependencyIndexes: file_contacts_contact_proto_depIdxs,
		MessageInfos:      file_contacts_contact_proto_msgTypes,
	}.Build()
	File_contacts_contact_proto = out.File
	file_contacts_contact_proto_rawDesc = nil
	file_contacts_contact_proto_goTypes = nil
	file_contacts_contact_proto_depIdxs = nil
}
