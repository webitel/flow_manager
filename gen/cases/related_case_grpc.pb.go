// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: related_case.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelatedCases_LocateRelatedCase_FullMethodName = "/webitel.cases.RelatedCases/LocateRelatedCase"
	RelatedCases_CreateRelatedCase_FullMethodName = "/webitel.cases.RelatedCases/CreateRelatedCase"
	RelatedCases_UpdateRelatedCase_FullMethodName = "/webitel.cases.RelatedCases/UpdateRelatedCase"
	RelatedCases_DeleteRelatedCase_FullMethodName = "/webitel.cases.RelatedCases/DeleteRelatedCase"
	RelatedCases_ListRelatedCases_FullMethodName  = "/webitel.cases.RelatedCases/ListRelatedCases"
)

// RelatedCasesClient is the client API for RelatedCases service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelatedCasesClient interface {
	// Retrieve a specific related case.
	LocateRelatedCase(ctx context.Context, in *LocateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error)
	// Create a new related case.
	CreateRelatedCase(ctx context.Context, in *CreateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error)
	// Update an existing related case.
	UpdateRelatedCase(ctx context.Context, in *UpdateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error)
	// Delete a specific related case.
	DeleteRelatedCase(ctx context.Context, in *DeleteRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error)
	// List all related cases for a specific case.
	ListRelatedCases(ctx context.Context, in *ListRelatedCasesRequest, opts ...grpc.CallOption) (*RelatedCaseList, error)
}

type relatedCasesClient struct {
	cc grpc.ClientConnInterface
}

func NewRelatedCasesClient(cc grpc.ClientConnInterface) RelatedCasesClient {
	return &relatedCasesClient{cc}
}

func (c *relatedCasesClient) LocateRelatedCase(ctx context.Context, in *LocateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error) {
	out := new(RelatedCase)
	err := c.cc.Invoke(ctx, RelatedCases_LocateRelatedCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relatedCasesClient) CreateRelatedCase(ctx context.Context, in *CreateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error) {
	out := new(RelatedCase)
	err := c.cc.Invoke(ctx, RelatedCases_CreateRelatedCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relatedCasesClient) UpdateRelatedCase(ctx context.Context, in *UpdateRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error) {
	out := new(RelatedCase)
	err := c.cc.Invoke(ctx, RelatedCases_UpdateRelatedCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relatedCasesClient) DeleteRelatedCase(ctx context.Context, in *DeleteRelatedCaseRequest, opts ...grpc.CallOption) (*RelatedCase, error) {
	out := new(RelatedCase)
	err := c.cc.Invoke(ctx, RelatedCases_DeleteRelatedCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relatedCasesClient) ListRelatedCases(ctx context.Context, in *ListRelatedCasesRequest, opts ...grpc.CallOption) (*RelatedCaseList, error) {
	out := new(RelatedCaseList)
	err := c.cc.Invoke(ctx, RelatedCases_ListRelatedCases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelatedCasesServer is the server API for RelatedCases service.
// All implementations must embed UnimplementedRelatedCasesServer
// for forward compatibility
type RelatedCasesServer interface {
	// Retrieve a specific related case.
	LocateRelatedCase(context.Context, *LocateRelatedCaseRequest) (*RelatedCase, error)
	// Create a new related case.
	CreateRelatedCase(context.Context, *CreateRelatedCaseRequest) (*RelatedCase, error)
	// Update an existing related case.
	UpdateRelatedCase(context.Context, *UpdateRelatedCaseRequest) (*RelatedCase, error)
	// Delete a specific related case.
	DeleteRelatedCase(context.Context, *DeleteRelatedCaseRequest) (*RelatedCase, error)
	// List all related cases for a specific case.
	ListRelatedCases(context.Context, *ListRelatedCasesRequest) (*RelatedCaseList, error)
	mustEmbedUnimplementedRelatedCasesServer()
}

// UnimplementedRelatedCasesServer must be embedded to have forward compatible implementations.
type UnimplementedRelatedCasesServer struct {
}

func (UnimplementedRelatedCasesServer) LocateRelatedCase(context.Context, *LocateRelatedCaseRequest) (*RelatedCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateRelatedCase not implemented")
}
func (UnimplementedRelatedCasesServer) CreateRelatedCase(context.Context, *CreateRelatedCaseRequest) (*RelatedCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelatedCase not implemented")
}
func (UnimplementedRelatedCasesServer) UpdateRelatedCase(context.Context, *UpdateRelatedCaseRequest) (*RelatedCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelatedCase not implemented")
}
func (UnimplementedRelatedCasesServer) DeleteRelatedCase(context.Context, *DeleteRelatedCaseRequest) (*RelatedCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelatedCase not implemented")
}
func (UnimplementedRelatedCasesServer) ListRelatedCases(context.Context, *ListRelatedCasesRequest) (*RelatedCaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelatedCases not implemented")
}
func (UnimplementedRelatedCasesServer) mustEmbedUnimplementedRelatedCasesServer() {}

// UnsafeRelatedCasesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelatedCasesServer will
// result in compilation errors.
type UnsafeRelatedCasesServer interface {
	mustEmbedUnimplementedRelatedCasesServer()
}

func RegisterRelatedCasesServer(s grpc.ServiceRegistrar, srv RelatedCasesServer) {
	s.RegisterService(&RelatedCases_ServiceDesc, srv)
}

func _RelatedCases_LocateRelatedCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRelatedCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelatedCasesServer).LocateRelatedCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelatedCases_LocateRelatedCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelatedCasesServer).LocateRelatedCase(ctx, req.(*LocateRelatedCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelatedCases_CreateRelatedCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelatedCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelatedCasesServer).CreateRelatedCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelatedCases_CreateRelatedCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelatedCasesServer).CreateRelatedCase(ctx, req.(*CreateRelatedCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelatedCases_UpdateRelatedCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelatedCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelatedCasesServer).UpdateRelatedCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelatedCases_UpdateRelatedCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelatedCasesServer).UpdateRelatedCase(ctx, req.(*UpdateRelatedCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelatedCases_DeleteRelatedCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelatedCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelatedCasesServer).DeleteRelatedCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelatedCases_DeleteRelatedCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelatedCasesServer).DeleteRelatedCase(ctx, req.(*DeleteRelatedCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelatedCases_ListRelatedCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelatedCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelatedCasesServer).ListRelatedCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelatedCases_ListRelatedCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelatedCasesServer).ListRelatedCases(ctx, req.(*ListRelatedCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelatedCases_ServiceDesc is the grpc.ServiceDesc for RelatedCases service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelatedCases_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.RelatedCases",
	HandlerType: (*RelatedCasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocateRelatedCase",
			Handler:    _RelatedCases_LocateRelatedCase_Handler,
		},
		{
			MethodName: "CreateRelatedCase",
			Handler:    _RelatedCases_CreateRelatedCase_Handler,
		},
		{
			MethodName: "UpdateRelatedCase",
			Handler:    _RelatedCases_UpdateRelatedCase_Handler,
		},
		{
			MethodName: "DeleteRelatedCase",
			Handler:    _RelatedCases_DeleteRelatedCase_Handler,
		},
		{
			MethodName: "ListRelatedCases",
			Handler:    _RelatedCases_ListRelatedCases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "related_case.proto",
}
