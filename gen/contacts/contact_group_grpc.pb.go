// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/contact_group.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContactGroups_ListContactGroups_FullMethodName   = "/webitel.contacts.ContactGroups/ListContactGroups"
	ContactGroups_MergeContactGroups_FullMethodName  = "/webitel.contacts.ContactGroups/MergeContactGroups"
	ContactGroups_ResetContactGroups_FullMethodName  = "/webitel.contacts.ContactGroups/ResetContactGroups"
	ContactGroups_DeleteContactGroups_FullMethodName = "/webitel.contacts.ContactGroups/DeleteContactGroups"
	ContactGroups_LocateContactGroup_FullMethodName  = "/webitel.contacts.ContactGroups/LocateContactGroup"
	ContactGroups_UpdateContactGroup_FullMethodName  = "/webitel.contacts.ContactGroups/UpdateContactGroup"
	ContactGroups_DeleteContactGroup_FullMethodName  = "/webitel.contacts.ContactGroups/DeleteContactGroup"
)

// ContactGroupsClient is the client API for ContactGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing contact groups.
type ContactGroupsClient interface {
	// List of the Contact's group(s).
	ListContactGroups(ctx context.Context, in *ListContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error)
	// Associate more group(s) with the Contact.
	MergeContactGroups(ctx context.Context, in *MergeContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error)
	// Resets all groups of the contact according to the input dataset.
	ResetContactGroups(ctx context.Context, in *ResetContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error)
	// Remove the Contact's group(s).
	DeleteContactGroups(ctx context.Context, in *DeleteContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error)
	// Locate the Contact's group association.
	LocateContactGroup(ctx context.Context, in *LocateContactGroupRequest, opts ...grpc.CallOption) (*ContactGroup, error)
	// Update the Contact's group details.
	UpdateContactGroup(ctx context.Context, in *UpdateContactGroupRequest, opts ...grpc.CallOption) (*ContactGroupList, error)
	// Remove the Contact's group association.
	DeleteContactGroup(ctx context.Context, in *DeleteContactGroupRequest, opts ...grpc.CallOption) (*ContactGroup, error)
}

type contactGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewContactGroupsClient(cc grpc.ClientConnInterface) ContactGroupsClient {
	return &contactGroupsClient{cc}
}

func (c *contactGroupsClient) ListContactGroups(ctx context.Context, in *ListContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupList)
	err := c.cc.Invoke(ctx, ContactGroups_ListContactGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) MergeContactGroups(ctx context.Context, in *MergeContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupList)
	err := c.cc.Invoke(ctx, ContactGroups_MergeContactGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) ResetContactGroups(ctx context.Context, in *ResetContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupList)
	err := c.cc.Invoke(ctx, ContactGroups_ResetContactGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) DeleteContactGroups(ctx context.Context, in *DeleteContactGroupsRequest, opts ...grpc.CallOption) (*ContactGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupList)
	err := c.cc.Invoke(ctx, ContactGroups_DeleteContactGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) LocateContactGroup(ctx context.Context, in *LocateContactGroupRequest, opts ...grpc.CallOption) (*ContactGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroup)
	err := c.cc.Invoke(ctx, ContactGroups_LocateContactGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) UpdateContactGroup(ctx context.Context, in *UpdateContactGroupRequest, opts ...grpc.CallOption) (*ContactGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupList)
	err := c.cc.Invoke(ctx, ContactGroups_UpdateContactGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactGroupsClient) DeleteContactGroup(ctx context.Context, in *DeleteContactGroupRequest, opts ...grpc.CallOption) (*ContactGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroup)
	err := c.cc.Invoke(ctx, ContactGroups_DeleteContactGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactGroupsServer is the server API for ContactGroups service.
// All implementations must embed UnimplementedContactGroupsServer
// for forward compatibility.
//
// Service for managing contact groups.
type ContactGroupsServer interface {
	// List of the Contact's group(s).
	ListContactGroups(context.Context, *ListContactGroupsRequest) (*ContactGroupList, error)
	// Associate more group(s) with the Contact.
	MergeContactGroups(context.Context, *MergeContactGroupsRequest) (*ContactGroupList, error)
	// Resets all groups of the contact according to the input dataset.
	ResetContactGroups(context.Context, *ResetContactGroupsRequest) (*ContactGroupList, error)
	// Remove the Contact's group(s).
	DeleteContactGroups(context.Context, *DeleteContactGroupsRequest) (*ContactGroupList, error)
	// Locate the Contact's group association.
	LocateContactGroup(context.Context, *LocateContactGroupRequest) (*ContactGroup, error)
	// Update the Contact's group details.
	UpdateContactGroup(context.Context, *UpdateContactGroupRequest) (*ContactGroupList, error)
	// Remove the Contact's group association.
	DeleteContactGroup(context.Context, *DeleteContactGroupRequest) (*ContactGroup, error)
	mustEmbedUnimplementedContactGroupsServer()
}

// UnimplementedContactGroupsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactGroupsServer struct{}

func (UnimplementedContactGroupsServer) ListContactGroups(context.Context, *ListContactGroupsRequest) (*ContactGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactGroups not implemented")
}
func (UnimplementedContactGroupsServer) MergeContactGroups(context.Context, *MergeContactGroupsRequest) (*ContactGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeContactGroups not implemented")
}
func (UnimplementedContactGroupsServer) ResetContactGroups(context.Context, *ResetContactGroupsRequest) (*ContactGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetContactGroups not implemented")
}
func (UnimplementedContactGroupsServer) DeleteContactGroups(context.Context, *DeleteContactGroupsRequest) (*ContactGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactGroups not implemented")
}
func (UnimplementedContactGroupsServer) LocateContactGroup(context.Context, *LocateContactGroupRequest) (*ContactGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateContactGroup not implemented")
}
func (UnimplementedContactGroupsServer) UpdateContactGroup(context.Context, *UpdateContactGroupRequest) (*ContactGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactGroup not implemented")
}
func (UnimplementedContactGroupsServer) DeleteContactGroup(context.Context, *DeleteContactGroupRequest) (*ContactGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactGroup not implemented")
}
func (UnimplementedContactGroupsServer) mustEmbedUnimplementedContactGroupsServer() {}
func (UnimplementedContactGroupsServer) testEmbeddedByValue()                       {}

// UnsafeContactGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactGroupsServer will
// result in compilation errors.
type UnsafeContactGroupsServer interface {
	mustEmbedUnimplementedContactGroupsServer()
}

func RegisterContactGroupsServer(s grpc.ServiceRegistrar, srv ContactGroupsServer) {
	// If the following call pancis, it indicates UnimplementedContactGroupsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactGroups_ServiceDesc, srv)
}

func _ContactGroups_ListContactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).ListContactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_ListContactGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).ListContactGroups(ctx, req.(*ListContactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_MergeContactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeContactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).MergeContactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_MergeContactGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).MergeContactGroups(ctx, req.(*MergeContactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_ResetContactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetContactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).ResetContactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_ResetContactGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).ResetContactGroups(ctx, req.(*ResetContactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_DeleteContactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).DeleteContactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_DeleteContactGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).DeleteContactGroups(ctx, req.(*DeleteContactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_LocateContactGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateContactGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).LocateContactGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_LocateContactGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).LocateContactGroup(ctx, req.(*LocateContactGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_UpdateContactGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).UpdateContactGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_UpdateContactGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).UpdateContactGroup(ctx, req.(*UpdateContactGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactGroups_DeleteContactGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactGroupsServer).DeleteContactGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactGroups_DeleteContactGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactGroupsServer).DeleteContactGroup(ctx, req.(*DeleteContactGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactGroups_ServiceDesc is the grpc.ServiceDesc for ContactGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.ContactGroups",
	HandlerType: (*ContactGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContactGroups",
			Handler:    _ContactGroups_ListContactGroups_Handler,
		},
		{
			MethodName: "MergeContactGroups",
			Handler:    _ContactGroups_MergeContactGroups_Handler,
		},
		{
			MethodName: "ResetContactGroups",
			Handler:    _ContactGroups_ResetContactGroups_Handler,
		},
		{
			MethodName: "DeleteContactGroups",
			Handler:    _ContactGroups_DeleteContactGroups_Handler,
		},
		{
			MethodName: "LocateContactGroup",
			Handler:    _ContactGroups_LocateContactGroup_Handler,
		},
		{
			MethodName: "UpdateContactGroup",
			Handler:    _ContactGroups_UpdateContactGroup_Handler,
		},
		{
			MethodName: "DeleteContactGroup",
			Handler:    _ContactGroups_DeleteContactGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/contact_group.proto",
}
