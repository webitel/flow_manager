// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/group.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Groups_ListGroups_FullMethodName              = "/webitel.contacts.Groups/ListGroups"
	Groups_CreateGroup_FullMethodName             = "/webitel.contacts.Groups/CreateGroup"
	Groups_UpdateGroup_FullMethodName             = "/webitel.contacts.Groups/UpdateGroup"
	Groups_DeleteGroup_FullMethodName             = "/webitel.contacts.Groups/DeleteGroup"
	Groups_AddContactsToGroup_FullMethodName      = "/webitel.contacts.Groups/AddContactsToGroup"
	Groups_RemoveContactsFromGroup_FullMethodName = "/webitel.contacts.Groups/RemoveContactsFromGroup"
	Groups_LocateGroup_FullMethodName             = "/webitel.contacts.Groups/LocateGroup"
)

// GroupsClient is the client API for Groups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing groups.
type GroupsClient interface {
	// Retrieve a list of groups or search groups.
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*GroupList, error)
	// Create a new group.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Update an existing group.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Delete a group.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Add contacts to a group.
	AddContactsToGroup(ctx context.Context, in *AddContactsToGroupRequest, opts ...grpc.CallOption) (*ContactList, error)
	// Remove contacts from a group.
	RemoveContactsFromGroup(ctx context.Context, in *RemoveContactsFromGroupRequest, opts ...grpc.CallOption) (*ContactList, error)
	// Locate a group by ID.
	LocateGroup(ctx context.Context, in *LocateGroupRequest, opts ...grpc.CallOption) (*LocateGroupResponse, error)
}

type groupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsClient(cc grpc.ClientConnInterface) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*GroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupList)
	err := c.cc.Invoke(ctx, Groups_ListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, Groups_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, Groups_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, Groups_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) AddContactsToGroup(ctx context.Context, in *AddContactsToGroupRequest, opts ...grpc.CallOption) (*ContactList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactList)
	err := c.cc.Invoke(ctx, Groups_AddContactsToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveContactsFromGroup(ctx context.Context, in *RemoveContactsFromGroupRequest, opts ...grpc.CallOption) (*ContactList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactList)
	err := c.cc.Invoke(ctx, Groups_RemoveContactsFromGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LocateGroup(ctx context.Context, in *LocateGroupRequest, opts ...grpc.CallOption) (*LocateGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocateGroupResponse)
	err := c.cc.Invoke(ctx, Groups_LocateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServer is the server API for Groups service.
// All implementations must embed UnimplementedGroupsServer
// for forward compatibility.
//
// Service for managing groups.
type GroupsServer interface {
	// Retrieve a list of groups or search groups.
	ListGroups(context.Context, *ListGroupsRequest) (*GroupList, error)
	// Create a new group.
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	// Update an existing group.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*Group, error)
	// Delete a group.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error)
	// Add contacts to a group.
	AddContactsToGroup(context.Context, *AddContactsToGroupRequest) (*ContactList, error)
	// Remove contacts from a group.
	RemoveContactsFromGroup(context.Context, *RemoveContactsFromGroupRequest) (*ContactList, error)
	// Locate a group by ID.
	LocateGroup(context.Context, *LocateGroupRequest) (*LocateGroupResponse, error)
	mustEmbedUnimplementedGroupsServer()
}

// UnimplementedGroupsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupsServer struct{}

func (UnimplementedGroupsServer) ListGroups(context.Context, *ListGroupsRequest) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedGroupsServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupsServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupsServer) AddContactsToGroup(context.Context, *AddContactsToGroupRequest) (*ContactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactsToGroup not implemented")
}
func (UnimplementedGroupsServer) RemoveContactsFromGroup(context.Context, *RemoveContactsFromGroupRequest) (*ContactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContactsFromGroup not implemented")
}
func (UnimplementedGroupsServer) LocateGroup(context.Context, *LocateGroupRequest) (*LocateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateGroup not implemented")
}
func (UnimplementedGroupsServer) mustEmbedUnimplementedGroupsServer() {}
func (UnimplementedGroupsServer) testEmbeddedByValue()                {}

// UnsafeGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServer will
// result in compilation errors.
type UnsafeGroupsServer interface {
	mustEmbedUnimplementedGroupsServer()
}

func RegisterGroupsServer(s grpc.ServiceRegistrar, srv GroupsServer) {
	// If the following call pancis, it indicates UnimplementedGroupsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Groups_ServiceDesc, srv)
}

func _Groups_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_AddContactsToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactsToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).AddContactsToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_AddContactsToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).AddContactsToGroup(ctx, req.(*AddContactsToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveContactsFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContactsFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveContactsFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_RemoveContactsFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveContactsFromGroup(ctx, req.(*RemoveContactsFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LocateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LocateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Groups_LocateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LocateGroup(ctx, req.(*LocateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Groups_ServiceDesc is the grpc.ServiceDesc for Groups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Groups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGroups",
			Handler:    _Groups_ListGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Groups_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Groups_DeleteGroup_Handler,
		},
		{
			MethodName: "AddContactsToGroup",
			Handler:    _Groups_AddContactsToGroup_Handler,
		},
		{
			MethodName: "RemoveContactsFromGroup",
			Handler:    _Groups_RemoveContactsFromGroup_Handler,
		},
		{
			MethodName: "LocateGroup",
			Handler:    _Groups_LocateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/group.proto",
}
