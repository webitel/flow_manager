// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: contacts/contacts.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Contact dataset.
type ContactList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact(s) dataset page.
	Data []*Contact `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// The page number of the partial result.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Indicates that this is a partial result.
	// More data available upon query: ?size=${data.len}&page=${page++}
	Next bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ContactList) Reset() {
	*x = ContactList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactList) ProtoMessage() {}

func (x *ContactList) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactList.ProtoReflect.Descriptor instead.
func (*ContactList) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{0}
}

func (x *ContactList) GetData() []*Contact {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContactList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ContactList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

type LocateContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source Fields to return into result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// The Contact source IDentifier.
	// Accept: `etag` (obsolete+) or `id`.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// The requirement of a special access mode to the Source.
	Mode AccessMode `protobuf:"varint,3,opt,name=mode,proto3,enum=webitel.contacts.AccessMode" json:"mode,omitempty"`
}

func (x *LocateContactRequest) Reset() {
	*x = LocateContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateContactRequest) ProtoMessage() {}

func (x *LocateContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateContactRequest.ProtoReflect.Descriptor instead.
func (*LocateContactRequest) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{1}
}

func (x *LocateContactRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LocateContactRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *LocateContactRequest) GetMode() AccessMode {
	if x != nil {
		return x.Mode
	}
	return AccessMode_READ
}

type SearchContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number of result records.   _default(1); offset=(size*(page-1));_
	//
	// ```javascript
	// let
	//
	//	  offset = 0
	//	, page = req.page
	//
	// ;
	// if (page <= 0)
	//
	//	page = 1;
	//
	// if (page > 1)
	//
	//	offset = ((page-1)*size);
	//
	// // . . .
	// ```
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Limit of result page records count.   _default(16); limit=(size<=0?-1:size+1);_
	//
	// ```javascript
	// const
	//
	//	  default = 16
	//	, maximum = 32
	//
	// ;
	// let limit = req.size;
	// if (limit <= 0)
	//
	//	limit = default;
	//
	// if (maximum < limit)
	//
	//	limit = maximum;
	//
	// // . . .
	// ```
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Search term:
	// `?` - matches any character
	// `*` - matches 0 or more characters
	// Used to query records within a set of `qin` fields, eg: name,emails{type},labels etc...
	Q string `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	// Sort result dataset of records by fields.
	// ```
	// sort ::= *( ORDER name )
	//
	// ORDER  = ASC / DESC
	// DESC   = "-" / "!"
	// ASC    = [ "+" ]   ; Default
	// ```
	//
	// # Fields available
	//
	// - `id`(seq)
	// - `domain`{name}
	// - `created_at`
	// - `created_by`{name}
	// - `updated_at`
	// - `updated_by`{name}
	//
	// Use ?fields=`field.sort()` option to sort Edge fields.
	Sort []string `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	// Fields [Q]uery to build result dataset record.
	// ```
	// fields ::= field [ *( "," field ) ]
	// field  ::= name [ *( func ) ] [ inner ]
	// inner  ::= "{" fields "}"
	// funcs  ::= *( func )
	// func   ::= "." name "(" [ args ] ")"
	// name   ::= ALPHA / DIGIT / USCORE
	//
	// ALPHA    = %x41-5A / %x61-7A  ; "A"-"Z" / "a"-"z"
	// DIGIT    = %x30-39            ; "0"-"9"
	// USCORE   = %x5F ; underscore  ; "_"
	// ```
	Fields []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// Records with unique IDentifier(s).
	// Accept: `id` -or- `etag`.
	Id []string `protobuf:"bytes,6,rep,name=id,proto3" json:"id,omitempty"`
	// [Q]uery[IN] is a set of search fields for term `q`.
	// Default: `name{common_name}`.
	Qin []string `protobuf:"bytes,7,rep,name=qin,proto3" json:"qin,omitempty"`
	// Source access mode requirement.
	Mode AccessMode `protobuf:"varint,8,opt,name=mode,proto3,enum=webitel.contacts.AccessMode" json:"mode,omitempty"`
	// Excludes contacts that belong to the specified group ID.
	// - Filters out contacts associated with the given `group_id`.
	NotIdGroup int64 `protobuf:"varint,30,opt,name=not_id_group,json=notIdGroup,proto3" json:"not_id_group,omitempty"`
	// Filters contacts by the specified group(s).
	// - Includes only contacts that belong to one or more of the given group Group(s).
	Group []int64 `protobuf:"varint,31,rep,packed,name=group,proto3" json:"group,omitempty"`
	// Filters contacts by the specified owner(s).
	// - Includes only contacts whose owner matches one or more of the given Owner(s).
	// - The owner ID corresponds to `contact_id` in the `directory.wbt_user` table.
	Owner []int64 `protobuf:"varint,32,rep,packed,name=owner,proto3" json:"owner,omitempty"`
	// Filters contacts by the specified label(s).
	// - Includes only contacts that have one or more of the given Label(s).
	Label []string `protobuf:"bytes,33,rep,name=label,proto3" json:"label,omitempty"`
	// Filters contacts based on whether they are user-associated.
	// - `true`  → Includes only user-associated contacts.
	// - `false` → Includes only contacts that are NOT user-associated.
	// - A contact is considered user-associated if it exists in `directory.wbt_user`.
	User *wrapperspb.BoolValue `protobuf:"bytes,34,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SearchContactsRequest) Reset() {
	*x = SearchContactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactsRequest) ProtoMessage() {}

func (x *SearchContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactsRequest.ProtoReflect.Descriptor instead.
func (*SearchContactsRequest) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{2}
}

func (x *SearchContactsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchContactsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchContactsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchContactsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchContactsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchContactsRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchContactsRequest) GetQin() []string {
	if x != nil {
		return x.Qin
	}
	return nil
}

func (x *SearchContactsRequest) GetMode() AccessMode {
	if x != nil {
		return x.Mode
	}
	return AccessMode_READ
}

func (x *SearchContactsRequest) GetNotIdGroup() int64 {
	if x != nil {
		return x.NotIdGroup
	}
	return 0
}

func (x *SearchContactsRequest) GetGroup() []int64 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *SearchContactsRequest) GetOwner() []int64 {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SearchContactsRequest) GetLabel() []string {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *SearchContactsRequest) GetUser() *wrapperspb.BoolValue {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchContactsNARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32      `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32      `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Q        string     `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	Sort     []string   `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	Fields   []string   `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	Id       []string   `protobuf:"bytes,6,rep,name=id,proto3" json:"id,omitempty"`
	Qin      []string   `protobuf:"bytes,7,rep,name=qin,proto3" json:"qin,omitempty"`
	Mode     AccessMode `protobuf:"varint,8,opt,name=mode,proto3,enum=webitel.contacts.AccessMode" json:"mode,omitempty"`
	DomainId int64      `protobuf:"varint,9,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *SearchContactsNARequest) Reset() {
	*x = SearchContactsNARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactsNARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactsNARequest) ProtoMessage() {}

func (x *SearchContactsNARequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactsNARequest.ProtoReflect.Descriptor instead.
func (*SearchContactsNARequest) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{3}
}

func (x *SearchContactsNARequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchContactsNARequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchContactsNARequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchContactsNARequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchContactsNARequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchContactsNARequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchContactsNARequest) GetQin() []string {
	if x != nil {
		return x.Qin
	}
	return nil
}

func (x *SearchContactsNARequest) GetMode() AccessMode {
	if x != nil {
		return x.Mode
	}
	return AccessMode_READ
}

func (x *SearchContactsNARequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type InputContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON PATCH fields mask.
	// List of JPath fields specified in body(input).
	XJsonMask []string `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	// Source Fields to return into result.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// NEW Contact source changes
	Input *InputContact `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *InputContactRequest) Reset() {
	*x = InputContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContactRequest) ProtoMessage() {}

func (x *InputContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContactRequest.ProtoReflect.Descriptor instead.
func (*InputContactRequest) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{4}
}

func (x *InputContactRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *InputContactRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *InputContactRequest) GetInput() *InputContact {
	if x != nil {
		return x.Input
	}
	return nil
}

type DeleteContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique ID of the latest version of a resource.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *DeleteContactRequest) Reset() {
	*x = DeleteContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_contacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContactRequest) ProtoMessage() {}

func (x *DeleteContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_contacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContactRequest.ProtoReflect.Descriptor instead.
func (*DeleteContactRequest) Descriptor() ([]byte, []int) {
	return file_contacts_contacts_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteContactRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteContactRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

var File_contacts_contacts_proto protoreflect.FileDescriptor

var file_contacts_contacts_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x74, 0x0a, 0x14, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0xd7, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x31, 0x92, 0x41, 0x2e, 0x3a, 0x02, 0x69, 0x64, 0x4a, 0x11, 0x22, 0x21, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2c, 0x74, 0x61, 0x67, 0x22, 0x8a, 0x01, 0x0d, 0x5e, 0x5b,
	0x2b, 0x7c, 0x2d, 0x7c, 0x21, 0x5d, 0x3f, 0x5c, 0x77, 0x2b, 0x24, 0xb0, 0x01, 0x01, 0x9a, 0x02,
	0x01, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x3a, 0x01, 0x2a,
	0x4a, 0x36, 0x22, 0x2a, 0x2c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x33, 0x29, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x28, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x29, 0x7b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x2c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7d, 0x22, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x71, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x17,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4e, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x71, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01,
	0x02, 0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x67, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x8a, 0x01,
	0x05, 0x5e, 0x5c, 0x77, 0x2b, 0x24, 0xca, 0x3e, 0x07, 0xfa, 0x02, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x32, 0xa9, 0x0b, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x12, 0xf9, 0x06, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x06, 0x92,
	0x41, 0x89, 0x06, 0x1a, 0x86, 0x06, 0x7c, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x0a, 0x7c, 0x20, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x20, 0x7c, 0x20, 0x2d, 0x2d, 0x2d, 0x2d,
	0x20, 0x0a, 0x7c, 0x20, 0x2a, 0x2a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x20, 0x52, 0x45, 0x41, 0x44, 0x2d, 0x4f, 0x4e, 0x4c, 0x59, 0x20, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x20, 0x7c, 0x20, 0x0a, 0x7c, 0x20, 0x60,
	0x69, 0x64, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x76, 0x65, 0x72, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x7c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x65, 0x74,
	0x61, 0x67, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x20, 0x0a, 0x7c, 0x20, 0x2a, 0x2a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x20, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x20, 0x7c, 0x20, 0x0a, 0x7c, 0x20,
	0x60, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x60, 0x20, 0x7c, 0x20, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x28, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x3a, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x29, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x60, 0x20, 0x7c, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x28, 0x75, 0x73, 0x65, 0x72, 0x29,
	0x20, 0x0a, 0x7c, 0x20, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x60,
	0x20, 0x7c, 0x20, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x28, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x3a, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x29, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x28, 0x75,
	0x73, 0x65, 0x72, 0x29, 0x20, 0x0a, 0x7c, 0x20, 0x2a, 0x2a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x20, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x20,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x20, 0x7c, 0x20,
	0x0a, 0x7c, 0x20, 0x60, 0x6e, 0x61, 0x6d, 0x65, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x21, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x0a,
	0x7c, 0x20, 0x60, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x60, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x5b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20,
	0x60, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x60, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x5b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x60, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x5b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x60, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x60, 0x20, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x60, 0x20, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x21, 0x5d, 0x20, 0x0a, 0x7c, 0x20, 0x60, 0x69, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x60, 0x20, 0x7c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5b,
	0x69, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x21, 0x5d, 0x20, 0x0a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x5e, 0x0a,
	0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4e,
	0x41, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x4e, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x6b, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x09, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x16, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61,
	0x67, 0x7d, 0x12, 0x6c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d,
	0x42, 0xa8, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x42, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x57,
	0x43, 0x58, 0xaa, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0xca, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1c, 0x57, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_contacts_contacts_proto_rawDescOnce sync.Once
	file_contacts_contacts_proto_rawDescData = file_contacts_contacts_proto_rawDesc
)

func file_contacts_contacts_proto_rawDescGZIP() []byte {
	file_contacts_contacts_proto_rawDescOnce.Do(func() {
		file_contacts_contacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_contacts_contacts_proto_rawDescData)
	})
	return file_contacts_contacts_proto_rawDescData
}

var file_contacts_contacts_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_contacts_contacts_proto_goTypes = []interface{}{
	(*ContactList)(nil),             // 0: webitel.contacts.ContactList
	(*LocateContactRequest)(nil),    // 1: webitel.contacts.LocateContactRequest
	(*SearchContactsRequest)(nil),   // 2: webitel.contacts.SearchContactsRequest
	(*SearchContactsNARequest)(nil), // 3: webitel.contacts.SearchContactsNARequest
	(*InputContactRequest)(nil),     // 4: webitel.contacts.InputContactRequest
	(*DeleteContactRequest)(nil),    // 5: webitel.contacts.DeleteContactRequest
	(*Contact)(nil),                 // 6: webitel.contacts.Contact
	(AccessMode)(0),                 // 7: webitel.contacts.AccessMode
	(*wrapperspb.BoolValue)(nil),    // 8: google.protobuf.BoolValue
	(*InputContact)(nil),            // 9: webitel.contacts.InputContact
}
var file_contacts_contacts_proto_depIdxs = []int32{
	6,  // 0: webitel.contacts.ContactList.data:type_name -> webitel.contacts.Contact
	7,  // 1: webitel.contacts.LocateContactRequest.mode:type_name -> webitel.contacts.AccessMode
	7,  // 2: webitel.contacts.SearchContactsRequest.mode:type_name -> webitel.contacts.AccessMode
	8,  // 3: webitel.contacts.SearchContactsRequest.user:type_name -> google.protobuf.BoolValue
	7,  // 4: webitel.contacts.SearchContactsNARequest.mode:type_name -> webitel.contacts.AccessMode
	9,  // 5: webitel.contacts.InputContactRequest.input:type_name -> webitel.contacts.InputContact
	2,  // 6: webitel.contacts.Contacts.SearchContacts:input_type -> webitel.contacts.SearchContactsRequest
	3,  // 7: webitel.contacts.Contacts.SearchContactsNA:input_type -> webitel.contacts.SearchContactsNARequest
	1,  // 8: webitel.contacts.Contacts.LocateContact:input_type -> webitel.contacts.LocateContactRequest
	4,  // 9: webitel.contacts.Contacts.CreateContact:input_type -> webitel.contacts.InputContactRequest
	4,  // 10: webitel.contacts.Contacts.UpdateContact:input_type -> webitel.contacts.InputContactRequest
	5,  // 11: webitel.contacts.Contacts.DeleteContact:input_type -> webitel.contacts.DeleteContactRequest
	0,  // 12: webitel.contacts.Contacts.SearchContacts:output_type -> webitel.contacts.ContactList
	0,  // 13: webitel.contacts.Contacts.SearchContactsNA:output_type -> webitel.contacts.ContactList
	6,  // 14: webitel.contacts.Contacts.LocateContact:output_type -> webitel.contacts.Contact
	6,  // 15: webitel.contacts.Contacts.CreateContact:output_type -> webitel.contacts.Contact
	6,  // 16: webitel.contacts.Contacts.UpdateContact:output_type -> webitel.contacts.Contact
	6,  // 17: webitel.contacts.Contacts.DeleteContact:output_type -> webitel.contacts.Contact
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_contacts_contacts_proto_init() }
func file_contacts_contacts_proto_init() {
	if File_contacts_contacts_proto != nil {
		return
	}
	file_contacts_fields_proto_init()
	file_contacts_contact_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contacts_contacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactsNARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_contacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contacts_contacts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contacts_contacts_proto_goTypes,
		DependencyIndexes: file_contacts_contacts_proto_depIdxs,
		MessageInfos:      file_contacts_contacts_proto_msgTypes,
	}.Build()
	File_contacts_contacts_proto = out.File
	file_contacts_contacts_proto_rawDesc = nil
	file_contacts_contacts_proto_goTypes = nil
	file_contacts_contacts_proto_depIdxs = nil
}
