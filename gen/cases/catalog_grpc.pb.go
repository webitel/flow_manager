// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: catalog.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Catalogs_ListCatalogs_FullMethodName  = "/webitel.cases.Catalogs/ListCatalogs"
	Catalogs_CreateCatalog_FullMethodName = "/webitel.cases.Catalogs/CreateCatalog"
	Catalogs_UpdateCatalog_FullMethodName = "/webitel.cases.Catalogs/UpdateCatalog"
	Catalogs_DeleteCatalog_FullMethodName = "/webitel.cases.Catalogs/DeleteCatalog"
	Catalogs_LocateCatalog_FullMethodName = "/webitel.cases.Catalogs/LocateCatalog"
)

// CatalogsClient is the client API for Catalogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogsClient interface {
	// RPC method to list or search catalogs
	ListCatalogs(ctx context.Context, in *ListCatalogRequest, opts ...grpc.CallOption) (*CatalogList, error)
	// RPC method to create a new catalog
	CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error)
	// RPC method to update an existing catalog
	UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error)
	// RPC method to delete a catalog
	DeleteCatalog(ctx context.Context, in *DeleteCatalogRequest, opts ...grpc.CallOption) (*CatalogList, error)
	// RPC method to locate a specific catalog by ID
	LocateCatalog(ctx context.Context, in *LocateCatalogRequest, opts ...grpc.CallOption) (*LocateCatalogResponse, error)
}

type catalogsClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogsClient(cc grpc.ClientConnInterface) CatalogsClient {
	return &catalogsClient{cc}
}

func (c *catalogsClient) ListCatalogs(ctx context.Context, in *ListCatalogRequest, opts ...grpc.CallOption) (*CatalogList, error) {
	out := new(CatalogList)
	err := c.cc.Invoke(ctx, Catalogs_ListCatalogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogsClient) CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, Catalogs_CreateCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogsClient) UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, Catalogs_UpdateCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogsClient) DeleteCatalog(ctx context.Context, in *DeleteCatalogRequest, opts ...grpc.CallOption) (*CatalogList, error) {
	out := new(CatalogList)
	err := c.cc.Invoke(ctx, Catalogs_DeleteCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogsClient) LocateCatalog(ctx context.Context, in *LocateCatalogRequest, opts ...grpc.CallOption) (*LocateCatalogResponse, error) {
	out := new(LocateCatalogResponse)
	err := c.cc.Invoke(ctx, Catalogs_LocateCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogsServer is the server API for Catalogs service.
// All implementations must embed UnimplementedCatalogsServer
// for forward compatibility
type CatalogsServer interface {
	// RPC method to list or search catalogs
	ListCatalogs(context.Context, *ListCatalogRequest) (*CatalogList, error)
	// RPC method to create a new catalog
	CreateCatalog(context.Context, *CreateCatalogRequest) (*Catalog, error)
	// RPC method to update an existing catalog
	UpdateCatalog(context.Context, *UpdateCatalogRequest) (*Catalog, error)
	// RPC method to delete a catalog
	DeleteCatalog(context.Context, *DeleteCatalogRequest) (*CatalogList, error)
	// RPC method to locate a specific catalog by ID
	LocateCatalog(context.Context, *LocateCatalogRequest) (*LocateCatalogResponse, error)
	mustEmbedUnimplementedCatalogsServer()
}

// UnimplementedCatalogsServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogsServer struct {
}

func (UnimplementedCatalogsServer) ListCatalogs(context.Context, *ListCatalogRequest) (*CatalogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogs not implemented")
}
func (UnimplementedCatalogsServer) CreateCatalog(context.Context, *CreateCatalogRequest) (*Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatalog not implemented")
}
func (UnimplementedCatalogsServer) UpdateCatalog(context.Context, *UpdateCatalogRequest) (*Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalog not implemented")
}
func (UnimplementedCatalogsServer) DeleteCatalog(context.Context, *DeleteCatalogRequest) (*CatalogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalog not implemented")
}
func (UnimplementedCatalogsServer) LocateCatalog(context.Context, *LocateCatalogRequest) (*LocateCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateCatalog not implemented")
}
func (UnimplementedCatalogsServer) mustEmbedUnimplementedCatalogsServer() {}

// UnsafeCatalogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogsServer will
// result in compilation errors.
type UnsafeCatalogsServer interface {
	mustEmbedUnimplementedCatalogsServer()
}

func RegisterCatalogsServer(s grpc.ServiceRegistrar, srv CatalogsServer) {
	s.RegisterService(&Catalogs_ServiceDesc, srv)
}

func _Catalogs_ListCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogsServer).ListCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalogs_ListCatalogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogsServer).ListCatalogs(ctx, req.(*ListCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogs_CreateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogsServer).CreateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalogs_CreateCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogsServer).CreateCatalog(ctx, req.(*CreateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogs_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogsServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalogs_UpdateCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogsServer).UpdateCatalog(ctx, req.(*UpdateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogs_DeleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogsServer).DeleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalogs_DeleteCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogsServer).DeleteCatalog(ctx, req.(*DeleteCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalogs_LocateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogsServer).LocateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalogs_LocateCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogsServer).LocateCatalog(ctx, req.(*LocateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalogs_ServiceDesc is the grpc.ServiceDesc for Catalogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.Catalogs",
	HandlerType: (*CatalogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCatalogs",
			Handler:    _Catalogs_ListCatalogs_Handler,
		},
		{
			MethodName: "CreateCatalog",
			Handler:    _Catalogs_CreateCatalog_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _Catalogs_UpdateCatalog_Handler,
		},
		{
			MethodName: "DeleteCatalog",
			Handler:    _Catalogs_DeleteCatalog_Handler,
		},
		{
			MethodName: "LocateCatalog",
			Handler:    _Catalogs_LocateCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
