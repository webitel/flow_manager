// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bots.proto

package ai_bots

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BotsService_Gemini_FullMethodName = "/ai_bots.BotsService/Gemini"
	BotsService_OpenAI_FullMethodName = "/ai_bots.BotsService/OpenAI"
	BotsService_STT_FullMethodName    = "/ai_bots.BotsService/STT"
)

// BotsServiceClient is the client API for BotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotsServiceClient interface {
	Gemini(ctx context.Context, in *GeminiRequest, opts ...grpc.CallOption) (*GeminiResponse, error)
	OpenAI(ctx context.Context, in *OpenAIRequest, opts ...grpc.CallOption) (*OpenAIResponse, error)
	STT(ctx context.Context, in *STTRequest, opts ...grpc.CallOption) (*STTResponse, error)
}

type botsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotsServiceClient(cc grpc.ClientConnInterface) BotsServiceClient {
	return &botsServiceClient{cc}
}

func (c *botsServiceClient) Gemini(ctx context.Context, in *GeminiRequest, opts ...grpc.CallOption) (*GeminiResponse, error) {
	out := new(GeminiResponse)
	err := c.cc.Invoke(ctx, BotsService_Gemini_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) OpenAI(ctx context.Context, in *OpenAIRequest, opts ...grpc.CallOption) (*OpenAIResponse, error) {
	out := new(OpenAIResponse)
	err := c.cc.Invoke(ctx, BotsService_OpenAI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsServiceClient) STT(ctx context.Context, in *STTRequest, opts ...grpc.CallOption) (*STTResponse, error) {
	out := new(STTResponse)
	err := c.cc.Invoke(ctx, BotsService_STT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotsServiceServer is the server API for BotsService service.
// All implementations must embed UnimplementedBotsServiceServer
// for forward compatibility
type BotsServiceServer interface {
	Gemini(context.Context, *GeminiRequest) (*GeminiResponse, error)
	OpenAI(context.Context, *OpenAIRequest) (*OpenAIResponse, error)
	STT(context.Context, *STTRequest) (*STTResponse, error)
	mustEmbedUnimplementedBotsServiceServer()
}

// UnimplementedBotsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotsServiceServer struct {
}

func (UnimplementedBotsServiceServer) Gemini(context.Context, *GeminiRequest) (*GeminiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gemini not implemented")
}
func (UnimplementedBotsServiceServer) OpenAI(context.Context, *OpenAIRequest) (*OpenAIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAI not implemented")
}
func (UnimplementedBotsServiceServer) STT(context.Context, *STTRequest) (*STTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method STT not implemented")
}
func (UnimplementedBotsServiceServer) mustEmbedUnimplementedBotsServiceServer() {}

// UnsafeBotsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotsServiceServer will
// result in compilation errors.
type UnsafeBotsServiceServer interface {
	mustEmbedUnimplementedBotsServiceServer()
}

func RegisterBotsServiceServer(s grpc.ServiceRegistrar, srv BotsServiceServer) {
	s.RegisterService(&BotsService_ServiceDesc, srv)
}

func _BotsService_Gemini_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeminiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).Gemini(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_Gemini_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).Gemini(ctx, req.(*GeminiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_OpenAI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).OpenAI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_OpenAI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).OpenAI(ctx, req.(*OpenAIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotsService_STT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServiceServer).STT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotsService_STT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServiceServer).STT(ctx, req.(*STTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotsService_ServiceDesc is the grpc.ServiceDesc for BotsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_bots.BotsService",
	HandlerType: (*BotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gemini",
			Handler:    _BotsService_Gemini_Handler,
		},
		{
			MethodName: "OpenAI",
			Handler:    _BotsService_OpenAI_Handler,
		},
		{
			MethodName: "STT",
			Handler:    _BotsService_STT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bots.proto",
}
