// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: case.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	general "github.com/webitel/flow_manager/gen/general"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                       // Name of the changed field, e.g., "status", "priority"
	OldValue *structpb.Value `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"` // Old value (before the update)
	NewValue *structpb.Value `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"` // New value (after the update)
}

func (x *FieldChange) Reset() {
	*x = FieldChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldChange) ProtoMessage() {}

func (x *FieldChange) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldChange.ProtoReflect.Descriptor instead.
func (*FieldChange) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{0}
}

func (x *FieldChange) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldChange) GetOldValue() *structpb.Value {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *FieldChange) GetNewValue() *structpb.Value {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type UpdateCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Case    *Case          `protobuf:"bytes,1,opt,name=case,proto3" json:"case,omitempty"`       // Updated case object
	Changes []*FieldChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"` // List of changed fields with old and new values
}

func (x *UpdateCaseResponse) Reset() {
	*x = UpdateCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaseResponse) ProtoMessage() {}

func (x *UpdateCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateCaseResponse) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCaseResponse) GetCase() *Case {
	if x != nil {
		return x.Case
	}
	return nil
}

func (x *UpdateCaseResponse) GetChanges() []*FieldChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type SearchCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                           // Page number for pagination.
	Size      int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                           // Number of results per page.
	Q         string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`                                  // General query string.
	Ids       []string `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`                              // List of specific case IDs to retrieve.
	Sort      string   `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`                            // Sorting criteria (e.g., field:asc).
	Fields    []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`                        // List of fields to include in the response.
	Filters   []string `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`                      // Key-value pairs for additional filtering.
	ContactId string   `protobuf:"bytes,8,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"` // Contact ID for filtering cases.
	Qin       string   `protobuf:"bytes,9,opt,name=qin,proto3" json:"qin,omitempty"`                              // Specify which fields to apply 'q' to.
}

func (x *SearchCasesRequest) Reset() {
	*x = SearchCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCasesRequest) ProtoMessage() {}

func (x *SearchCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCasesRequest.ProtoReflect.Descriptor instead.
func (*SearchCasesRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{2}
}

func (x *SearchCasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCasesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCasesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCasesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SearchCasesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCasesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchCasesRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchCasesRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *SearchCasesRequest) GetQin() string {
	if x != nil {
		return x.Qin
	}
	return ""
}

// Request message for locating a specific case by its etag identifier.
type LocateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag   string   `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`     // Unique etag identifier of the case.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // List of fields to include in the response.
}

func (x *LocateCaseRequest) Reset() {
	*x = LocateCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateCaseRequest) ProtoMessage() {}

func (x *LocateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateCaseRequest.ProtoReflect.Descriptor instead.
func (*LocateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{3}
}

func (x *LocateCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *LocateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Input structure for creating a new case.
type InputCreateCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject          string                        `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                                             // Required subject of the case.
	Description      string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                     // Optional description of the case.
	ContactInfo      string                        `protobuf:"bytes,3,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`                  // Optional contact information.
	Assignee         *general.Lookup               `protobuf:"bytes,4,opt,name=assignee,proto3" json:"assignee,omitempty"`                                           // Optional assignee ID.
	Reporter         *general.Lookup               `protobuf:"bytes,5,opt,name=reporter,proto3" json:"reporter,omitempty"`                                           // Required reporter ID (if empty, anonymous contact).
	Impacted         *general.Lookup               `protobuf:"bytes,6,opt,name=impacted,proto3" json:"impacted,omitempty"`                                           // Required impacted user ID (default: reporter).
	Group            *general.Lookup               `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`                                                 // Optional group ID.
	Status           *general.Lookup               `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                                               // Initial case status (default from lookup or UI).
	CloseReasonGroup *general.Lookup               `protobuf:"bytes,9,opt,name=close_reason_group,json=closeReasonGroup,proto3" json:"close_reason_group,omitempty"` // Optional close reason.
	Priority         *general.Lookup               `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`                                          // Optional priority level.
	Source           *general.Lookup               `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`                                              // Source of the case.
	Service          *general.Lookup               `protobuf:"bytes,12,opt,name=service,proto3" json:"service,omitempty"`                                            // Service ID (affects many other readonly fields).
	CloseReason      *general.Lookup               `protobuf:"bytes,13,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"`                 // Optional close information.
	CloseResult      string                        `protobuf:"bytes,14,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"`                 // Optional close information.
	Rating           int64                         `protobuf:"varint,15,opt,name=rating,proto3" json:"rating,omitempty"`                                             // API-only rating information.
	RatingComment    string                        `protobuf:"bytes,16,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"`           // API-only rating information.
	StatusCondition  *general.Lookup               `protobuf:"bytes,17,opt,name=status_condition,json=statusCondition,proto3" json:"status_condition,omitempty"`
	Links            []*InputCaseLink              `protobuf:"bytes,18,rep,name=links,proto3" json:"links,omitempty"`     // List of links attached to the case.
	Related          []*CreateCaseRelatedCaseInput `protobuf:"bytes,19,rep,name=related,proto3" json:"related,omitempty"` // List of related cases.
	// Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token.
	UserID *general.Lookup `protobuf:"bytes,20,opt,name=userID,proto3" json:"userID,omitempty"`
	// Custom data extension fields ..
	Custom *structpb.Struct `protobuf:"bytes,100,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *InputCreateCase) Reset() {
	*x = InputCreateCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCreateCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCreateCase) ProtoMessage() {}

func (x *InputCreateCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCreateCase.ProtoReflect.Descriptor instead.
func (*InputCreateCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{4}
}

func (x *InputCreateCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCreateCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCreateCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCreateCase) GetAssignee() *general.Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *InputCreateCase) GetReporter() *general.Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *InputCreateCase) GetImpacted() *general.Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *InputCreateCase) GetGroup() *general.Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputCreateCase) GetStatus() *general.Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InputCreateCase) GetCloseReasonGroup() *general.Lookup {
	if x != nil {
		return x.CloseReasonGroup
	}
	return nil
}

func (x *InputCreateCase) GetPriority() *general.Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *InputCreateCase) GetSource() *general.Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *InputCreateCase) GetService() *general.Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *InputCreateCase) GetCloseReason() *general.Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *InputCreateCase) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *InputCreateCase) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *InputCreateCase) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

func (x *InputCreateCase) GetStatusCondition() *general.Lookup {
	if x != nil {
		return x.StatusCondition
	}
	return nil
}

func (x *InputCreateCase) GetLinks() []*InputCaseLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InputCreateCase) GetRelated() []*CreateCaseRelatedCaseInput {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *InputCreateCase) GetUserID() *general.Lookup {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *InputCreateCase) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

// Structure for close information when a case is closed.
type CreateCaseCloseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseResult string          `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // Comment or reason for closing the case.
	CloseReason *general.Lookup `protobuf:"bytes,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // Close reason ID from lookup.
}

func (x *CreateCaseCloseInput) Reset() {
	*x = CreateCaseCloseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCaseCloseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseCloseInput) ProtoMessage() {}

func (x *CreateCaseCloseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseCloseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseCloseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCaseCloseInput) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CreateCaseCloseInput) GetCloseReason() *general.Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

// Structure for related cases input when creating a case.
type CreateCaseRelatedCaseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag         string       `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`                                                                      // Etag of the related case.
	RelationType RelationType `protobuf:"varint,3,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"` // Type of relation (e.g., duplicate, linked).
	RelatedTo    string       `protobuf:"bytes,4,opt,name=related_to,json=relatedTo,proto3" json:"related_to,omitempty"`                                           // Identifier of the related case.
}

func (x *CreateCaseRelatedCaseInput) Reset() {
	*x = CreateCaseRelatedCaseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCaseRelatedCaseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRelatedCaseInput) ProtoMessage() {}

func (x *CreateCaseRelatedCaseInput) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRelatedCaseInput.ProtoReflect.Descriptor instead.
func (*CreateCaseRelatedCaseInput) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCaseRelatedCaseInput) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CreateCaseRelatedCaseInput) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *CreateCaseRelatedCaseInput) GetRelatedTo() string {
	if x != nil {
		return x.RelatedTo
	}
	return ""
}

// Request message for creating a case.
type CreateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *InputCreateCase `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`   // Input data for creating the case.
	Fields []string         `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // List of fields to include in the response.
	// Indicates whether to disable the trigger after the application execution.
	// Default is false (trigger **will** be executed).
	// Set to true to explicitly prevent the trigger from running (e.g., when called from another trigger or internal flow).
	// то
	// [WTEL-7055]
	DisableTrigger bool `protobuf:"varint,3,opt,name=disableTrigger,proto3" json:"disableTrigger,omitempty"`
}

func (x *CreateCaseRequest) Reset() {
	*x = CreateCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaseRequest) ProtoMessage() {}

func (x *CreateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCaseRequest) GetInput() *InputCreateCase {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateCaseRequest) GetDisableTrigger() bool {
	if x != nil {
		return x.DisableTrigger
	}
	return false
}

// Request message for updating an existing case.
type UpdateCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XJsonMask []string   `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"` // List of JSON fields to update.
	Fields    []string   `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                          // List of fields to include in the response.
	Input     *InputCase `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`                            // Input data with updated fields.
	// Indicates whether to disable the trigger after the application execution.
	// Default is false (trigger **will** be executed).
	// Set to true to explicitly prevent the trigger from running (e.g., when called from another trigger or internal flow).
	//
	// [WTEL-7055]
	DisableTrigger bool `protobuf:"varint,4,opt,name=disableTrigger,proto3" json:"disableTrigger,omitempty"`
}

func (x *UpdateCaseRequest) Reset() {
	*x = UpdateCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaseRequest) ProtoMessage() {}

func (x *UpdateCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateCaseRequest) GetInput() *InputCase {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UpdateCaseRequest) GetDisableTrigger() bool {
	if x != nil {
		return x.DisableTrigger
	}
	return false
}

// Request message for deleting a case.
type DeleteCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of fields to include in the deleted case response.
	Etag   string   `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`     // Unique etag identifier of the case.
}

func (x *DeleteCaseRequest) Reset() {
	*x = DeleteCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCaseRequest) ProtoMessage() {}

func (x *DeleteCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCaseRequest) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Response message containing a list of cases.
type CaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`  // Current page number.
	Next  bool    `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`  // Flag indicating if there are more pages.
	Items []*Case `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"` // List of cases.
}

func (x *CaseList) Reset() {
	*x = CaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseList) ProtoMessage() {}

func (x *CaseList) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseList.ProtoReflect.Descriptor instead.
func (*CaseList) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{10}
}

func (x *CaseList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CaseList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *CaseList) GetItems() []*Case {
	if x != nil {
		return x.Items
	}
	return nil
}

// Message representing a case.
type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // Unique case ID.
	Ver               int32                   `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`                                                         // Version number of the case.
	Etag              string                  `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`                                                        // Unique etag identifier.
	CreatedBy         *general.Lookup         `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                             // Creator of the case.
	CreatedAt         int64                   `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                            // Creation timestamp (in milliseconds since Unix epoch).
	UpdatedBy         *general.Lookup         `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`                             // Last updater of the case.
	UpdatedAt         int64                   `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                            // Last update timestamp (in milliseconds since Unix epoch).
	Name              string                  `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                                        // Name of the case (may serve as an ID in docs).
	Subject           string                  `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`                                                  // Subject of the case.
	Description       string                  `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`                                         // Detailed description of the case.
	ContactInfo       string                  `protobuf:"bytes,11,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`                      // Contact information for the case.
	PlannedReactionAt int64                   `protobuf:"varint,12,opt,name=planned_reaction_at,json=plannedReactionAt,proto3" json:"planned_reaction_at,omitempty"` // Planned reaction time (in milliseconds).
	PlannedResolveAt  int64                   `protobuf:"varint,13,opt,name=planned_resolve_at,json=plannedResolveAt,proto3" json:"planned_resolve_at,omitempty"`    // Planned resolution time (in milliseconds).
	Status            *general.Lookup         `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                   // Current status of the case.
	CloseReasonGroup  *general.Lookup         `protobuf:"bytes,15,opt,name=close_reason_group,json=closeReasonGroup,proto3" json:"close_reason_group,omitempty"`     // Close reason group, immutable once set.
	Author            *general.Lookup         `protobuf:"bytes,16,opt,name=author,proto3" json:"author,omitempty"`                                                   // Author or reporter of the case.
	Assignee          *general.Lookup         `protobuf:"bytes,17,opt,name=assignee,proto3" json:"assignee,omitempty"`                                               // Assignee responsible for resolving the case.
	Reporter          *general.Lookup         `protobuf:"bytes,18,opt,name=reporter,proto3" json:"reporter,omitempty"`                                               // Reporter of the issue (null if anonymous).
	Impacted          *general.Lookup         `protobuf:"bytes,19,opt,name=impacted,proto3" json:"impacted,omitempty"`                                               // Impacted contact (defaults to reporter if null).
	Group             *general.ExtendedLookup `protobuf:"bytes,20,opt,name=group,proto3" json:"group,omitempty"`                                                     // Group associated with the case.
	Priority          *Priority               `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`                                               // Priority level of the case.
	Source            *SourceTypeLookup       `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`                                                   // Source of the case.
	StatusCondition   *StatusCondition        `protobuf:"bytes,23,opt,name=status_condition,json=statusCondition,proto3" json:"status_condition,omitempty"`          // Status condition from status lookup.
	// Close details
	CloseReason *general.Lookup `protobuf:"bytes,25,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"`
	CloseResult string          `protobuf:"bytes,26,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"`
	// Rating details
	Rating        int64  `protobuf:"varint,27,opt,name=rating,proto3" json:"rating,omitempty"`
	RatingComment string `protobuf:"bytes,28,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"`
	// Timing details
	ResolvedAt           int64            `protobuf:"varint,29,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	ReactedAt            int64            `protobuf:"varint,30,opt,name=reacted_at,json=reactedAt,proto3" json:"reacted_at,omitempty"`
	DifferenceInReaction int64            `protobuf:"varint,31,opt,name=difference_in_reaction,json=differenceInReaction,proto3" json:"difference_in_reaction,omitempty"`
	DifferenceInResolve  int64            `protobuf:"varint,32,opt,name=difference_in_resolve,json=differenceInResolve,proto3" json:"difference_in_resolve,omitempty"`
	SlaCondition         *general.Lookup  `protobuf:"bytes,33,opt,name=sla_condition,json=slaCondition,proto3" json:"sla_condition,omitempty"` // List of SLA conditions.
	Service              *general.Lookup  `protobuf:"bytes,34,opt,name=service,proto3" json:"service,omitempty"`                               // Service associated with the case.
	Comments             *CaseCommentList `protobuf:"bytes,35,opt,name=comments,proto3" json:"comments,omitempty"`                             // List of comments on the case.
	Related              *RelatedCaseList `protobuf:"bytes,36,opt,name=related,proto3" json:"related,omitempty"`                               // List of related cases.
	Links                *CaseLinkList    `protobuf:"bytes,37,opt,name=links,proto3" json:"links,omitempty"`                                   // List of attached links.
	Files                *CaseFileList    `protobuf:"bytes,38,opt,name=files,proto3" json:"files,omitempty"`                                   // List of attached files.
	Sla                  *general.Lookup  `protobuf:"bytes,39,opt,name=sla,proto3" json:"sla,omitempty"`                                       // SLA associated with the case.
	RoleIds              []int64          `protobuf:"varint,40,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`        // System field
	Dc                   int64            `protobuf:"varint,41,opt,name=dc,proto3" json:"dc,omitempty"`                                        // System field
	// Custom data extension fields ..
	Custom *structpb.Struct `protobuf:"bytes,100,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{11}
}

func (x *Case) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Case) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Case) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Case) GetCreatedBy() *general.Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Case) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Case) GetUpdatedBy() *general.Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Case) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Case) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Case) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Case) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Case) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *Case) GetPlannedReactionAt() int64 {
	if x != nil {
		return x.PlannedReactionAt
	}
	return 0
}

func (x *Case) GetPlannedResolveAt() int64 {
	if x != nil {
		return x.PlannedResolveAt
	}
	return 0
}

func (x *Case) GetStatus() *general.Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Case) GetCloseReasonGroup() *general.Lookup {
	if x != nil {
		return x.CloseReasonGroup
	}
	return nil
}

func (x *Case) GetAuthor() *general.Lookup {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Case) GetAssignee() *general.Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Case) GetReporter() *general.Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Case) GetImpacted() *general.Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *Case) GetGroup() *general.ExtendedLookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Case) GetPriority() *Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Case) GetSource() *SourceTypeLookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Case) GetStatusCondition() *StatusCondition {
	if x != nil {
		return x.StatusCondition
	}
	return nil
}

func (x *Case) GetCloseReason() *general.Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *Case) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *Case) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Case) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

func (x *Case) GetResolvedAt() int64 {
	if x != nil {
		return x.ResolvedAt
	}
	return 0
}

func (x *Case) GetReactedAt() int64 {
	if x != nil {
		return x.ReactedAt
	}
	return 0
}

func (x *Case) GetDifferenceInReaction() int64 {
	if x != nil {
		return x.DifferenceInReaction
	}
	return 0
}

func (x *Case) GetDifferenceInResolve() int64 {
	if x != nil {
		return x.DifferenceInResolve
	}
	return 0
}

func (x *Case) GetSlaCondition() *general.Lookup {
	if x != nil {
		return x.SlaCondition
	}
	return nil
}

func (x *Case) GetService() *general.Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Case) GetComments() *CaseCommentList {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Case) GetRelated() *RelatedCaseList {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Case) GetLinks() *CaseLinkList {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Case) GetFiles() *CaseFileList {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Case) GetSla() *general.Lookup {
	if x != nil {
		return x.Sla
	}
	return nil
}

func (x *Case) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *Case) GetDc() int64 {
	if x != nil {
		return x.Dc
	}
	return 0
}

func (x *Case) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

// Message representing close information for a case.
type CloseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseResult string          `protobuf:"bytes,1,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // Result or reason for closing the case.
	CloseReason *general.Lookup `protobuf:"bytes,2,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // Lookup for the close reason.
}

func (x *CloseInfo) Reset() {
	*x = CloseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseInfo) ProtoMessage() {}

func (x *CloseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseInfo.ProtoReflect.Descriptor instead.
func (*CloseInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{12}
}

func (x *CloseInfo) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *CloseInfo) GetCloseReason() *general.Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

type SourceTypeLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type SourceType `protobuf:"varint,2,opt,name=type,proto3,enum=webitel.cases.SourceType" json:"type,omitempty"`
	Name string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SourceTypeLookup) Reset() {
	*x = SourceTypeLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTypeLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTypeLookup) ProtoMessage() {}

func (x *SourceTypeLookup) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTypeLookup.ProtoReflect.Descriptor instead.
func (*SourceTypeLookup) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{13}
}

func (x *SourceTypeLookup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SourceTypeLookup) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_TYPE_UNSPECIFIED
}

func (x *SourceTypeLookup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message representing rating information.
type RateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating        int64  `protobuf:"varint,1,opt,name=rating,proto3" json:"rating,omitempty"`                                   // Rating value.
	RatingComment string `protobuf:"bytes,2,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"` // Optional comment for the rating.
}

func (x *RateInfo) Reset() {
	*x = RateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateInfo) ProtoMessage() {}

func (x *RateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateInfo.ProtoReflect.Descriptor instead.
func (*RateInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{14}
}

func (x *RateInfo) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *RateInfo) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

// Message representing SLA timing information.
type TimingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolvedAt           int64 `protobuf:"varint,1,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`                                 // Actual resolution timestamp (in milliseconds).
	ReactedAt            int64 `protobuf:"varint,2,opt,name=reacted_at,json=reactedAt,proto3" json:"reacted_at,omitempty"`                                    // Actual reaction timestamp (in milliseconds).
	DifferenceInReaction int64 `protobuf:"varint,3,opt,name=difference_in_reaction,json=differenceInReaction,proto3" json:"difference_in_reaction,omitempty"` // Difference between actual and planned reaction time.
	DifferenceInResolve  int64 `protobuf:"varint,4,opt,name=difference_in_resolve,json=differenceInResolve,proto3" json:"difference_in_resolve,omitempty"`    // Difference between actual and planned resolution time.
}

func (x *TimingInfo) Reset() {
	*x = TimingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingInfo) ProtoMessage() {}

func (x *TimingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingInfo.ProtoReflect.Descriptor instead.
func (*TimingInfo) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{15}
}

func (x *TimingInfo) GetResolvedAt() int64 {
	if x != nil {
		return x.ResolvedAt
	}
	return 0
}

func (x *TimingInfo) GetReactedAt() int64 {
	if x != nil {
		return x.ReactedAt
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInReaction() int64 {
	if x != nil {
		return x.DifferenceInReaction
	}
	return 0
}

func (x *TimingInfo) GetDifferenceInResolve() int64 {
	if x != nil {
		return x.DifferenceInResolve
	}
	return 0
}

type InputCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag            string           `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	Subject         string           `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`                             // create: required;
	Description     string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                     // create: not required;
	ContactInfo     string           `protobuf:"bytes,4,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`  // create: not required;
	Assignee        *general.Lookup  `protobuf:"bytes,5,opt,name=assignee,proto3" json:"assignee,omitempty"`                           // create: not required, default from service or set by UI;
	Reporter        *general.Lookup  `protobuf:"bytes,6,opt,name=reporter,proto3" json:"reporter,omitempty"`                           // create: required (if empty recognize as anonymous contact);
	Impacted        *general.Lookup  `protobuf:"bytes,7,opt,name=impacted,proto3" json:"impacted,omitempty"`                           // create: required, default is reporter or ui (if empty recognize as anonymous);
	Group           *general.Lookup  `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`                                 // create: not required, default from service or set by UI;
	Status          *general.Lookup  `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                               // create: not required, default initial value from status lookup or ui;
	Priority        *general.Lookup  `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`                          // create: not required, default first value from priority lookup
	Source          *general.Lookup  `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`                              // source of the case
	Service         *general.Lookup  `protobuf:"bytes,12,opt,name=service,proto3" json:"service,omitempty"`                            // on this field base many other readonly fields on return
	CloseReason     *general.Lookup  `protobuf:"bytes,13,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"` // create: not required;
	CloseResult     string           `protobuf:"bytes,14,opt,name=close_result,json=closeResult,proto3" json:"close_result,omitempty"` // create: not required; update: required only when case status goes to the final state
	Rating          int64            `protobuf:"varint,15,opt,name=rating,proto3" json:"rating,omitempty"`
	RatingComment   string           `protobuf:"bytes,16,opt,name=rating_comment,json=ratingComment,proto3" json:"rating_comment,omitempty"`
	StatusCondition *StatusCondition `protobuf:"bytes,17,opt,name=status_condition,json=statusCondition,proto3" json:"status_condition,omitempty"`
	// Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token.
	UserID *general.Lookup `protobuf:"bytes,20,opt,name=userID,proto3" json:"userID,omitempty"`
	// Custom data extension fields ..
	Custom *structpb.Struct `protobuf:"bytes,100,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *InputCase) Reset() {
	*x = InputCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_case_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCase) ProtoMessage() {}

func (x *InputCase) ProtoReflect() protoreflect.Message {
	mi := &file_case_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCase.ProtoReflect.Descriptor instead.
func (*InputCase) Descriptor() ([]byte, []int) {
	return file_case_proto_rawDescGZIP(), []int{16}
}

func (x *InputCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputCase) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *InputCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputCase) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *InputCase) GetAssignee() *general.Lookup {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *InputCase) GetReporter() *general.Lookup {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *InputCase) GetImpacted() *general.Lookup {
	if x != nil {
		return x.Impacted
	}
	return nil
}

func (x *InputCase) GetGroup() *general.Lookup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputCase) GetStatus() *general.Lookup {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InputCase) GetPriority() *general.Lookup {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *InputCase) GetSource() *general.Lookup {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *InputCase) GetService() *general.Lookup {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *InputCase) GetCloseReason() *general.Lookup {
	if x != nil {
		return x.CloseReason
	}
	return nil
}

func (x *InputCase) GetCloseResult() string {
	if x != nil {
		return x.CloseResult
	}
	return ""
}

func (x *InputCase) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *InputCase) GetRatingComment() string {
	if x != nil {
		return x.RatingComment
	}
	return ""
}

func (x *InputCase) GetStatusCondition() *StatusCondition {
	if x != nil {
		return x.StatusCondition
	}
	return nil
}

func (x *InputCase) GetUserID() *general.Lookup {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *InputCase) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

var File_case_proto protoreflect.FileDescriptor

var file_case_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x73, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x69, 0x6e, 0x22, 0x3f, 0x0a, 0x11,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xac, 0x07,
	0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x6d, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x40,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x22,
	0x89, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x22, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x22, 0x5d, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xa7, 0x0d, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12,
	0x34, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x73, 0x6c, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x03, 0x73, 0x6c, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x63,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x64, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x62, 0x0a, 0x09, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x65, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0x91, 0x06, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x32, 0xcb,
	0x04, 0x0a, 0x05, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x32, 0x90, 0xb5, 0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x5a,
	0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x06, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5,
	0x18, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5,
	0x18, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x06, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x90, 0xb5, 0x18,
	0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x1c,
	0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x13, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x1a, 0x13, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x22, 0x19, 0x90, 0xb5, 0x18, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x1a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x42, 0x9d, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x42, 0x09, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x3b, 0x63, 0x61, 0x73, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58, 0xaa,
	0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0xca,
	0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0xe2,
	0x02, 0x19, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x57, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43, 0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_case_proto_rawDescOnce sync.Once
	file_case_proto_rawDescData = file_case_proto_rawDesc
)

func file_case_proto_rawDescGZIP() []byte {
	file_case_proto_rawDescOnce.Do(func() {
		file_case_proto_rawDescData = protoimpl.X.CompressGZIP(file_case_proto_rawDescData)
	})
	return file_case_proto_rawDescData
}

var file_case_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_case_proto_goTypes = []interface{}{
	(*FieldChange)(nil),                // 0: webitel.cases.FieldChange
	(*UpdateCaseResponse)(nil),         // 1: webitel.cases.UpdateCaseResponse
	(*SearchCasesRequest)(nil),         // 2: webitel.cases.SearchCasesRequest
	(*LocateCaseRequest)(nil),          // 3: webitel.cases.LocateCaseRequest
	(*InputCreateCase)(nil),            // 4: webitel.cases.InputCreateCase
	(*CreateCaseCloseInput)(nil),       // 5: webitel.cases.CreateCaseCloseInput
	(*CreateCaseRelatedCaseInput)(nil), // 6: webitel.cases.CreateCaseRelatedCaseInput
	(*CreateCaseRequest)(nil),          // 7: webitel.cases.CreateCaseRequest
	(*UpdateCaseRequest)(nil),          // 8: webitel.cases.UpdateCaseRequest
	(*DeleteCaseRequest)(nil),          // 9: webitel.cases.DeleteCaseRequest
	(*CaseList)(nil),                   // 10: webitel.cases.CaseList
	(*Case)(nil),                       // 11: webitel.cases.Case
	(*CloseInfo)(nil),                  // 12: webitel.cases.CloseInfo
	(*SourceTypeLookup)(nil),           // 13: webitel.cases.SourceTypeLookup
	(*RateInfo)(nil),                   // 14: webitel.cases.RateInfo
	(*TimingInfo)(nil),                 // 15: webitel.cases.TimingInfo
	(*InputCase)(nil),                  // 16: webitel.cases.InputCase
	(*structpb.Value)(nil),             // 17: google.protobuf.Value
	(*general.Lookup)(nil),             // 18: general.Lookup
	(*InputCaseLink)(nil),              // 19: webitel.cases.InputCaseLink
	(*structpb.Struct)(nil),            // 20: google.protobuf.Struct
	(RelationType)(0),                  // 21: webitel.cases.RelationType
	(*general.ExtendedLookup)(nil),     // 22: general.ExtendedLookup
	(*Priority)(nil),                   // 23: webitel.cases.Priority
	(*StatusCondition)(nil),            // 24: webitel.cases.StatusCondition
	(*CaseCommentList)(nil),            // 25: webitel.cases.CaseCommentList
	(*RelatedCaseList)(nil),            // 26: webitel.cases.RelatedCaseList
	(*CaseLinkList)(nil),               // 27: webitel.cases.CaseLinkList
	(*CaseFileList)(nil),               // 28: webitel.cases.CaseFileList
	(SourceType)(0),                    // 29: webitel.cases.SourceType
}
var file_case_proto_depIdxs = []int32{
	17, // 0: webitel.cases.FieldChange.old_value:type_name -> google.protobuf.Value
	17, // 1: webitel.cases.FieldChange.new_value:type_name -> google.protobuf.Value
	11, // 2: webitel.cases.UpdateCaseResponse.case:type_name -> webitel.cases.Case
	0,  // 3: webitel.cases.UpdateCaseResponse.changes:type_name -> webitel.cases.FieldChange
	18, // 4: webitel.cases.InputCreateCase.assignee:type_name -> general.Lookup
	18, // 5: webitel.cases.InputCreateCase.reporter:type_name -> general.Lookup
	18, // 6: webitel.cases.InputCreateCase.impacted:type_name -> general.Lookup
	18, // 7: webitel.cases.InputCreateCase.group:type_name -> general.Lookup
	18, // 8: webitel.cases.InputCreateCase.status:type_name -> general.Lookup
	18, // 9: webitel.cases.InputCreateCase.close_reason_group:type_name -> general.Lookup
	18, // 10: webitel.cases.InputCreateCase.priority:type_name -> general.Lookup
	18, // 11: webitel.cases.InputCreateCase.source:type_name -> general.Lookup
	18, // 12: webitel.cases.InputCreateCase.service:type_name -> general.Lookup
	18, // 13: webitel.cases.InputCreateCase.close_reason:type_name -> general.Lookup
	18, // 14: webitel.cases.InputCreateCase.status_condition:type_name -> general.Lookup
	19, // 15: webitel.cases.InputCreateCase.links:type_name -> webitel.cases.InputCaseLink
	6,  // 16: webitel.cases.InputCreateCase.related:type_name -> webitel.cases.CreateCaseRelatedCaseInput
	18, // 17: webitel.cases.InputCreateCase.userID:type_name -> general.Lookup
	20, // 18: webitel.cases.InputCreateCase.custom:type_name -> google.protobuf.Struct
	18, // 19: webitel.cases.CreateCaseCloseInput.close_reason:type_name -> general.Lookup
	21, // 20: webitel.cases.CreateCaseRelatedCaseInput.relation_type:type_name -> webitel.cases.RelationType
	4,  // 21: webitel.cases.CreateCaseRequest.input:type_name -> webitel.cases.InputCreateCase
	16, // 22: webitel.cases.UpdateCaseRequest.input:type_name -> webitel.cases.InputCase
	11, // 23: webitel.cases.CaseList.items:type_name -> webitel.cases.Case
	18, // 24: webitel.cases.Case.created_by:type_name -> general.Lookup
	18, // 25: webitel.cases.Case.updated_by:type_name -> general.Lookup
	18, // 26: webitel.cases.Case.status:type_name -> general.Lookup
	18, // 27: webitel.cases.Case.close_reason_group:type_name -> general.Lookup
	18, // 28: webitel.cases.Case.author:type_name -> general.Lookup
	18, // 29: webitel.cases.Case.assignee:type_name -> general.Lookup
	18, // 30: webitel.cases.Case.reporter:type_name -> general.Lookup
	18, // 31: webitel.cases.Case.impacted:type_name -> general.Lookup
	22, // 32: webitel.cases.Case.group:type_name -> general.ExtendedLookup
	23, // 33: webitel.cases.Case.priority:type_name -> webitel.cases.Priority
	13, // 34: webitel.cases.Case.source:type_name -> webitel.cases.SourceTypeLookup
	24, // 35: webitel.cases.Case.status_condition:type_name -> webitel.cases.StatusCondition
	18, // 36: webitel.cases.Case.close_reason:type_name -> general.Lookup
	18, // 37: webitel.cases.Case.sla_condition:type_name -> general.Lookup
	18, // 38: webitel.cases.Case.service:type_name -> general.Lookup
	25, // 39: webitel.cases.Case.comments:type_name -> webitel.cases.CaseCommentList
	26, // 40: webitel.cases.Case.related:type_name -> webitel.cases.RelatedCaseList
	27, // 41: webitel.cases.Case.links:type_name -> webitel.cases.CaseLinkList
	28, // 42: webitel.cases.Case.files:type_name -> webitel.cases.CaseFileList
	18, // 43: webitel.cases.Case.sla:type_name -> general.Lookup
	20, // 44: webitel.cases.Case.custom:type_name -> google.protobuf.Struct
	18, // 45: webitel.cases.CloseInfo.close_reason:type_name -> general.Lookup
	29, // 46: webitel.cases.SourceTypeLookup.type:type_name -> webitel.cases.SourceType
	18, // 47: webitel.cases.InputCase.assignee:type_name -> general.Lookup
	18, // 48: webitel.cases.InputCase.reporter:type_name -> general.Lookup
	18, // 49: webitel.cases.InputCase.impacted:type_name -> general.Lookup
	18, // 50: webitel.cases.InputCase.group:type_name -> general.Lookup
	18, // 51: webitel.cases.InputCase.status:type_name -> general.Lookup
	18, // 52: webitel.cases.InputCase.priority:type_name -> general.Lookup
	18, // 53: webitel.cases.InputCase.source:type_name -> general.Lookup
	18, // 54: webitel.cases.InputCase.service:type_name -> general.Lookup
	18, // 55: webitel.cases.InputCase.close_reason:type_name -> general.Lookup
	24, // 56: webitel.cases.InputCase.status_condition:type_name -> webitel.cases.StatusCondition
	18, // 57: webitel.cases.InputCase.userID:type_name -> general.Lookup
	20, // 58: webitel.cases.InputCase.custom:type_name -> google.protobuf.Struct
	2,  // 59: webitel.cases.Cases.SearchCases:input_type -> webitel.cases.SearchCasesRequest
	3,  // 60: webitel.cases.Cases.LocateCase:input_type -> webitel.cases.LocateCaseRequest
	7,  // 61: webitel.cases.Cases.CreateCase:input_type -> webitel.cases.CreateCaseRequest
	8,  // 62: webitel.cases.Cases.UpdateCase:input_type -> webitel.cases.UpdateCaseRequest
	9,  // 63: webitel.cases.Cases.DeleteCase:input_type -> webitel.cases.DeleteCaseRequest
	10, // 64: webitel.cases.Cases.SearchCases:output_type -> webitel.cases.CaseList
	11, // 65: webitel.cases.Cases.LocateCase:output_type -> webitel.cases.Case
	11, // 66: webitel.cases.Cases.CreateCase:output_type -> webitel.cases.Case
	1,  // 67: webitel.cases.Cases.UpdateCase:output_type -> webitel.cases.UpdateCaseResponse
	11, // 68: webitel.cases.Cases.DeleteCase:output_type -> webitel.cases.Case
	64, // [64:69] is the sub-list for method output_type
	59, // [59:64] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_case_proto_init() }
func file_case_proto_init() {
	if File_case_proto != nil {
		return
	}
	file_service_proto_init()
	file_case_comment_proto_init()
	file_related_case_proto_init()
	file_case_file_proto_init()
	file_case_link_proto_init()
	file_priority_proto_init()
	file_status_condition_proto_init()
	file_source_proto_init()
	file_sla_condition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_case_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputCreateCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCaseCloseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCaseRelatedCaseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTypeLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_case_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_case_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_case_proto_goTypes,
		DependencyIndexes: file_case_proto_depIdxs,
		MessageInfos:      file_case_proto_msgTypes,
	}.Build()
	File_case_proto = out.File
	file_case_proto_rawDesc = nil
	file_case_proto_goTypes = nil
	file_case_proto_depIdxs = nil
}
