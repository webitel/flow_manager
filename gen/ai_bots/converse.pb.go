// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: converse.proto

package ai_bots

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config встановлює початкові параметри для нової розмови.
// Це повідомлення має бути надіслане першим у потоці.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`                                                                       // Опціональний ID для продовження існуючої розмови.
	DialogId       string            `protobuf:"bytes,2,opt,name=dialog_id,json=dialogId,proto3" json:"dialog_id,omitempty"`                                                                                         // id діалога
	UserData       map[string]string `protobuf:"bytes,3,rep,name=user_data,json=userData,proto3" json:"user_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Додаткові дані для сесії (наприклад, user_id, language).
	Rate           string            `protobuf:"bytes,4,opt,name=rate,proto3" json:"rate,omitempty"`                                                                                                                 // Частота дискретизації аудіо (наприклад, "8000", "16000").
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Config) GetDialogId() string {
	if x != nil {
		return x.DialogId
	}
	return ""
}

func (x *Config) GetUserData() map[string]string {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *Config) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

// Input містить дані, що надсилаються від клієнта під час розмови.
type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Input_AudioData
	//	*Input_TextData
	Data isInput_Data `protobuf_oneof:"data"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{1}
}

func (m *Input) GetData() isInput_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Input) GetAudioData() []byte {
	if x, ok := x.GetData().(*Input_AudioData); ok {
		return x.AudioData
	}
	return nil
}

func (x *Input) GetTextData() string {
	if x, ok := x.GetData().(*Input_TextData); ok {
		return x.TextData
	}
	return ""
}

type isInput_Data interface {
	isInput_Data()
}

type Input_AudioData struct {
	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3,oneof"` // Фрагмент аудіопотоку.
}

type Input_TextData struct {
	TextData string `protobuf:"bytes,2,opt,name=text_data,json=textData,proto3,oneof"` // Текстове повідомлення від користувача.
}

func (*Input_AudioData) isInput_Data() {}

func (*Input_TextData) isInput_Data() {}

// ConverseRequest - це обгортка для всіх повідомлень, що йдуть від клієнта до сервера.
type ConverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*ConverseRequest_Config
	//	*ConverseRequest_Input
	RequestType isConverseRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *ConverseRequest) Reset() {
	*x = ConverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverseRequest) ProtoMessage() {}

func (x *ConverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverseRequest.ProtoReflect.Descriptor instead.
func (*ConverseRequest) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{2}
}

func (m *ConverseRequest) GetRequestType() isConverseRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *ConverseRequest) GetConfig() *Config {
	if x, ok := x.GetRequestType().(*ConverseRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *ConverseRequest) GetInput() *Input {
	if x, ok := x.GetRequestType().(*ConverseRequest_Input); ok {
		return x.Input
	}
	return nil
}

type isConverseRequest_RequestType interface {
	isConverseRequest_RequestType()
}

type ConverseRequest_Config struct {
	Config *Config `protobuf:"bytes,1,opt,name=config,proto3,oneof"` // Для ініціалізації розмови.
}

type ConverseRequest_Input struct {
	Input *Input `protobuf:"bytes,2,opt,name=input,proto3,oneof"` // Для надсилання даних під час розмови.
}

func (*ConverseRequest_Config) isConverseRequest_RequestType() {}

func (*ConverseRequest_Input) isConverseRequest_RequestType() {}

type RecognizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*RecognizeRequest_Config
	//	*RecognizeRequest_Input
	RequestType isRecognizeRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *RecognizeRequest) Reset() {
	*x = RecognizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognizeRequest) ProtoMessage() {}

func (x *RecognizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognizeRequest.ProtoReflect.Descriptor instead.
func (*RecognizeRequest) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{3}
}

func (m *RecognizeRequest) GetRequestType() isRecognizeRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *RecognizeRequest) GetConfig() *Config {
	if x, ok := x.GetRequestType().(*RecognizeRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *RecognizeRequest) GetInput() *Input {
	if x, ok := x.GetRequestType().(*RecognizeRequest_Input); ok {
		return x.Input
	}
	return nil
}

type isRecognizeRequest_RequestType interface {
	isRecognizeRequest_RequestType()
}

type RecognizeRequest_Config struct {
	Config *Config `protobuf:"bytes,1,opt,name=config,proto3,oneof"` // Для ініціалізації розмови.
}

type RecognizeRequest_Input struct {
	Input *Input `protobuf:"bytes,2,opt,name=input,proto3,oneof"` // Для надсилання даних під час розмови.
}

func (*RecognizeRequest_Config) isRecognizeRequest_RequestType() {}

func (*RecognizeRequest_Input) isRecognizeRequest_RequestType() {}

type RecognizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinal     bool              `protobuf:"varint,1,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	Interrupted bool              `protobuf:"varint,2,opt,name=interrupted,proto3" json:"interrupted,omitempty"`
	Variables   map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecognizeResponse) Reset() {
	*x = RecognizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognizeResponse) ProtoMessage() {}

func (x *RecognizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognizeResponse.ProtoReflect.Descriptor instead.
func (*RecognizeResponse) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{4}
}

func (x *RecognizeResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *RecognizeResponse) GetInterrupted() bool {
	if x != nil {
		return x.Interrupted
	}
	return false
}

func (x *RecognizeResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

// ConverseResponse - це повідомлення, що йде від сервера до клієнта.
type ConverseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId  string            `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`                                                         // ID поточної розмови.
	AudioData       []byte            `protobuf:"bytes,2,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`                                                                        // Синтезована голосова відповідь бота.
	TextData        string            `protobuf:"bytes,6,opt,name=text_data,json=textData,proto3" json:"text_data,omitempty"`                                                                           // Текстова версія відповіді бота (для логування або субтитрів).
	StopTalk        bool              `protobuf:"varint,3,opt,name=stop_talk,json=stopTalk,proto3" json:"stop_talk,omitempty"`                                                                          // Прапорець, що вимагає від клієнта припинити відтворення аудіо (наприклад, якщо користувач перебив бота).
	EndConversation bool              `protobuf:"varint,4,opt,name=end_conversation,json=endConversation,proto3" json:"end_conversation,omitempty"`                                                     // Прапорець, що сигналізує про завершення розмови.
	Variables       map[string]string `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Змінні, які бот повертає (наприклад, результат виконання функції).
}

func (x *ConverseResponse) Reset() {
	*x = ConverseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverseResponse) ProtoMessage() {}

func (x *ConverseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_converse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverseResponse.ProtoReflect.Descriptor instead.
func (*ConverseResponse) Descriptor() ([]byte, []int) {
	return file_converse_proto_rawDescGZIP(), []int{5}
}

func (x *ConverseResponse) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConverseResponse) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *ConverseResponse) GetTextData() string {
	if x != nil {
		return x.TextData
	}
	return ""
}

func (x *ConverseResponse) GetStopTalk() bool {
	if x != nil {
		return x.StopTalk
	}
	return false
}

func (x *ConverseResponse) GetEndConversation() bool {
	if x != nil {
		return x.EndConversation
	}
	return false
}

func (x *ConverseResponse) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

var File_converse_proto protoreflect.FileDescriptor

var file_converse_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x69,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x75,
	0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc5, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x9e, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x46, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x2e,
	0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x3b, 0x61, 0x69,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_converse_proto_rawDescOnce sync.Once
	file_converse_proto_rawDescData = file_converse_proto_rawDesc
)

func file_converse_proto_rawDescGZIP() []byte {
	file_converse_proto_rawDescOnce.Do(func() {
		file_converse_proto_rawDescData = protoimpl.X.CompressGZIP(file_converse_proto_rawDescData)
	})
	return file_converse_proto_rawDescData
}

var file_converse_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_converse_proto_goTypes = []interface{}{
	(*Config)(nil),            // 0: ai_bots.Config
	(*Input)(nil),             // 1: ai_bots.Input
	(*ConverseRequest)(nil),   // 2: ai_bots.ConverseRequest
	(*RecognizeRequest)(nil),  // 3: ai_bots.RecognizeRequest
	(*RecognizeResponse)(nil), // 4: ai_bots.RecognizeResponse
	(*ConverseResponse)(nil),  // 5: ai_bots.ConverseResponse
	nil,                       // 6: ai_bots.Config.UserDataEntry
	nil,                       // 7: ai_bots.RecognizeResponse.VariablesEntry
	nil,                       // 8: ai_bots.ConverseResponse.VariablesEntry
}
var file_converse_proto_depIdxs = []int32{
	6, // 0: ai_bots.Config.user_data:type_name -> ai_bots.Config.UserDataEntry
	0, // 1: ai_bots.ConverseRequest.config:type_name -> ai_bots.Config
	1, // 2: ai_bots.ConverseRequest.input:type_name -> ai_bots.Input
	0, // 3: ai_bots.RecognizeRequest.config:type_name -> ai_bots.Config
	1, // 4: ai_bots.RecognizeRequest.input:type_name -> ai_bots.Input
	7, // 5: ai_bots.RecognizeResponse.variables:type_name -> ai_bots.RecognizeResponse.VariablesEntry
	8, // 6: ai_bots.ConverseResponse.variables:type_name -> ai_bots.ConverseResponse.VariablesEntry
	2, // 7: ai_bots.ConverseService.Converse:input_type -> ai_bots.ConverseRequest
	3, // 8: ai_bots.ConverseService.Recognize:input_type -> ai_bots.RecognizeRequest
	5, // 9: ai_bots.ConverseService.Converse:output_type -> ai_bots.ConverseResponse
	4, // 10: ai_bots.ConverseService.Recognize:output_type -> ai_bots.RecognizeResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_converse_proto_init() }
func file_converse_proto_init() {
	if File_converse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_converse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_converse_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Input_AudioData)(nil),
		(*Input_TextData)(nil),
	}
	file_converse_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ConverseRequest_Config)(nil),
		(*ConverseRequest_Input)(nil),
	}
	file_converse_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RecognizeRequest_Config)(nil),
		(*RecognizeRequest_Input)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_converse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_converse_proto_goTypes,
		DependencyIndexes: file_converse_proto_depIdxs,
		MessageInfos:      file_converse_proto_msgTypes,
	}.Build()
	File_converse_proto = out.File
	file_converse_proto_rawDesc = nil
	file_converse_proto_goTypes = nil
	file_converse_proto_depIdxs = nil
}
