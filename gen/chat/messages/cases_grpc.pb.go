// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: messages/cases.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CasesChatCatalog_GetCaseChatHistory_FullMethodName = "/webitel.chat.CasesChatCatalog/GetCaseChatHistory"
)

// CasesChatCatalogClient is the client API for CasesChatCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasesChatCatalogClient interface {
	GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, opts ...grpc.CallOption) (*ChatMessages, error)
}

type casesChatCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCasesChatCatalogClient(cc grpc.ClientConnInterface) CasesChatCatalogClient {
	return &casesChatCatalogClient{cc}
}

func (c *casesChatCatalogClient) GetCaseChatHistory(ctx context.Context, in *GetCaseChatHistoryRequest, opts ...grpc.CallOption) (*ChatMessages, error) {
	out := new(ChatMessages)
	err := c.cc.Invoke(ctx, CasesChatCatalog_GetCaseChatHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasesChatCatalogServer is the server API for CasesChatCatalog service.
// All implementations must embed UnimplementedCasesChatCatalogServer
// for forward compatibility
type CasesChatCatalogServer interface {
	GetCaseChatHistory(context.Context, *GetCaseChatHistoryRequest) (*ChatMessages, error)
	mustEmbedUnimplementedCasesChatCatalogServer()
}

// UnimplementedCasesChatCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCasesChatCatalogServer struct {
}

func (UnimplementedCasesChatCatalogServer) GetCaseChatHistory(context.Context, *GetCaseChatHistoryRequest) (*ChatMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaseChatHistory not implemented")
}
func (UnimplementedCasesChatCatalogServer) mustEmbedUnimplementedCasesChatCatalogServer() {}

// UnsafeCasesChatCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasesChatCatalogServer will
// result in compilation errors.
type UnsafeCasesChatCatalogServer interface {
	mustEmbedUnimplementedCasesChatCatalogServer()
}

func RegisterCasesChatCatalogServer(s grpc.ServiceRegistrar, srv CasesChatCatalogServer) {
	s.RegisterService(&CasesChatCatalog_ServiceDesc, srv)
}

func _CasesChatCatalog_GetCaseChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasesChatCatalogServer).GetCaseChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasesChatCatalog_GetCaseChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasesChatCatalogServer).GetCaseChatHistory(ctx, req.(*GetCaseChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasesChatCatalog_ServiceDesc is the grpc.ServiceDesc for CasesChatCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasesChatCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.CasesChatCatalog",
	HandlerType: (*CasesChatCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaseChatHistory",
			Handler:    _CasesChatCatalog_GetCaseChatHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/cases.proto",
}
