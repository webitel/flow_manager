// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sla_condition.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SLAConditions_ListSLAConditions_FullMethodName  = "/webitel.cases.SLAConditions/ListSLAConditions"
	SLAConditions_CreateSLACondition_FullMethodName = "/webitel.cases.SLAConditions/CreateSLACondition"
	SLAConditions_UpdateSLACondition_FullMethodName = "/webitel.cases.SLAConditions/UpdateSLACondition"
	SLAConditions_DeleteSLACondition_FullMethodName = "/webitel.cases.SLAConditions/DeleteSLACondition"
	SLAConditions_LocateSLACondition_FullMethodName = "/webitel.cases.SLAConditions/LocateSLACondition"
)

// SLAConditionsClient is the client API for SLAConditions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLAConditionsClient interface {
	// RPC method to list or search SLAConditions
	ListSLAConditions(ctx context.Context, in *ListSLAConditionRequest, opts ...grpc.CallOption) (*SLAConditionList, error)
	// RPC method to create a new SLACondition
	CreateSLACondition(ctx context.Context, in *CreateSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error)
	// RPC method to update an existing SLACondition
	UpdateSLACondition(ctx context.Context, in *UpdateSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error)
	// RPC method to delete an existing SLACondition
	DeleteSLACondition(ctx context.Context, in *DeleteSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error)
	// RPC method to locate a specific SLACondition by ID
	LocateSLACondition(ctx context.Context, in *LocateSLAConditionRequest, opts ...grpc.CallOption) (*LocateSLAConditionResponse, error)
}

type sLAConditionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSLAConditionsClient(cc grpc.ClientConnInterface) SLAConditionsClient {
	return &sLAConditionsClient{cc}
}

func (c *sLAConditionsClient) ListSLAConditions(ctx context.Context, in *ListSLAConditionRequest, opts ...grpc.CallOption) (*SLAConditionList, error) {
	out := new(SLAConditionList)
	err := c.cc.Invoke(ctx, SLAConditions_ListSLAConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAConditionsClient) CreateSLACondition(ctx context.Context, in *CreateSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error) {
	out := new(SLACondition)
	err := c.cc.Invoke(ctx, SLAConditions_CreateSLACondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAConditionsClient) UpdateSLACondition(ctx context.Context, in *UpdateSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error) {
	out := new(SLACondition)
	err := c.cc.Invoke(ctx, SLAConditions_UpdateSLACondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAConditionsClient) DeleteSLACondition(ctx context.Context, in *DeleteSLAConditionRequest, opts ...grpc.CallOption) (*SLACondition, error) {
	out := new(SLACondition)
	err := c.cc.Invoke(ctx, SLAConditions_DeleteSLACondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLAConditionsClient) LocateSLACondition(ctx context.Context, in *LocateSLAConditionRequest, opts ...grpc.CallOption) (*LocateSLAConditionResponse, error) {
	out := new(LocateSLAConditionResponse)
	err := c.cc.Invoke(ctx, SLAConditions_LocateSLACondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLAConditionsServer is the server API for SLAConditions service.
// All implementations must embed UnimplementedSLAConditionsServer
// for forward compatibility
type SLAConditionsServer interface {
	// RPC method to list or search SLAConditions
	ListSLAConditions(context.Context, *ListSLAConditionRequest) (*SLAConditionList, error)
	// RPC method to create a new SLACondition
	CreateSLACondition(context.Context, *CreateSLAConditionRequest) (*SLACondition, error)
	// RPC method to update an existing SLACondition
	UpdateSLACondition(context.Context, *UpdateSLAConditionRequest) (*SLACondition, error)
	// RPC method to delete an existing SLACondition
	DeleteSLACondition(context.Context, *DeleteSLAConditionRequest) (*SLACondition, error)
	// RPC method to locate a specific SLACondition by ID
	LocateSLACondition(context.Context, *LocateSLAConditionRequest) (*LocateSLAConditionResponse, error)
	mustEmbedUnimplementedSLAConditionsServer()
}

// UnimplementedSLAConditionsServer must be embedded to have forward compatible implementations.
type UnimplementedSLAConditionsServer struct {
}

func (UnimplementedSLAConditionsServer) ListSLAConditions(context.Context, *ListSLAConditionRequest) (*SLAConditionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLAConditions not implemented")
}
func (UnimplementedSLAConditionsServer) CreateSLACondition(context.Context, *CreateSLAConditionRequest) (*SLACondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLACondition not implemented")
}
func (UnimplementedSLAConditionsServer) UpdateSLACondition(context.Context, *UpdateSLAConditionRequest) (*SLACondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLACondition not implemented")
}
func (UnimplementedSLAConditionsServer) DeleteSLACondition(context.Context, *DeleteSLAConditionRequest) (*SLACondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLACondition not implemented")
}
func (UnimplementedSLAConditionsServer) LocateSLACondition(context.Context, *LocateSLAConditionRequest) (*LocateSLAConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateSLACondition not implemented")
}
func (UnimplementedSLAConditionsServer) mustEmbedUnimplementedSLAConditionsServer() {}

// UnsafeSLAConditionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLAConditionsServer will
// result in compilation errors.
type UnsafeSLAConditionsServer interface {
	mustEmbedUnimplementedSLAConditionsServer()
}

func RegisterSLAConditionsServer(s grpc.ServiceRegistrar, srv SLAConditionsServer) {
	s.RegisterService(&SLAConditions_ServiceDesc, srv)
}

func _SLAConditions_ListSLAConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSLAConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAConditionsServer).ListSLAConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SLAConditions_ListSLAConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAConditionsServer).ListSLAConditions(ctx, req.(*ListSLAConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAConditions_CreateSLACondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSLAConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAConditionsServer).CreateSLACondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SLAConditions_CreateSLACondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAConditionsServer).CreateSLACondition(ctx, req.(*CreateSLAConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAConditions_UpdateSLACondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSLAConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAConditionsServer).UpdateSLACondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SLAConditions_UpdateSLACondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAConditionsServer).UpdateSLACondition(ctx, req.(*UpdateSLAConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAConditions_DeleteSLACondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSLAConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAConditionsServer).DeleteSLACondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SLAConditions_DeleteSLACondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAConditionsServer).DeleteSLACondition(ctx, req.(*DeleteSLAConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLAConditions_LocateSLACondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateSLAConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAConditionsServer).LocateSLACondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SLAConditions_LocateSLACondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAConditionsServer).LocateSLACondition(ctx, req.(*LocateSLAConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SLAConditions_ServiceDesc is the grpc.ServiceDesc for SLAConditions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLAConditions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.SLAConditions",
	HandlerType: (*SLAConditionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSLAConditions",
			Handler:    _SLAConditions_ListSLAConditions_Handler,
		},
		{
			MethodName: "CreateSLACondition",
			Handler:    _SLAConditions_CreateSLACondition_Handler,
		},
		{
			MethodName: "UpdateSLACondition",
			Handler:    _SLAConditions_UpdateSLACondition_Handler,
		},
		{
			MethodName: "DeleteSLACondition",
			Handler:    _SLAConditions_DeleteSLACondition_Handler,
		},
		{
			MethodName: "LocateSLACondition",
			Handler:    _SLAConditions_LocateSLACondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sla_condition.proto",
}
