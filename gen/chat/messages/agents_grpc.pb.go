// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: messages/agents.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentChatService_GetAgentChats_FullMethodName     = "/webitel.chat.AgentChatService/GetAgentChats"
	AgentChatService_MarkChatProcessed_FullMethodName = "/webitel.chat.AgentChatService/MarkChatProcessed"
)

// AgentChatServiceClient is the client API for AgentChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentChatServiceClient interface {
	GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, opts ...grpc.CallOption) (*GetAgentChatsResponse, error)
	MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, opts ...grpc.CallOption) (*MarkChatProcessedResponse, error)
}

type agentChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentChatServiceClient(cc grpc.ClientConnInterface) AgentChatServiceClient {
	return &agentChatServiceClient{cc}
}

func (c *agentChatServiceClient) GetAgentChats(ctx context.Context, in *GetAgentChatsRequest, opts ...grpc.CallOption) (*GetAgentChatsResponse, error) {
	out := new(GetAgentChatsResponse)
	err := c.cc.Invoke(ctx, AgentChatService_GetAgentChats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentChatServiceClient) MarkChatProcessed(ctx context.Context, in *MarkChatProcessedRequest, opts ...grpc.CallOption) (*MarkChatProcessedResponse, error) {
	out := new(MarkChatProcessedResponse)
	err := c.cc.Invoke(ctx, AgentChatService_MarkChatProcessed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentChatServiceServer is the server API for AgentChatService service.
// All implementations must embed UnimplementedAgentChatServiceServer
// for forward compatibility
type AgentChatServiceServer interface {
	GetAgentChats(context.Context, *GetAgentChatsRequest) (*GetAgentChatsResponse, error)
	MarkChatProcessed(context.Context, *MarkChatProcessedRequest) (*MarkChatProcessedResponse, error)
	mustEmbedUnimplementedAgentChatServiceServer()
}

// UnimplementedAgentChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentChatServiceServer struct {
}

func (UnimplementedAgentChatServiceServer) GetAgentChats(context.Context, *GetAgentChatsRequest) (*GetAgentChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentChats not implemented")
}
func (UnimplementedAgentChatServiceServer) MarkChatProcessed(context.Context, *MarkChatProcessedRequest) (*MarkChatProcessedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkChatProcessed not implemented")
}
func (UnimplementedAgentChatServiceServer) mustEmbedUnimplementedAgentChatServiceServer() {}

// UnsafeAgentChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentChatServiceServer will
// result in compilation errors.
type UnsafeAgentChatServiceServer interface {
	mustEmbedUnimplementedAgentChatServiceServer()
}

func RegisterAgentChatServiceServer(s grpc.ServiceRegistrar, srv AgentChatServiceServer) {
	s.RegisterService(&AgentChatService_ServiceDesc, srv)
}

func _AgentChatService_GetAgentChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentChatServiceServer).GetAgentChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentChatService_GetAgentChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentChatServiceServer).GetAgentChats(ctx, req.(*GetAgentChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentChatService_MarkChatProcessed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkChatProcessedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentChatServiceServer).MarkChatProcessed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentChatService_MarkChatProcessed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentChatServiceServer).MarkChatProcessed(ctx, req.(*MarkChatProcessedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentChatService_ServiceDesc is the grpc.ServiceDesc for AgentChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.AgentChatService",
	HandlerType: (*AgentChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentChats",
			Handler:    _AgentChatService_GetAgentChats_Handler,
		},
		{
			MethodName: "MarkChatProcessed",
			Handler:    _AgentChatService_MarkChatProcessed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/agents.proto",
}
