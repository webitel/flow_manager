// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/emails.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Emails_ListEmails_FullMethodName   = "/webitel.contacts.Emails/ListEmails"
	Emails_MergeEmails_FullMethodName  = "/webitel.contacts.Emails/MergeEmails"
	Emails_ResetEmails_FullMethodName  = "/webitel.contacts.Emails/ResetEmails"
	Emails_DeleteEmails_FullMethodName = "/webitel.contacts.Emails/DeleteEmails"
	Emails_LocateEmail_FullMethodName  = "/webitel.contacts.Emails/LocateEmail"
	Emails_UpdateEmail_FullMethodName  = "/webitel.contacts.Emails/UpdateEmail"
	Emails_DeleteEmail_FullMethodName  = "/webitel.contacts.Emails/DeleteEmail"
)

// EmailsClient is the client API for Emails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Contact email adresses service catalog.
type EmailsClient interface {
	// Locates email address(es) of the contact.
	ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*EmailList, error)
	// Update or append email address(es) of the contact.
	MergeEmails(ctx context.Context, in *MergeEmailsRequest, opts ...grpc.CallOption) (*EmailList, error)
	// Resets all emails of the contact according to the input dataset.
	ResetEmails(ctx context.Context, in *ResetEmailsRequest, opts ...grpc.CallOption) (*EmailList, error)
	// Remove email address(es) of the contact.
	DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, opts ...grpc.CallOption) (*EmailList, error)
	// Locate the email address link.
	LocateEmail(ctx context.Context, in *LocateEmailRequest, opts ...grpc.CallOption) (*EmailAddress, error)
	// Update the contact's email address link details
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailList, error)
	// Remove the contact's email address link
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailAddress, error)
}

type emailsClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailsClient(cc grpc.ClientConnInterface) EmailsClient {
	return &emailsClient{cc}
}

func (c *emailsClient) ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*EmailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailList)
	err := c.cc.Invoke(ctx, Emails_ListEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) MergeEmails(ctx context.Context, in *MergeEmailsRequest, opts ...grpc.CallOption) (*EmailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailList)
	err := c.cc.Invoke(ctx, Emails_MergeEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) ResetEmails(ctx context.Context, in *ResetEmailsRequest, opts ...grpc.CallOption) (*EmailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailList)
	err := c.cc.Invoke(ctx, Emails_ResetEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, opts ...grpc.CallOption) (*EmailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailList)
	err := c.cc.Invoke(ctx, Emails_DeleteEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) LocateEmail(ctx context.Context, in *LocateEmailRequest, opts ...grpc.CallOption) (*EmailAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailAddress)
	err := c.cc.Invoke(ctx, Emails_LocateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*EmailList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailList)
	err := c.cc.Invoke(ctx, Emails_UpdateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*EmailAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailAddress)
	err := c.cc.Invoke(ctx, Emails_DeleteEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailsServer is the server API for Emails service.
// All implementations must embed UnimplementedEmailsServer
// for forward compatibility.
//
// Contact email adresses service catalog.
type EmailsServer interface {
	// Locates email address(es) of the contact.
	ListEmails(context.Context, *ListEmailsRequest) (*EmailList, error)
	// Update or append email address(es) of the contact.
	MergeEmails(context.Context, *MergeEmailsRequest) (*EmailList, error)
	// Resets all emails of the contact according to the input dataset.
	ResetEmails(context.Context, *ResetEmailsRequest) (*EmailList, error)
	// Remove email address(es) of the contact.
	DeleteEmails(context.Context, *DeleteEmailsRequest) (*EmailList, error)
	// Locate the email address link.
	LocateEmail(context.Context, *LocateEmailRequest) (*EmailAddress, error)
	// Update the contact's email address link details
	UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailList, error)
	// Remove the contact's email address link
	DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailAddress, error)
	mustEmbedUnimplementedEmailsServer()
}

// UnimplementedEmailsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailsServer struct{}

func (UnimplementedEmailsServer) ListEmails(context.Context, *ListEmailsRequest) (*EmailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmails not implemented")
}
func (UnimplementedEmailsServer) MergeEmails(context.Context, *MergeEmailsRequest) (*EmailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeEmails not implemented")
}
func (UnimplementedEmailsServer) ResetEmails(context.Context, *ResetEmailsRequest) (*EmailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEmails not implemented")
}
func (UnimplementedEmailsServer) DeleteEmails(context.Context, *DeleteEmailsRequest) (*EmailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmails not implemented")
}
func (UnimplementedEmailsServer) LocateEmail(context.Context, *LocateEmailRequest) (*EmailAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateEmail not implemented")
}
func (UnimplementedEmailsServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*EmailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedEmailsServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*EmailAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedEmailsServer) mustEmbedUnimplementedEmailsServer() {}
func (UnimplementedEmailsServer) testEmbeddedByValue()                {}

// UnsafeEmailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailsServer will
// result in compilation errors.
type UnsafeEmailsServer interface {
	mustEmbedUnimplementedEmailsServer()
}

func RegisterEmailsServer(s grpc.ServiceRegistrar, srv EmailsServer) {
	// If the following call pancis, it indicates UnimplementedEmailsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Emails_ServiceDesc, srv)
}

func _Emails_ListEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).ListEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_ListEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).ListEmails(ctx, req.(*ListEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_MergeEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).MergeEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_MergeEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).MergeEmails(ctx, req.(*MergeEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_ResetEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).ResetEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_ResetEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).ResetEmails(ctx, req.(*ResetEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_DeleteEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).DeleteEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_DeleteEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).DeleteEmails(ctx, req.(*DeleteEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_LocateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).LocateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_LocateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).LocateEmail(ctx, req.(*LocateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Emails_DeleteEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Emails_ServiceDesc is the grpc.ServiceDesc for Emails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Emails",
	HandlerType: (*EmailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEmails",
			Handler:    _Emails_ListEmails_Handler,
		},
		{
			MethodName: "MergeEmails",
			Handler:    _Emails_MergeEmails_Handler,
		},
		{
			MethodName: "ResetEmails",
			Handler:    _Emails_ResetEmails_Handler,
		},
		{
			MethodName: "DeleteEmails",
			Handler:    _Emails_DeleteEmails_Handler,
		},
		{
			MethodName: "LocateEmail",
			Handler:    _Emails_LocateEmail_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Emails_UpdateEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _Emails_DeleteEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/emails.proto",
}
