// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/dynamic_group.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DynamicGroups_ListDynamicGroups_FullMethodName  = "/webitel.contacts.DynamicGroups/ListDynamicGroups"
	DynamicGroups_CreateDynamicGroup_FullMethodName = "/webitel.contacts.DynamicGroups/CreateDynamicGroup"
	DynamicGroups_UpdateDynamicGroup_FullMethodName = "/webitel.contacts.DynamicGroups/UpdateDynamicGroup"
	DynamicGroups_DeleteDynamicGroup_FullMethodName = "/webitel.contacts.DynamicGroups/DeleteDynamicGroup"
	DynamicGroups_LocateDynamicGroup_FullMethodName = "/webitel.contacts.DynamicGroups/LocateDynamicGroup"
)

// DynamicGroupsClient is the client API for DynamicGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing dynamic groups.
type DynamicGroupsClient interface {
	// Retrieve a list of dynamic groups or search dynamic groups.
	ListDynamicGroups(ctx context.Context, in *ListDynamicGroupsRequest, opts ...grpc.CallOption) (*DynamicGroupList, error)
	// Create a new dynamic group.
	CreateDynamicGroup(ctx context.Context, in *CreateDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error)
	// Update an existing dynamic group.
	UpdateDynamicGroup(ctx context.Context, in *UpdateDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error)
	// Delete a dynamic group.
	DeleteDynamicGroup(ctx context.Context, in *DeleteDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error)
	// Locate a dynamic group by ID.
	LocateDynamicGroup(ctx context.Context, in *LocateDynamicGroupRequest, opts ...grpc.CallOption) (*LocateDynamicGroupResponse, error)
}

type dynamicGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicGroupsClient(cc grpc.ClientConnInterface) DynamicGroupsClient {
	return &dynamicGroupsClient{cc}
}

func (c *dynamicGroupsClient) ListDynamicGroups(ctx context.Context, in *ListDynamicGroupsRequest, opts ...grpc.CallOption) (*DynamicGroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicGroupList)
	err := c.cc.Invoke(ctx, DynamicGroups_ListDynamicGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicGroupsClient) CreateDynamicGroup(ctx context.Context, in *CreateDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicGroup)
	err := c.cc.Invoke(ctx, DynamicGroups_CreateDynamicGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicGroupsClient) UpdateDynamicGroup(ctx context.Context, in *UpdateDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicGroup)
	err := c.cc.Invoke(ctx, DynamicGroups_UpdateDynamicGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicGroupsClient) DeleteDynamicGroup(ctx context.Context, in *DeleteDynamicGroupRequest, opts ...grpc.CallOption) (*DynamicGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DynamicGroup)
	err := c.cc.Invoke(ctx, DynamicGroups_DeleteDynamicGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicGroupsClient) LocateDynamicGroup(ctx context.Context, in *LocateDynamicGroupRequest, opts ...grpc.CallOption) (*LocateDynamicGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocateDynamicGroupResponse)
	err := c.cc.Invoke(ctx, DynamicGroups_LocateDynamicGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicGroupsServer is the server API for DynamicGroups service.
// All implementations must embed UnimplementedDynamicGroupsServer
// for forward compatibility.
//
// Service for managing dynamic groups.
type DynamicGroupsServer interface {
	// Retrieve a list of dynamic groups or search dynamic groups.
	ListDynamicGroups(context.Context, *ListDynamicGroupsRequest) (*DynamicGroupList, error)
	// Create a new dynamic group.
	CreateDynamicGroup(context.Context, *CreateDynamicGroupRequest) (*DynamicGroup, error)
	// Update an existing dynamic group.
	UpdateDynamicGroup(context.Context, *UpdateDynamicGroupRequest) (*DynamicGroup, error)
	// Delete a dynamic group.
	DeleteDynamicGroup(context.Context, *DeleteDynamicGroupRequest) (*DynamicGroup, error)
	// Locate a dynamic group by ID.
	LocateDynamicGroup(context.Context, *LocateDynamicGroupRequest) (*LocateDynamicGroupResponse, error)
	mustEmbedUnimplementedDynamicGroupsServer()
}

// UnimplementedDynamicGroupsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicGroupsServer struct{}

func (UnimplementedDynamicGroupsServer) ListDynamicGroups(context.Context, *ListDynamicGroupsRequest) (*DynamicGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDynamicGroups not implemented")
}
func (UnimplementedDynamicGroupsServer) CreateDynamicGroup(context.Context, *CreateDynamicGroupRequest) (*DynamicGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDynamicGroup not implemented")
}
func (UnimplementedDynamicGroupsServer) UpdateDynamicGroup(context.Context, *UpdateDynamicGroupRequest) (*DynamicGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamicGroup not implemented")
}
func (UnimplementedDynamicGroupsServer) DeleteDynamicGroup(context.Context, *DeleteDynamicGroupRequest) (*DynamicGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDynamicGroup not implemented")
}
func (UnimplementedDynamicGroupsServer) LocateDynamicGroup(context.Context, *LocateDynamicGroupRequest) (*LocateDynamicGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateDynamicGroup not implemented")
}
func (UnimplementedDynamicGroupsServer) mustEmbedUnimplementedDynamicGroupsServer() {}
func (UnimplementedDynamicGroupsServer) testEmbeddedByValue()                       {}

// UnsafeDynamicGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicGroupsServer will
// result in compilation errors.
type UnsafeDynamicGroupsServer interface {
	mustEmbedUnimplementedDynamicGroupsServer()
}

func RegisterDynamicGroupsServer(s grpc.ServiceRegistrar, srv DynamicGroupsServer) {
	// If the following call pancis, it indicates UnimplementedDynamicGroupsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamicGroups_ServiceDesc, srv)
}

func _DynamicGroups_ListDynamicGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDynamicGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicGroupsServer).ListDynamicGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicGroups_ListDynamicGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicGroupsServer).ListDynamicGroups(ctx, req.(*ListDynamicGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicGroups_CreateDynamicGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDynamicGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicGroupsServer).CreateDynamicGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicGroups_CreateDynamicGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicGroupsServer).CreateDynamicGroup(ctx, req.(*CreateDynamicGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicGroups_UpdateDynamicGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicGroupsServer).UpdateDynamicGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicGroups_UpdateDynamicGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicGroupsServer).UpdateDynamicGroup(ctx, req.(*UpdateDynamicGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicGroups_DeleteDynamicGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDynamicGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicGroupsServer).DeleteDynamicGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicGroups_DeleteDynamicGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicGroupsServer).DeleteDynamicGroup(ctx, req.(*DeleteDynamicGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicGroups_LocateDynamicGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateDynamicGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicGroupsServer).LocateDynamicGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicGroups_LocateDynamicGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicGroupsServer).LocateDynamicGroup(ctx, req.(*LocateDynamicGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicGroups_ServiceDesc is the grpc.ServiceDesc for DynamicGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.DynamicGroups",
	HandlerType: (*DynamicGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDynamicGroups",
			Handler:    _DynamicGroups_ListDynamicGroups_Handler,
		},
		{
			MethodName: "CreateDynamicGroup",
			Handler:    _DynamicGroups_CreateDynamicGroup_Handler,
		},
		{
			MethodName: "UpdateDynamicGroup",
			Handler:    _DynamicGroups_UpdateDynamicGroup_Handler,
		},
		{
			MethodName: "DeleteDynamicGroup",
			Handler:    _DynamicGroups_DeleteDynamicGroup_Handler,
		},
		{
			MethodName: "LocateDynamicGroup",
			Handler:    _DynamicGroups_LocateDynamicGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/dynamic_group.proto",
}
