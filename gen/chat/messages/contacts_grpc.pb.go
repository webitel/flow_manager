// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: messages/contacts.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContactLinkingService_LinkContactToClient_FullMethodName           = "/webitel.chat.ContactLinkingService/LinkContactToClient"
	ContactLinkingService_CreateContactFromConversation_FullMethodName = "/webitel.chat.ContactLinkingService/CreateContactFromConversation"
	ContactLinkingService_LinkContactToClientNA_FullMethodName         = "/webitel.chat.ContactLinkingService/LinkContactToClientNA"
)

// ContactLinkingServiceClient is the client API for ContactLinkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactLinkingServiceClient interface {
	// LinkContactToClient creates connection between existing internal contact and external client.
	LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
	CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, opts ...grpc.CallOption) (*Lookup, error)
	// CreateContactFromConversation[No Authorization] creates new contact from the data existing in the conversation and after that links this contact to the external user.
	LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, opts ...grpc.CallOption) (*LinkContactToClientNAResponse, error)
}

type contactLinkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactLinkingServiceClient(cc grpc.ClientConnInterface) ContactLinkingServiceClient {
	return &contactLinkingServiceClient{cc}
}

func (c *contactLinkingServiceClient) LinkContactToClient(ctx context.Context, in *LinkContactToClientRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ContactLinkingService_LinkContactToClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactLinkingServiceClient) CreateContactFromConversation(ctx context.Context, in *CreateContactFromConversationRequest, opts ...grpc.CallOption) (*Lookup, error) {
	out := new(Lookup)
	err := c.cc.Invoke(ctx, ContactLinkingService_CreateContactFromConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactLinkingServiceClient) LinkContactToClientNA(ctx context.Context, in *LinkContactToClientNARequest, opts ...grpc.CallOption) (*LinkContactToClientNAResponse, error) {
	out := new(LinkContactToClientNAResponse)
	err := c.cc.Invoke(ctx, ContactLinkingService_LinkContactToClientNA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactLinkingServiceServer is the server API for ContactLinkingService service.
// All implementations must embed UnimplementedContactLinkingServiceServer
// for forward compatibility
type ContactLinkingServiceServer interface {
	// LinkContactToClient creates connection between existing internal contact and external client.
	LinkContactToClient(context.Context, *LinkContactToClientRequest) (*EmptyResponse, error)
	// CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
	CreateContactFromConversation(context.Context, *CreateContactFromConversationRequest) (*Lookup, error)
	// CreateContactFromConversation[No Authorization] creates new contact from the data existing in the conversation and after that links this contact to the external user.
	LinkContactToClientNA(context.Context, *LinkContactToClientNARequest) (*LinkContactToClientNAResponse, error)
	mustEmbedUnimplementedContactLinkingServiceServer()
}

// UnimplementedContactLinkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactLinkingServiceServer struct {
}

func (UnimplementedContactLinkingServiceServer) LinkContactToClient(context.Context, *LinkContactToClientRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkContactToClient not implemented")
}
func (UnimplementedContactLinkingServiceServer) CreateContactFromConversation(context.Context, *CreateContactFromConversationRequest) (*Lookup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContactFromConversation not implemented")
}
func (UnimplementedContactLinkingServiceServer) LinkContactToClientNA(context.Context, *LinkContactToClientNARequest) (*LinkContactToClientNAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkContactToClientNA not implemented")
}
func (UnimplementedContactLinkingServiceServer) mustEmbedUnimplementedContactLinkingServiceServer() {}

// UnsafeContactLinkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactLinkingServiceServer will
// result in compilation errors.
type UnsafeContactLinkingServiceServer interface {
	mustEmbedUnimplementedContactLinkingServiceServer()
}

func RegisterContactLinkingServiceServer(s grpc.ServiceRegistrar, srv ContactLinkingServiceServer) {
	s.RegisterService(&ContactLinkingService_ServiceDesc, srv)
}

func _ContactLinkingService_LinkContactToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkContactToClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactLinkingServiceServer).LinkContactToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactLinkingService_LinkContactToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactLinkingServiceServer).LinkContactToClient(ctx, req.(*LinkContactToClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactLinkingService_CreateContactFromConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactFromConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactLinkingServiceServer).CreateContactFromConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactLinkingService_CreateContactFromConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactLinkingServiceServer).CreateContactFromConversation(ctx, req.(*CreateContactFromConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactLinkingService_LinkContactToClientNA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkContactToClientNARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactLinkingServiceServer).LinkContactToClientNA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactLinkingService_LinkContactToClientNA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactLinkingServiceServer).LinkContactToClientNA(ctx, req.(*LinkContactToClientNARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactLinkingService_ServiceDesc is the grpc.ServiceDesc for ContactLinkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactLinkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.ContactLinkingService",
	HandlerType: (*ContactLinkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkContactToClient",
			Handler:    _ContactLinkingService_LinkContactToClient_Handler,
		},
		{
			MethodName: "CreateContactFromConversation",
			Handler:    _ContactLinkingService_CreateContactFromConversation_Handler,
		},
		{
			MethodName: "LinkContactToClientNA",
			Handler:    _ContactLinkingService_LinkContactToClientNA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/contacts.proto",
}

const (
	ContactsChatCatalog_GetContactChatHistory_FullMethodName = "/webitel.chat.ContactsChatCatalog/GetContactChatHistory"
)

// ContactsChatCatalogClient is the client API for ContactsChatCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsChatCatalogClient interface {
	GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, opts ...grpc.CallOption) (*GetContactChatHistoryResponse, error)
}

type contactsChatCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsChatCatalogClient(cc grpc.ClientConnInterface) ContactsChatCatalogClient {
	return &contactsChatCatalogClient{cc}
}

func (c *contactsChatCatalogClient) GetContactChatHistory(ctx context.Context, in *GetContactChatHistoryRequest, opts ...grpc.CallOption) (*GetContactChatHistoryResponse, error) {
	out := new(GetContactChatHistoryResponse)
	err := c.cc.Invoke(ctx, ContactsChatCatalog_GetContactChatHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsChatCatalogServer is the server API for ContactsChatCatalog service.
// All implementations must embed UnimplementedContactsChatCatalogServer
// for forward compatibility
type ContactsChatCatalogServer interface {
	GetContactChatHistory(context.Context, *GetContactChatHistoryRequest) (*GetContactChatHistoryResponse, error)
	mustEmbedUnimplementedContactsChatCatalogServer()
}

// UnimplementedContactsChatCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedContactsChatCatalogServer struct {
}

func (UnimplementedContactsChatCatalogServer) GetContactChatHistory(context.Context, *GetContactChatHistoryRequest) (*GetContactChatHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactChatHistory not implemented")
}
func (UnimplementedContactsChatCatalogServer) mustEmbedUnimplementedContactsChatCatalogServer() {}

// UnsafeContactsChatCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsChatCatalogServer will
// result in compilation errors.
type UnsafeContactsChatCatalogServer interface {
	mustEmbedUnimplementedContactsChatCatalogServer()
}

func RegisterContactsChatCatalogServer(s grpc.ServiceRegistrar, srv ContactsChatCatalogServer) {
	s.RegisterService(&ContactsChatCatalog_ServiceDesc, srv)
}

func _ContactsChatCatalog_GetContactChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsChatCatalogServer).GetContactChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsChatCatalog_GetContactChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsChatCatalogServer).GetContactChatHistory(ctx, req.(*GetContactChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactsChatCatalog_ServiceDesc is the grpc.ServiceDesc for ContactsChatCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactsChatCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.ContactsChatCatalog",
	HandlerType: (*ContactsChatCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactChatHistory",
			Handler:    _ContactsChatCatalog_GetContactChatHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/contacts.proto",
}
