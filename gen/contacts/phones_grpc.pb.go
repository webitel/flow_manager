// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/phones.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Phones_LocatePhone_FullMethodName  = "/webitel.contacts.Phones/LocatePhone"
	Phones_ListPhones_FullMethodName   = "/webitel.contacts.Phones/ListPhones"
	Phones_MergePhones_FullMethodName  = "/webitel.contacts.Phones/MergePhones"
	Phones_ResetPhones_FullMethodName  = "/webitel.contacts.Phones/ResetPhones"
	Phones_DeletePhones_FullMethodName = "/webitel.contacts.Phones/DeletePhones"
	Phones_UpdatePhone_FullMethodName  = "/webitel.contacts.Phones/UpdatePhone"
	Phones_DeletePhone_FullMethodName  = "/webitel.contacts.Phones/DeletePhone"
)

// PhonesClient is the client API for Phones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Contact Emails service catalog.
type PhonesClient interface {
	// Locate the Contact's phone number association.
	LocatePhone(ctx context.Context, in *LocatePhoneRequest, opts ...grpc.CallOption) (*PhoneNumber, error)
	// Search phone number(s)
	ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...grpc.CallOption) (*PhoneList, error)
	// Associate phone number(s) with the Contact
	MergePhones(ctx context.Context, in *MergePhonesRequest, opts ...grpc.CallOption) (*PhoneList, error)
	// Reset the Contact's phone numbers to fit given data set.
	ResetPhones(ctx context.Context, in *ResetPhonesRequest, opts ...grpc.CallOption) (*PhoneList, error)
	// Remove the Contact's phone number association(s)
	DeletePhones(ctx context.Context, in *DeletePhonesRequest, opts ...grpc.CallOption) (*PhoneList, error)
	// Update the Contact's phone number association details
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*PhoneList, error)
	// Remove the Contact's phone number
	DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*PhoneNumber, error)
}

type phonesClient struct {
	cc grpc.ClientConnInterface
}

func NewPhonesClient(cc grpc.ClientConnInterface) PhonesClient {
	return &phonesClient{cc}
}

func (c *phonesClient) LocatePhone(ctx context.Context, in *LocatePhoneRequest, opts ...grpc.CallOption) (*PhoneNumber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneNumber)
	err := c.cc.Invoke(ctx, Phones_LocatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...grpc.CallOption) (*PhoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneList)
	err := c.cc.Invoke(ctx, Phones_ListPhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) MergePhones(ctx context.Context, in *MergePhonesRequest, opts ...grpc.CallOption) (*PhoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneList)
	err := c.cc.Invoke(ctx, Phones_MergePhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) ResetPhones(ctx context.Context, in *ResetPhonesRequest, opts ...grpc.CallOption) (*PhoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneList)
	err := c.cc.Invoke(ctx, Phones_ResetPhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) DeletePhones(ctx context.Context, in *DeletePhonesRequest, opts ...grpc.CallOption) (*PhoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneList)
	err := c.cc.Invoke(ctx, Phones_DeletePhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*PhoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneList)
	err := c.cc.Invoke(ctx, Phones_UpdatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesClient) DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*PhoneNumber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneNumber)
	err := c.cc.Invoke(ctx, Phones_DeletePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhonesServer is the server API for Phones service.
// All implementations must embed UnimplementedPhonesServer
// for forward compatibility.
//
// Contact Emails service catalog.
type PhonesServer interface {
	// Locate the Contact's phone number association.
	LocatePhone(context.Context, *LocatePhoneRequest) (*PhoneNumber, error)
	// Search phone number(s)
	ListPhones(context.Context, *ListPhonesRequest) (*PhoneList, error)
	// Associate phone number(s) with the Contact
	MergePhones(context.Context, *MergePhonesRequest) (*PhoneList, error)
	// Reset the Contact's phone numbers to fit given data set.
	ResetPhones(context.Context, *ResetPhonesRequest) (*PhoneList, error)
	// Remove the Contact's phone number association(s)
	DeletePhones(context.Context, *DeletePhonesRequest) (*PhoneList, error)
	// Update the Contact's phone number association details
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*PhoneList, error)
	// Remove the Contact's phone number
	DeletePhone(context.Context, *DeletePhoneRequest) (*PhoneNumber, error)
	mustEmbedUnimplementedPhonesServer()
}

// UnimplementedPhonesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhonesServer struct{}

func (UnimplementedPhonesServer) LocatePhone(context.Context, *LocatePhoneRequest) (*PhoneNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocatePhone not implemented")
}
func (UnimplementedPhonesServer) ListPhones(context.Context, *ListPhonesRequest) (*PhoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhones not implemented")
}
func (UnimplementedPhonesServer) MergePhones(context.Context, *MergePhonesRequest) (*PhoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePhones not implemented")
}
func (UnimplementedPhonesServer) ResetPhones(context.Context, *ResetPhonesRequest) (*PhoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPhones not implemented")
}
func (UnimplementedPhonesServer) DeletePhones(context.Context, *DeletePhonesRequest) (*PhoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhones not implemented")
}
func (UnimplementedPhonesServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*PhoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (UnimplementedPhonesServer) DeletePhone(context.Context, *DeletePhoneRequest) (*PhoneNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhone not implemented")
}
func (UnimplementedPhonesServer) mustEmbedUnimplementedPhonesServer() {}
func (UnimplementedPhonesServer) testEmbeddedByValue()                {}

// UnsafePhonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhonesServer will
// result in compilation errors.
type UnsafePhonesServer interface {
	mustEmbedUnimplementedPhonesServer()
}

func RegisterPhonesServer(s grpc.ServiceRegistrar, srv PhonesServer) {
	// If the following call pancis, it indicates UnimplementedPhonesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Phones_ServiceDesc, srv)
}

func _Phones_LocatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).LocatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_LocatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).LocatePhone(ctx, req.(*LocatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_ListPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).ListPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_ListPhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).ListPhones(ctx, req.(*ListPhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_MergePhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergePhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).MergePhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_MergePhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).MergePhones(ctx, req.(*MergePhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_ResetPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).ResetPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_ResetPhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).ResetPhones(ctx, req.(*ResetPhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_DeletePhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).DeletePhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_DeletePhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).DeletePhones(ctx, req.(*DeletePhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_UpdatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phones_DeletePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonesServer).DeletePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Phones_DeletePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonesServer).DeletePhone(ctx, req.(*DeletePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Phones_ServiceDesc is the grpc.ServiceDesc for Phones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Phones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Phones",
	HandlerType: (*PhonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocatePhone",
			Handler:    _Phones_LocatePhone_Handler,
		},
		{
			MethodName: "ListPhones",
			Handler:    _Phones_ListPhones_Handler,
		},
		{
			MethodName: "MergePhones",
			Handler:    _Phones_MergePhones_Handler,
		},
		{
			MethodName: "ResetPhones",
			Handler:    _Phones_ResetPhones_Handler,
		},
		{
			MethodName: "DeletePhones",
			Handler:    _Phones_DeletePhones_Handler,
		},
		{
			MethodName: "UpdatePhone",
			Handler:    _Phones_UpdatePhone_Handler,
		},
		{
			MethodName: "DeletePhone",
			Handler:    _Phones_DeletePhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/phones.proto",
}
