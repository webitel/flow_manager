// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/timezones.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Timezones_ListTimezones_FullMethodName   = "/webitel.contacts.Timezones/ListTimezones"
	Timezones_MergeTimezones_FullMethodName  = "/webitel.contacts.Timezones/MergeTimezones"
	Timezones_ResetTimezones_FullMethodName  = "/webitel.contacts.Timezones/ResetTimezones"
	Timezones_DeleteTimezones_FullMethodName = "/webitel.contacts.Timezones/DeleteTimezones"
	Timezones_LocateTimezone_FullMethodName  = "/webitel.contacts.Timezones/LocateTimezone"
	Timezones_UpdateTimezone_FullMethodName  = "/webitel.contacts.Timezones/UpdateTimezone"
	Timezones_DeleteTimezone_FullMethodName  = "/webitel.contacts.Timezones/DeleteTimezone"
)

// TimezonesClient is the client API for Timezones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Timezones service catalogs.
type TimezonesClient interface {
	// List of the Contact's timezone(s).
	ListTimezones(ctx context.Context, in *ListTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Associate more timezone(s) with the Contact.
	MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Resets all timezones of the contact according to the input dataset.
	ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Remove the Contact's timezone(s).
	DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Locate the Contact's timezone association.
	LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error)
	// Update the Contact's timezone details.
	UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Remove the Contact's timezone association.
	DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error)
}

type timezonesClient struct {
	cc grpc.ClientConnInterface
}

func NewTimezonesClient(cc grpc.ClientConnInterface) TimezonesClient {
	return &timezonesClient{cc}
}

func (c *timezonesClient) ListTimezones(ctx context.Context, in *ListTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_ListTimezones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_MergeTimezones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_ResetTimezones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_DeleteTimezones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Timezone)
	err := c.cc.Invoke(ctx, Timezones_LocateTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_UpdateTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Timezone)
	err := c.cc.Invoke(ctx, Timezones_DeleteTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimezonesServer is the server API for Timezones service.
// All implementations must embed UnimplementedTimezonesServer
// for forward compatibility.
//
// Timezones service catalogs.
type TimezonesServer interface {
	// List of the Contact's timezone(s).
	ListTimezones(context.Context, *ListTimezonesRequest) (*TimezoneList, error)
	// Associate more timezone(s) with the Contact.
	MergeTimezones(context.Context, *MergeTimezonesRequest) (*TimezoneList, error)
	// Resets all timezones of the contact according to the input dataset.
	ResetTimezones(context.Context, *ResetTimezonesRequest) (*TimezoneList, error)
	// Remove the Contact's timezone(s).
	DeleteTimezones(context.Context, *DeleteTimezonesRequest) (*TimezoneList, error)
	// Locate the Contact's timezone association.
	LocateTimezone(context.Context, *LocateTimezoneRequest) (*Timezone, error)
	// Update the Contact's timezone details.
	UpdateTimezone(context.Context, *UpdateTimezoneRequest) (*TimezoneList, error)
	// Remove the Contact's timezone association.
	DeleteTimezone(context.Context, *DeleteTimezoneRequest) (*Timezone, error)
	mustEmbedUnimplementedTimezonesServer()
}

// UnimplementedTimezonesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimezonesServer struct{}

func (UnimplementedTimezonesServer) ListTimezones(context.Context, *ListTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimezones not implemented")
}
func (UnimplementedTimezonesServer) MergeTimezones(context.Context, *MergeTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeTimezones not implemented")
}
func (UnimplementedTimezonesServer) ResetTimezones(context.Context, *ResetTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetTimezones not implemented")
}
func (UnimplementedTimezonesServer) DeleteTimezones(context.Context, *DeleteTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimezones not implemented")
}
func (UnimplementedTimezonesServer) LocateTimezone(context.Context, *LocateTimezoneRequest) (*Timezone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateTimezone not implemented")
}
func (UnimplementedTimezonesServer) UpdateTimezone(context.Context, *UpdateTimezoneRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimezone not implemented")
}
func (UnimplementedTimezonesServer) DeleteTimezone(context.Context, *DeleteTimezoneRequest) (*Timezone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimezone not implemented")
}
func (UnimplementedTimezonesServer) mustEmbedUnimplementedTimezonesServer() {}
func (UnimplementedTimezonesServer) testEmbeddedByValue()                   {}

// UnsafeTimezonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimezonesServer will
// result in compilation errors.
type UnsafeTimezonesServer interface {
	mustEmbedUnimplementedTimezonesServer()
}

func RegisterTimezonesServer(s grpc.ServiceRegistrar, srv TimezonesServer) {
	// If the following call pancis, it indicates UnimplementedTimezonesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Timezones_ServiceDesc, srv)
}

func _Timezones_ListTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).ListTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_ListTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).ListTimezones(ctx, req.(*ListTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_MergeTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).MergeTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_MergeTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).MergeTimezones(ctx, req.(*MergeTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_ResetTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).ResetTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_ResetTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).ResetTimezones(ctx, req.(*ResetTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_DeleteTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).DeleteTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_DeleteTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).DeleteTimezones(ctx, req.(*DeleteTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_LocateTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).LocateTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_LocateTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).LocateTimezone(ctx, req.(*LocateTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_UpdateTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).UpdateTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_UpdateTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).UpdateTimezone(ctx, req.(*UpdateTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_DeleteTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).DeleteTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_DeleteTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).DeleteTimezone(ctx, req.(*DeleteTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timezones_ServiceDesc is the grpc.ServiceDesc for Timezones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timezones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Timezones",
	HandlerType: (*TimezonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTimezones",
			Handler:    _Timezones_ListTimezones_Handler,
		},
		{
			MethodName: "MergeTimezones",
			Handler:    _Timezones_MergeTimezones_Handler,
		},
		{
			MethodName: "ResetTimezones",
			Handler:    _Timezones_ResetTimezones_Handler,
		},
		{
			MethodName: "DeleteTimezones",
			Handler:    _Timezones_DeleteTimezones_Handler,
		},
		{
			MethodName: "LocateTimezone",
			Handler:    _Timezones_LocateTimezone_Handler,
		},
		{
			MethodName: "UpdateTimezone",
			Handler:    _Timezones_UpdateTimezone_Handler,
		},
		{
			MethodName: "DeleteTimezone",
			Handler:    _Timezones_DeleteTimezone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/timezones.proto",
}
