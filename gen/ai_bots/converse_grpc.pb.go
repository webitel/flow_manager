// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: converse.proto

package ai_bots

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConverseService_Converse_FullMethodName = "/ai_bots.ConverseService/Converse"
)

// ConverseServiceClient is the client API for ConverseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverseServiceClient interface {
	// Converse - це двонаправлений стрім для обміну повідомленнями.
	// Перше повідомлення від клієнта ЗАВЖДИ має бути типу `Config`.
	// Після цього клієнт надсилає потік повідомлень типу `Input`.
	Converse(ctx context.Context, opts ...grpc.CallOption) (ConverseService_ConverseClient, error)
}

type converseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConverseServiceClient(cc grpc.ClientConnInterface) ConverseServiceClient {
	return &converseServiceClient{cc}
}

func (c *converseServiceClient) Converse(ctx context.Context, opts ...grpc.CallOption) (ConverseService_ConverseClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConverseService_ServiceDesc.Streams[0], ConverseService_Converse_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &converseServiceConverseClient{stream}
	return x, nil
}

type ConverseService_ConverseClient interface {
	Send(*ConverseRequest) error
	Recv() (*ConverseResponse, error)
	grpc.ClientStream
}

type converseServiceConverseClient struct {
	grpc.ClientStream
}

func (x *converseServiceConverseClient) Send(m *ConverseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *converseServiceConverseClient) Recv() (*ConverseResponse, error) {
	m := new(ConverseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverseServiceServer is the server API for ConverseService service.
// All implementations must embed UnimplementedConverseServiceServer
// for forward compatibility
type ConverseServiceServer interface {
	// Converse - це двонаправлений стрім для обміну повідомленнями.
	// Перше повідомлення від клієнта ЗАВЖДИ має бути типу `Config`.
	// Після цього клієнт надсилає потік повідомлень типу `Input`.
	Converse(ConverseService_ConverseServer) error
	mustEmbedUnimplementedConverseServiceServer()
}

// UnimplementedConverseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConverseServiceServer struct {
}

func (UnimplementedConverseServiceServer) Converse(ConverseService_ConverseServer) error {
	return status.Errorf(codes.Unimplemented, "method Converse not implemented")
}
func (UnimplementedConverseServiceServer) mustEmbedUnimplementedConverseServiceServer() {}

// UnsafeConverseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverseServiceServer will
// result in compilation errors.
type UnsafeConverseServiceServer interface {
	mustEmbedUnimplementedConverseServiceServer()
}

func RegisterConverseServiceServer(s grpc.ServiceRegistrar, srv ConverseServiceServer) {
	s.RegisterService(&ConverseService_ServiceDesc, srv)
}

func _ConverseService_Converse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConverseServiceServer).Converse(&converseServiceConverseServer{stream})
}

type ConverseService_ConverseServer interface {
	Send(*ConverseResponse) error
	Recv() (*ConverseRequest, error)
	grpc.ServerStream
}

type converseServiceConverseServer struct {
	grpc.ServerStream
}

func (x *converseServiceConverseServer) Send(m *ConverseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *converseServiceConverseServer) Recv() (*ConverseRequest, error) {
	m := new(ConverseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverseService_ServiceDesc is the grpc.ServiceDesc for ConverseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConverseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_bots.ConverseService",
	HandlerType: (*ConverseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Converse",
			Handler:       _ConverseService_Converse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "converse.proto",
}
