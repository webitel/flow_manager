// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/languages.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Languages_GetContactLanguages_FullMethodName = "/webitel.contacts.Languages/GetContactLanguages"
	Languages_AddContactLanguages_FullMethodName = "/webitel.contacts.Languages/AddContactLanguages"
	Languages_SetContactLanguages_FullMethodName = "/webitel.contacts.Languages/SetContactLanguages"
	Languages_SetContactLanguage_FullMethodName  = "/webitel.contacts.Languages/SetContactLanguage"
	Languages_DelContactLanguages_FullMethodName = "/webitel.contacts.Languages/DelContactLanguages"
	Languages_DelContactLanguage_FullMethodName  = "/webitel.contacts.Languages/DelContactLanguage"
)

// LanguagesClient is the client API for Languages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Languages service catalog.
type LanguagesClient interface {
	// List of the Contact's language association(s).
	GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error)
	// Associate more language(s) with the Contact.
	AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error)
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error)
	// Update the Contact's language association details.
	SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageList, error)
	// Remove the Contact's language association(s).
	DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error)
	// Remove the Contact's language association.
	DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*Language, error)
}

type languagesClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguagesClient(cc grpc.ClientConnInterface) LanguagesClient {
	return &languagesClient{cc}
}

func (c *languagesClient) GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageList)
	err := c.cc.Invoke(ctx, Languages_GetContactLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageList)
	err := c.cc.Invoke(ctx, Languages_AddContactLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageList)
	err := c.cc.Invoke(ctx, Languages_SetContactLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageList)
	err := c.cc.Invoke(ctx, Languages_SetContactLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, opts ...grpc.CallOption) (*LanguageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageList)
	err := c.cc.Invoke(ctx, Languages_DelContactLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*Language, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Language)
	err := c.cc.Invoke(ctx, Languages_DelContactLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguagesServer is the server API for Languages service.
// All implementations must embed UnimplementedLanguagesServer
// for forward compatibility.
//
// Languages service catalog.
type LanguagesServer interface {
	// List of the Contact's language association(s).
	GetContactLanguages(context.Context, *SearchLanguagesRequest) (*LanguageList, error)
	// Associate more language(s) with the Contact.
	AddContactLanguages(context.Context, *CreateLanguagesRequest) (*LanguageList, error)
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactLanguages(context.Context, *UpdateLanguagesRequest) (*LanguageList, error)
	// Update the Contact's language association details.
	SetContactLanguage(context.Context, *UpdateLanguageRequest) (*LanguageList, error)
	// Remove the Contact's language association(s).
	DelContactLanguages(context.Context, *DeleteLanguagesRequest) (*LanguageList, error)
	// Remove the Contact's language association.
	DelContactLanguage(context.Context, *DeleteLanguageRequest) (*Language, error)
	mustEmbedUnimplementedLanguagesServer()
}

// UnimplementedLanguagesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguagesServer struct{}

func (UnimplementedLanguagesServer) GetContactLanguages(context.Context, *SearchLanguagesRequest) (*LanguageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactLanguages not implemented")
}
func (UnimplementedLanguagesServer) AddContactLanguages(context.Context, *CreateLanguagesRequest) (*LanguageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactLanguages not implemented")
}
func (UnimplementedLanguagesServer) SetContactLanguages(context.Context, *UpdateLanguagesRequest) (*LanguageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactLanguages not implemented")
}
func (UnimplementedLanguagesServer) SetContactLanguage(context.Context, *UpdateLanguageRequest) (*LanguageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactLanguage not implemented")
}
func (UnimplementedLanguagesServer) DelContactLanguages(context.Context, *DeleteLanguagesRequest) (*LanguageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContactLanguages not implemented")
}
func (UnimplementedLanguagesServer) DelContactLanguage(context.Context, *DeleteLanguageRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContactLanguage not implemented")
}
func (UnimplementedLanguagesServer) mustEmbedUnimplementedLanguagesServer() {}
func (UnimplementedLanguagesServer) testEmbeddedByValue()                   {}

// UnsafeLanguagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguagesServer will
// result in compilation errors.
type UnsafeLanguagesServer interface {
	mustEmbedUnimplementedLanguagesServer()
}

func RegisterLanguagesServer(s grpc.ServiceRegistrar, srv LanguagesServer) {
	// If the following call pancis, it indicates UnimplementedLanguagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Languages_ServiceDesc, srv)
}

func _Languages_GetContactLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).GetContactLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_GetContactLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).GetContactLanguages(ctx, req.(*SearchLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_AddContactLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).AddContactLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_AddContactLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).AddContactLanguages(ctx, req.(*CreateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_SetContactLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).SetContactLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_SetContactLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).SetContactLanguages(ctx, req.(*UpdateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_SetContactLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).SetContactLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_SetContactLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).SetContactLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_DelContactLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).DelContactLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_DelContactLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).DelContactLanguages(ctx, req.(*DeleteLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_DelContactLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).DelContactLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Languages_DelContactLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).DelContactLanguage(ctx, req.(*DeleteLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Languages_ServiceDesc is the grpc.ServiceDesc for Languages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Languages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Languages",
	HandlerType: (*LanguagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactLanguages",
			Handler:    _Languages_GetContactLanguages_Handler,
		},
		{
			MethodName: "AddContactLanguages",
			Handler:    _Languages_AddContactLanguages_Handler,
		},
		{
			MethodName: "SetContactLanguages",
			Handler:    _Languages_SetContactLanguages_Handler,
		},
		{
			MethodName: "SetContactLanguage",
			Handler:    _Languages_SetContactLanguage_Handler,
		},
		{
			MethodName: "DelContactLanguages",
			Handler:    _Languages_DelContactLanguages_Handler,
		},
		{
			MethodName: "DelContactLanguage",
			Handler:    _Languages_DelContactLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/languages.proto",
}
