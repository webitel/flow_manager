// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: case_file.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaseFiles_ListFiles_FullMethodName  = "/webitel.cases.CaseFiles/ListFiles"
	CaseFiles_DeleteFile_FullMethodName = "/webitel.cases.CaseFiles/DeleteFile"
)

// CaseFilesClient is the client API for CaseFiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaseFilesClient interface {
	// Retrieves a list of files associated with a specific case.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*CaseFileList, error)
	// RPC method to delete a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*File, error)
}

type caseFilesClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseFilesClient(cc grpc.ClientConnInterface) CaseFilesClient {
	return &caseFilesClient{cc}
}

func (c *caseFilesClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*CaseFileList, error) {
	out := new(CaseFileList)
	err := c.cc.Invoke(ctx, CaseFiles_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseFilesClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, CaseFiles_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseFilesServer is the server API for CaseFiles service.
// All implementations must embed UnimplementedCaseFilesServer
// for forward compatibility
type CaseFilesServer interface {
	// Retrieves a list of files associated with a specific case.
	ListFiles(context.Context, *ListFilesRequest) (*CaseFileList, error)
	// RPC method to delete a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*File, error)
	mustEmbedUnimplementedCaseFilesServer()
}

// UnimplementedCaseFilesServer must be embedded to have forward compatible implementations.
type UnimplementedCaseFilesServer struct {
}

func (UnimplementedCaseFilesServer) ListFiles(context.Context, *ListFilesRequest) (*CaseFileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedCaseFilesServer) DeleteFile(context.Context, *DeleteFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedCaseFilesServer) mustEmbedUnimplementedCaseFilesServer() {}

// UnsafeCaseFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseFilesServer will
// result in compilation errors.
type UnsafeCaseFilesServer interface {
	mustEmbedUnimplementedCaseFilesServer()
}

func RegisterCaseFilesServer(s grpc.ServiceRegistrar, srv CaseFilesServer) {
	s.RegisterService(&CaseFiles_ServiceDesc, srv)
}

func _CaseFiles_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseFilesServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseFiles_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseFilesServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseFiles_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseFilesServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseFiles_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseFilesServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseFiles_ServiceDesc is the grpc.ServiceDesc for CaseFiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseFiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.CaseFiles",
	HandlerType: (*CaseFilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _CaseFiles_ListFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _CaseFiles_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "case_file.proto",
}
