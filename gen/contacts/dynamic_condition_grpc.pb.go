// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/dynamic_condition.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DynamicConditions_ListConditions_FullMethodName  = "/webitel.contacts.DynamicConditions/ListConditions"
	DynamicConditions_CreateCondition_FullMethodName = "/webitel.contacts.DynamicConditions/CreateCondition"
	DynamicConditions_UpdateCondition_FullMethodName = "/webitel.contacts.DynamicConditions/UpdateCondition"
	DynamicConditions_DeleteCondition_FullMethodName = "/webitel.contacts.DynamicConditions/DeleteCondition"
	DynamicConditions_LocateCondition_FullMethodName = "/webitel.contacts.DynamicConditions/LocateCondition"
)

// DynamicConditionsClient is the client API for DynamicConditions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing conditions.
type DynamicConditionsClient interface {
	// Retrieve a list of conditions.
	ListConditions(ctx context.Context, in *ListConditionsRequest, opts ...grpc.CallOption) (*ConditionList, error)
	// Create a new condition.
	CreateCondition(ctx context.Context, in *CreateConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// Update an existing condition.
	UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// Delete a condition.
	DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// Locate a condition by ID.
	LocateCondition(ctx context.Context, in *LocateConditionRequest, opts ...grpc.CallOption) (*LocateConditionResponse, error)
}

type dynamicConditionsClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicConditionsClient(cc grpc.ClientConnInterface) DynamicConditionsClient {
	return &dynamicConditionsClient{cc}
}

func (c *dynamicConditionsClient) ListConditions(ctx context.Context, in *ListConditionsRequest, opts ...grpc.CallOption) (*ConditionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConditionList)
	err := c.cc.Invoke(ctx, DynamicConditions_ListConditions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConditionsClient) CreateCondition(ctx context.Context, in *CreateConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Condition)
	err := c.cc.Invoke(ctx, DynamicConditions_CreateCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConditionsClient) UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Condition)
	err := c.cc.Invoke(ctx, DynamicConditions_UpdateCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConditionsClient) DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Condition)
	err := c.cc.Invoke(ctx, DynamicConditions_DeleteCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicConditionsClient) LocateCondition(ctx context.Context, in *LocateConditionRequest, opts ...grpc.CallOption) (*LocateConditionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocateConditionResponse)
	err := c.cc.Invoke(ctx, DynamicConditions_LocateCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicConditionsServer is the server API for DynamicConditions service.
// All implementations must embed UnimplementedDynamicConditionsServer
// for forward compatibility.
//
// Service for managing conditions.
type DynamicConditionsServer interface {
	// Retrieve a list of conditions.
	ListConditions(context.Context, *ListConditionsRequest) (*ConditionList, error)
	// Create a new condition.
	CreateCondition(context.Context, *CreateConditionRequest) (*Condition, error)
	// Update an existing condition.
	UpdateCondition(context.Context, *UpdateConditionRequest) (*Condition, error)
	// Delete a condition.
	DeleteCondition(context.Context, *DeleteConditionRequest) (*Condition, error)
	// Locate a condition by ID.
	LocateCondition(context.Context, *LocateConditionRequest) (*LocateConditionResponse, error)
	mustEmbedUnimplementedDynamicConditionsServer()
}

// UnimplementedDynamicConditionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicConditionsServer struct{}

func (UnimplementedDynamicConditionsServer) ListConditions(context.Context, *ListConditionsRequest) (*ConditionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConditions not implemented")
}
func (UnimplementedDynamicConditionsServer) CreateCondition(context.Context, *CreateConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCondition not implemented")
}
func (UnimplementedDynamicConditionsServer) UpdateCondition(context.Context, *UpdateConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedDynamicConditionsServer) DeleteCondition(context.Context, *DeleteConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCondition not implemented")
}
func (UnimplementedDynamicConditionsServer) LocateCondition(context.Context, *LocateConditionRequest) (*LocateConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateCondition not implemented")
}
func (UnimplementedDynamicConditionsServer) mustEmbedUnimplementedDynamicConditionsServer() {}
func (UnimplementedDynamicConditionsServer) testEmbeddedByValue()                           {}

// UnsafeDynamicConditionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicConditionsServer will
// result in compilation errors.
type UnsafeDynamicConditionsServer interface {
	mustEmbedUnimplementedDynamicConditionsServer()
}

func RegisterDynamicConditionsServer(s grpc.ServiceRegistrar, srv DynamicConditionsServer) {
	// If the following call pancis, it indicates UnimplementedDynamicConditionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamicConditions_ServiceDesc, srv)
}

func _DynamicConditions_ListConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConditionsServer).ListConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicConditions_ListConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConditionsServer).ListConditions(ctx, req.(*ListConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConditions_CreateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConditionsServer).CreateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicConditions_CreateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConditionsServer).CreateCondition(ctx, req.(*CreateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConditions_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConditionsServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicConditions_UpdateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConditionsServer).UpdateCondition(ctx, req.(*UpdateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConditions_DeleteCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConditionsServer).DeleteCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicConditions_DeleteCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConditionsServer).DeleteCondition(ctx, req.(*DeleteConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicConditions_LocateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConditionsServer).LocateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicConditions_LocateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConditionsServer).LocateCondition(ctx, req.(*LocateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicConditions_ServiceDesc is the grpc.ServiceDesc for DynamicConditions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicConditions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.DynamicConditions",
	HandlerType: (*DynamicConditionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConditions",
			Handler:    _DynamicConditions_ListConditions_Handler,
		},
		{
			MethodName: "CreateCondition",
			Handler:    _DynamicConditions_CreateCondition_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _DynamicConditions_UpdateCondition_Handler,
		},
		{
			MethodName: "DeleteCondition",
			Handler:    _DynamicConditions_DeleteCondition_Handler,
		},
		{
			MethodName: "LocateCondition",
			Handler:    _DynamicConditions_LocateCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/dynamic_condition.proto",
}
