// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: messages/catalog.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Catalog_GetCustomers_FullMethodName = "/webitel.chat.Catalog/GetCustomers"
	Catalog_GetDialogs_FullMethodName   = "/webitel.chat.Catalog/GetDialogs"
	Catalog_GetMembers_FullMethodName   = "/webitel.chat.Catalog/GetMembers"
	Catalog_GetHistory_FullMethodName   = "/webitel.chat.Catalog/GetHistory"
	Catalog_GetUpdates_FullMethodName   = "/webitel.chat.Catalog/GetUpdates"
)

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	// Query of external chat customers
	GetCustomers(ctx context.Context, in *ChatCustomersRequest, opts ...grpc.CallOption) (*ChatCustomers, error)
	// Query of chat conversations
	GetDialogs(ctx context.Context, in *ChatDialogsRequest, opts ...grpc.CallOption) (*ChatDialogs, error)
	// Query of chat participants
	GetMembers(ctx context.Context, in *ChatMembersRequest, opts ...grpc.CallOption) (*ChatMembers, error)
	// Query of the chat history
	GetHistory(ctx context.Context, in *ChatMessagesRequest, opts ...grpc.CallOption) (*ChatMessages, error)
	// Query of the chat(peer) updates since last state(offset)
	// REQUIRE: peer, offset.
	// INVALIDATE: search q.
	GetUpdates(ctx context.Context, in *ChatMessagesRequest, opts ...grpc.CallOption) (*ChatMessages, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetCustomers(ctx context.Context, in *ChatCustomersRequest, opts ...grpc.CallOption) (*ChatCustomers, error) {
	out := new(ChatCustomers)
	err := c.cc.Invoke(ctx, Catalog_GetCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetDialogs(ctx context.Context, in *ChatDialogsRequest, opts ...grpc.CallOption) (*ChatDialogs, error) {
	out := new(ChatDialogs)
	err := c.cc.Invoke(ctx, Catalog_GetDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetMembers(ctx context.Context, in *ChatMembersRequest, opts ...grpc.CallOption) (*ChatMembers, error) {
	out := new(ChatMembers)
	err := c.cc.Invoke(ctx, Catalog_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetHistory(ctx context.Context, in *ChatMessagesRequest, opts ...grpc.CallOption) (*ChatMessages, error) {
	out := new(ChatMessages)
	err := c.cc.Invoke(ctx, Catalog_GetHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetUpdates(ctx context.Context, in *ChatMessagesRequest, opts ...grpc.CallOption) (*ChatMessages, error) {
	out := new(ChatMessages)
	err := c.cc.Invoke(ctx, Catalog_GetUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	// Query of external chat customers
	GetCustomers(context.Context, *ChatCustomersRequest) (*ChatCustomers, error)
	// Query of chat conversations
	GetDialogs(context.Context, *ChatDialogsRequest) (*ChatDialogs, error)
	// Query of chat participants
	GetMembers(context.Context, *ChatMembersRequest) (*ChatMembers, error)
	// Query of the chat history
	GetHistory(context.Context, *ChatMessagesRequest) (*ChatMessages, error)
	// Query of the chat(peer) updates since last state(offset)
	// REQUIRE: peer, offset.
	// INVALIDATE: search q.
	GetUpdates(context.Context, *ChatMessagesRequest) (*ChatMessages, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetCustomers(context.Context, *ChatCustomersRequest) (*ChatCustomers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedCatalogServer) GetDialogs(context.Context, *ChatDialogsRequest) (*ChatDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogs not implemented")
}
func (UnimplementedCatalogServer) GetMembers(context.Context, *ChatMembersRequest) (*ChatMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedCatalogServer) GetHistory(context.Context, *ChatMessagesRequest) (*ChatMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedCatalogServer) GetUpdates(context.Context, *ChatMessagesRequest) (*ChatMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCustomers(ctx, req.(*ChatCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatDialogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetDialogs(ctx, req.(*ChatDialogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetMembers(ctx, req.(*ChatMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetHistory(ctx, req.(*ChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetUpdates(ctx, req.(*ChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomers",
			Handler:    _Catalog_GetCustomers_Handler,
		},
		{
			MethodName: "GetDialogs",
			Handler:    _Catalog_GetDialogs_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Catalog_GetMembers_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Catalog_GetHistory_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _Catalog_GetUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/catalog.proto",
}
