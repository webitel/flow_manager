// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: contacts/languages.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LanguageTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           string                 `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`       // uk-UA           ; Unique(!)
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`     // uk              ; golang.org/x/text/language.MustParse(s).Base()
	Lang          string                 `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`     // Ukrainian       ; golang.org/x/text/language/display.English.Languages().Name(tag)
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`     // українська      ; golang.org/x/text/language/display.Self().Name(tag)
	Region        string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"` // UA              ; golang.org/x/text/language.MustParse(s).Region()
	Script        string                 `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"` // Cyrl; (Cyrillic); golang.org/x/text/language.MustParse(s).Script()
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageTag) Reset() {
	*x = LanguageTag{}
	mi := &file_contacts_languages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageTag) ProtoMessage() {}

func (x *LanguageTag) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageTag.ProtoReflect.Descriptor instead.
func (*LanguageTag) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{0}
}

func (x *LanguageTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *LanguageTag) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LanguageTag) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LanguageTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LanguageTag) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LanguageTag) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

// A Contact's locale preference.
// Output purpose only.
type Language struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique ID of the association. Never changes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the latest update. Numeric sequence.
	Ver int32 `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The user who created this Field.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp(milli) of the Field creation.
	CreatedBy *Lookup `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp(milli) of the last Field update.
	// Take part in Etag generation.
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The user who performed last Update.
	UpdatedBy *Lookup `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Indicates whether this association is the default
	// among others of the same type.
	Primary bool `protobuf:"varint,10,opt,name=primary,proto3" json:"primary,omitempty"`
	// The well-formed IETF BCP 47 language tag representing the locale.
	// https://www.rfc-editor.org/info/bcp47
	Tag           string `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag,omitempty"`
	Code          string `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`     // uk              ; golang.org/x/text/language.MustParse(s).Base()
	Lang          string `protobuf:"bytes,13,opt,name=lang,proto3" json:"lang,omitempty"`     // Ukrainian       ; golang.org/x/text/language/display.English.Languages().Name(tag)
	Name          string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`     // українська      ; golang.org/x/text/language/display.Self().Name(tag)
	Region        string `protobuf:"bytes,15,opt,name=region,proto3" json:"region,omitempty"` // UA              ; golang.org/x/text/language.MustParse(s).Region()
	Script        string `protobuf:"bytes,16,opt,name=script,proto3" json:"script,omitempty"` // Cyrl; (Cyrillic); golang.org/x/text/language.MustParse(s).Script()
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language) Reset() {
	*x = Language{}
	mi := &file_contacts_languages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{1}
}

func (x *Language) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Language) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Language) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Language) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Language) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Language) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Language) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Language) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *Language) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Language) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Language) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Language) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Language) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

// An input of the Contact's language.
type InputLanguage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID of the latest version of an existing association.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Indicates whether this association must be default
	// among others of the same type.
	Primary bool `protobuf:"varint,10,opt,name=primary,proto3" json:"primary,omitempty"`
	// NEW, well-formed IETF BCP 47 language tag representing the locale.
	// https://www.rfc-editor.org/info/bcp47
	Tag           string `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputLanguage) Reset() {
	*x = InputLanguage{}
	mi := &file_contacts_languages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputLanguage) ProtoMessage() {}

func (x *InputLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputLanguage.ProtoReflect.Descriptor instead.
func (*InputLanguage) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{2}
}

func (x *InputLanguage) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputLanguage) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *InputLanguage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// LabelsData
// NOTE: Edge represents connection between two nodes.
// So this ContactLabels.data are always subordinate to some contact.id.
type LanguageList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page of the Contact's Language(s) dataset.
	Data []*Language `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Page number of partial result dataset records.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Next indicate whether there are more result records(page+) available.
	// If set - next page is available with query ?size=$(data.length)&page=$(page++)
	Next          bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageList) Reset() {
	*x = LanguageList{}
	mi := &file_contacts_languages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageList) ProtoMessage() {}

func (x *LanguageList) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageList.ProtoReflect.Descriptor instead.
func (*LanguageList) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{3}
}

func (x *LanguageList) GetData() []*Language {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LanguageList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LanguageList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

// Search for the Contact's Language(s) request.
type SearchLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page number of result dataset records. offset = (page*size)
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Size count of records on result page. limit = (size++)
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Search term: language tag (lang, name, region, ..)
	// `?` - matches any one character
	// `*` - matches 0 or more characters
	Q string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	// Sort the result according to fields.
	Sort []string `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// Contact ID associated with.
	ContactId string `protobuf:"bytes,5,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Language(s) with unique ID|ETag only.
	Id []string `protobuf:"bytes,7,rep,name=id,proto3" json:"id,omitempty"`
	// Primary language only.
	Primary       *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=primary,proto3" json:"primary,omitempty"`
	Code          string                `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"` //
	Lang          string                `protobuf:"bytes,11,opt,name=lang,proto3" json:"lang,omitempty"` //
	Name          string                `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Region        string                `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLanguagesRequest) Reset() {
	*x = SearchLanguagesRequest{}
	mi := &file_contacts_languages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLanguagesRequest) ProtoMessage() {}

func (x *SearchLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLanguagesRequest.ProtoReflect.Descriptor instead.
func (*SearchLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{4}
}

func (x *SearchLanguagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchLanguagesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchLanguagesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchLanguagesRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchLanguagesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchLanguagesRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *SearchLanguagesRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchLanguagesRequest) GetPrimary() *wrapperspb.BoolValue {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *SearchLanguagesRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SearchLanguagesRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SearchLanguagesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchLanguagesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type CreateLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Array of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
	// The first element will become `primary` one.
	Input         []*InputLanguage `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLanguagesRequest) Reset() {
	*x = CreateLanguagesRequest{}
	mi := &file_contacts_languages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLanguagesRequest) ProtoMessage() {}

func (x *CreateLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLanguagesRequest.ProtoReflect.Descriptor instead.
func (*CreateLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLanguagesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateLanguagesRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *CreateLanguagesRequest) GetInput() []*InputLanguage {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Contact ID associated with.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
	// The first element will become `primary` one.
	Input         []*InputLanguage `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguagesRequest) Reset() {
	*x = UpdateLanguagesRequest{}
	mi := &file_contacts_languages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguagesRequest) ProtoMessage() {}

func (x *UpdateLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguagesRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateLanguagesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateLanguagesRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpdateLanguagesRequest) GetInput() []*InputLanguage {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateLanguageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Contact ID associated with.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.
	// The first element will become `primary` one.
	Input         *InputLanguage `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageRequest) Reset() {
	*x = UpdateLanguageRequest{}
	mi := &file_contacts_languages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageRequest) ProtoMessage() {}

func (x *UpdateLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguageRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateLanguageRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateLanguageRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpdateLanguageRequest) GetInput() *InputLanguage {
	if x != nil {
		return x.Input
	}
	return nil
}

type DeleteLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Set of unique language{etag} association(s) to remove.
	Etag          []string `protobuf:"bytes,3,rep,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLanguagesRequest) Reset() {
	*x = DeleteLanguagesRequest{}
	mi := &file_contacts_languages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLanguagesRequest) ProtoMessage() {}

func (x *DeleteLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLanguagesRequest.ProtoReflect.Descriptor instead.
func (*DeleteLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteLanguagesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteLanguagesRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *DeleteLanguagesRequest) GetEtag() []string {
	if x != nil {
		return x.Etag
	}
	return nil
}

type DeleteLanguageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to be retrieved as a result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Contact ID associated with.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Unique ID of the language association: {id,etag,code}.
	Etag          string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLanguageRequest) Reset() {
	*x = DeleteLanguageRequest{}
	mi := &file_contacts_languages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLanguageRequest) ProtoMessage() {}

func (x *DeleteLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_languages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLanguageRequest.ProtoReflect.Descriptor instead.
func (*DeleteLanguageRequest) Descriptor() ([]byte, []int) {
	return file_contacts_languages_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteLanguageRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteLanguageRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *DeleteLanguageRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

var File_contacts_languages_proto protoreflect.FileDescriptor

var file_contacts_languages_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0x88, 0x03, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0xca,
	0x3e, 0x07, 0xfa, 0x02, 0x04, 0x65, 0x74, 0x61, 0x67, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x3a, 0x2a, 0x92, 0x41, 0x27,
	0x0a, 0x07, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x32, 0x1c, 0x7b, 0x22, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x74, 0x61, 0x67,
	0x22, 0x3a, 0x22, 0x75, 0x6b, 0x22, 0x7d, 0x22, 0xc6, 0x03, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x3a, 0xdd, 0x02, 0x92, 0x41, 0xd9, 0x02, 0x32, 0xd6, 0x02, 0x7b, 0x22, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x37, 0x22, 0x2c, 0x22, 0x76, 0x65,
	0x72, 0x22, 0x3a, 0x22, 0x33, 0x22, 0x2c, 0x22, 0x65, 0x74, 0x61, 0x67, 0x22, 0x3a, 0x22, 0x46,
	0x71, 0x61, 0x54, 0x43, 0x44, 0x4c, 0x62, 0x68, 0x70, 0x61, 0x6f, 0x55, 0x72, 0x65, 0x4c, 0x22,
	0x2c, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x31,
	0x36, 0x38, 0x30, 0x32, 0x36, 0x38, 0x35, 0x30, 0x37, 0x36, 0x39, 0x38, 0x22, 0x2c, 0x22, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22,
	0x3a, 0x22, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f,
	0x68, 0x6e, 0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38, 0x30, 0x35, 0x31, 0x36, 0x37, 0x38,
	0x35, 0x33, 0x35, 0x37, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x22, 0x3a, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x61, 0x6e, 0x65,
	0x20, 0x4c, 0x65, 0x65, 0x20, 0x28, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x29, 0x22, 0x7d,
	0x2c, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x22, 0x74, 0x61, 0x67, 0x22, 0x3a, 0x22, 0x75, 0x6b, 0x2d, 0x55, 0x41, 0x22, 0x2c, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x22, 0x75, 0x6b, 0x22, 0x2c, 0x22, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x3a, 0x22, 0x55, 0x6b, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x22, 0x2c, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x22, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x97, 0xd0,
	0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x55, 0x41, 0x22, 0x2c, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x22, 0x3a, 0x22, 0x43, 0x79, 0x72, 0x6c, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x3a, 0x31, 0x2c, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d,
	0x22, 0xb3, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x5b,
	0x22, 0x75, 0x6b, 0x22, 0x2c, 0x22, 0x65, 0x6e, 0x2d, 0x47, 0x42, 0x22, 0x2c, 0x22, 0x70, 0x6c,
	0x22, 0x5d, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0xa6, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x5b, 0x22, 0x75, 0x6b, 0x22, 0x2c, 0x22, 0x65,
	0x6e, 0x2d, 0x47, 0x42, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x22, 0x5d, 0xa8, 0x01, 0x01, 0xb0, 0x01,
	0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x5b, 0x22, 0x75, 0x6b, 0x22, 0x2c, 0x22, 0x65, 0x6e, 0x2d, 0x47, 0x42, 0x22, 0x2c, 0x22, 0x70,
	0x6c, 0x22, 0x5d, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x06,
	0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x3a, 0x19, 0x92, 0x41,
	0x16, 0x0a, 0x14, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x32, 0xac, 0x07, 0x0a,
	0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0xd3, 0x01, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6e, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x36, 0x3a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x32, 0x2d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74,
	0x61, 0x67, 0x7d, 0x1a, 0x2d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61,
	0x67, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x2a, 0x27, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x42, 0xa9, 0x01, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x42, 0x0e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x3b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58, 0xaa, 0x02,
	0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0xca, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1c, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_contacts_languages_proto_rawDescOnce sync.Once
	file_contacts_languages_proto_rawDescData []byte
)

func file_contacts_languages_proto_rawDescGZIP() []byte {
	file_contacts_languages_proto_rawDescOnce.Do(func() {
		file_contacts_languages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_contacts_languages_proto_rawDesc), len(file_contacts_languages_proto_rawDesc)))
	})
	return file_contacts_languages_proto_rawDescData
}

var file_contacts_languages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_contacts_languages_proto_goTypes = []any{
	(*LanguageTag)(nil),            // 0: webitel.contacts.LanguageTag
	(*Language)(nil),               // 1: webitel.contacts.Language
	(*InputLanguage)(nil),          // 2: webitel.contacts.InputLanguage
	(*LanguageList)(nil),           // 3: webitel.contacts.LanguageList
	(*SearchLanguagesRequest)(nil), // 4: webitel.contacts.SearchLanguagesRequest
	(*CreateLanguagesRequest)(nil), // 5: webitel.contacts.CreateLanguagesRequest
	(*UpdateLanguagesRequest)(nil), // 6: webitel.contacts.UpdateLanguagesRequest
	(*UpdateLanguageRequest)(nil),  // 7: webitel.contacts.UpdateLanguageRequest
	(*DeleteLanguagesRequest)(nil), // 8: webitel.contacts.DeleteLanguagesRequest
	(*DeleteLanguageRequest)(nil),  // 9: webitel.contacts.DeleteLanguageRequest
	(*Lookup)(nil),                 // 10: webitel.contacts.Lookup
	(*wrapperspb.BoolValue)(nil),   // 11: google.protobuf.BoolValue
}
var file_contacts_languages_proto_depIdxs = []int32{
	10, // 0: webitel.contacts.Language.created_by:type_name -> webitel.contacts.Lookup
	10, // 1: webitel.contacts.Language.updated_by:type_name -> webitel.contacts.Lookup
	1,  // 2: webitel.contacts.LanguageList.data:type_name -> webitel.contacts.Language
	11, // 3: webitel.contacts.SearchLanguagesRequest.primary:type_name -> google.protobuf.BoolValue
	2,  // 4: webitel.contacts.CreateLanguagesRequest.input:type_name -> webitel.contacts.InputLanguage
	2,  // 5: webitel.contacts.UpdateLanguagesRequest.input:type_name -> webitel.contacts.InputLanguage
	2,  // 6: webitel.contacts.UpdateLanguageRequest.input:type_name -> webitel.contacts.InputLanguage
	4,  // 7: webitel.contacts.Languages.GetContactLanguages:input_type -> webitel.contacts.SearchLanguagesRequest
	5,  // 8: webitel.contacts.Languages.AddContactLanguages:input_type -> webitel.contacts.CreateLanguagesRequest
	6,  // 9: webitel.contacts.Languages.SetContactLanguages:input_type -> webitel.contacts.UpdateLanguagesRequest
	7,  // 10: webitel.contacts.Languages.SetContactLanguage:input_type -> webitel.contacts.UpdateLanguageRequest
	8,  // 11: webitel.contacts.Languages.DelContactLanguages:input_type -> webitel.contacts.DeleteLanguagesRequest
	9,  // 12: webitel.contacts.Languages.DelContactLanguage:input_type -> webitel.contacts.DeleteLanguageRequest
	3,  // 13: webitel.contacts.Languages.GetContactLanguages:output_type -> webitel.contacts.LanguageList
	3,  // 14: webitel.contacts.Languages.AddContactLanguages:output_type -> webitel.contacts.LanguageList
	3,  // 15: webitel.contacts.Languages.SetContactLanguages:output_type -> webitel.contacts.LanguageList
	3,  // 16: webitel.contacts.Languages.SetContactLanguage:output_type -> webitel.contacts.LanguageList
	3,  // 17: webitel.contacts.Languages.DelContactLanguages:output_type -> webitel.contacts.LanguageList
	1,  // 18: webitel.contacts.Languages.DelContactLanguage:output_type -> webitel.contacts.Language
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_contacts_languages_proto_init() }
func file_contacts_languages_proto_init() {
	if File_contacts_languages_proto != nil {
		return
	}
	file_contacts_fields_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_contacts_languages_proto_rawDesc), len(file_contacts_languages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contacts_languages_proto_goTypes,
		DependencyIndexes: file_contacts_languages_proto_depIdxs,
		MessageInfos:      file_contacts_languages_proto_msgTypes,
	}.Build()
	File_contacts_languages_proto = out.File
	file_contacts_languages_proto_goTypes = nil
	file_contacts_languages_proto_depIdxs = nil
}
