// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: related_case.proto

package cases

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	general "github.com/webitel/flow_manager/gen/general"
	_ "github.com/webitel/webitel-go-kit/cmd/protoc-gen-go-webitel/gen/go/proto/webitel"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for relation types between cases.
type RelationType int32

const (
	RelationType_RELATION_TYPE_UNSPECIFIED RelationType = 0
	RelationType_DUPLICATES                RelationType = 1
	RelationType_IS_DUPLICATED_BY          RelationType = 2
	RelationType_BLOCKS                    RelationType = 3
	RelationType_IS_BLOCKED_BY             RelationType = 4
	RelationType_CAUSES                    RelationType = 5
	RelationType_IS_CAUSED_BY              RelationType = 6
	RelationType_IS_CHILD_OF               RelationType = 7
	RelationType_IS_PARENT_OF              RelationType = 8
	RelationType_RELATES_TO                RelationType = 9
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0: "RELATION_TYPE_UNSPECIFIED",
		1: "DUPLICATES",
		2: "IS_DUPLICATED_BY",
		3: "BLOCKS",
		4: "IS_BLOCKED_BY",
		5: "CAUSES",
		6: "IS_CAUSED_BY",
		7: "IS_CHILD_OF",
		8: "IS_PARENT_OF",
		9: "RELATES_TO",
	}
	RelationType_value = map[string]int32{
		"RELATION_TYPE_UNSPECIFIED": 0,
		"DUPLICATES":                1,
		"IS_DUPLICATED_BY":          2,
		"BLOCKS":                    3,
		"IS_BLOCKED_BY":             4,
		"CAUSES":                    5,
		"IS_CAUSED_BY":              6,
		"IS_CHILD_OF":               7,
		"IS_PARENT_OF":              8,
		"RELATES_TO":                9,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_related_case_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_related_case_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{0}
}

// RelatedCaseLookup is created specifically to include the subject field.
type RelatedCaseLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// subject
	Subject string `protobuf:"bytes,43,opt,name=subject,proto3" json:"subject,omitempty"`
	// ver
	Ver int32 `protobuf:"varint,5,opt,name=ver,proto3" json:"ver,omitempty"`
	// colour ( calculated by attached priority )
	Color string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *RelatedCaseLookup) Reset() {
	*x = RelatedCaseLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedCaseLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCaseLookup) ProtoMessage() {}

func (x *RelatedCaseLookup) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCaseLookup.ProtoReflect.Descriptor instead.
func (*RelatedCaseLookup) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{0}
}

func (x *RelatedCaseLookup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelatedCaseLookup) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *RelatedCaseLookup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelatedCaseLookup) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RelatedCaseLookup) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *RelatedCaseLookup) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// Represents a related case with its relationship details.
type RelatedCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the related case.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Etag for the related case entity.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Version number of the related case, used for concurrency control.
	Ver int32 `protobuf:"varint,3,opt,name=ver,proto3" json:"ver,omitempty"`
	// User who created the relation.
	CreatedBy *general.Lookup `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp (in milliseconds) of when the relation was created.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// User who last updated the relation.
	UpdatedBy *general.Lookup `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Timestamp (in milliseconds) of the last update.
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Relation type between cases.
	RelationType RelationType `protobuf:"varint,8,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	// Related case details.
	RelatedCase *RelatedCaseLookup `protobuf:"bytes,9,opt,name=related_case,json=relatedCase,proto3" json:"related_case,omitempty"`
	// Primary case details.
	PrimaryCase *RelatedCaseLookup `protobuf:"bytes,10,opt,name=primary_case,json=primaryCase,proto3" json:"primary_case,omitempty"`
}

func (x *RelatedCase) Reset() {
	*x = RelatedCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCase) ProtoMessage() {}

func (x *RelatedCase) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCase.ProtoReflect.Descriptor instead.
func (*RelatedCase) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{1}
}

func (x *RelatedCase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelatedCase) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *RelatedCase) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *RelatedCase) GetCreatedBy() *general.Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *RelatedCase) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RelatedCase) GetUpdatedBy() *general.Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *RelatedCase) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RelatedCase) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *RelatedCase) GetRelatedCase() *RelatedCaseLookup {
	if x != nil {
		return x.RelatedCase
	}
	return nil
}

func (x *RelatedCase) GetPrimaryCase() *RelatedCaseLookup {
	if x != nil {
		return x.PrimaryCase
	}
	return nil
}

// Paginated list of related cases.
type RelatedCaseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current page number.
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Flag to indicate if more pages are available.
	Next bool `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	// List of related cases on the current page.
	Data []*RelatedCase `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RelatedCaseList) Reset() {
	*x = RelatedCaseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedCaseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCaseList) ProtoMessage() {}

func (x *RelatedCaseList) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCaseList.ProtoReflect.Descriptor instead.
func (*RelatedCaseList) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{2}
}

func (x *RelatedCaseList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RelatedCaseList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *RelatedCaseList) GetData() []*RelatedCase {
	if x != nil {
		return x.Data
	}
	return nil
}

// Input for creating or updating a related case.
type InputRelatedCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relation type.
	RelationType RelationType `protobuf:"varint,1,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	// Primary case details.
	PrimaryCase *general.Lookup `protobuf:"bytes,2,opt,name=primary_case,json=primaryCase,proto3" json:"primary_case,omitempty"`
	// Related case details.
	RelatedCase *general.Lookup `protobuf:"bytes,3,opt,name=related_case,json=relatedCase,proto3" json:"related_case,omitempty"`
	// Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token.
	UserID *general.Lookup `protobuf:"bytes,20,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *InputRelatedCase) Reset() {
	*x = InputRelatedCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputRelatedCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRelatedCase) ProtoMessage() {}

func (x *InputRelatedCase) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRelatedCase.ProtoReflect.Descriptor instead.
func (*InputRelatedCase) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{3}
}

func (x *InputRelatedCase) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *InputRelatedCase) GetPrimaryCase() *general.Lookup {
	if x != nil {
		return x.PrimaryCase
	}
	return nil
}

func (x *InputRelatedCase) GetRelatedCase() *general.Lookup {
	if x != nil {
		return x.RelatedCase
	}
	return nil
}

func (x *InputRelatedCase) GetUserID() *general.Lookup {
	if x != nil {
		return x.UserID
	}
	return nil
}

// Request to locate a related case.
type LocateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the related case.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Fields to return in the response.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Primary case identifier.
	PrimaryCaseEtag string `protobuf:"bytes,3,opt,name=primary_case_etag,json=primaryCaseEtag,proto3" json:"primary_case_etag,omitempty"`
}

func (x *LocateRelatedCaseRequest) Reset() {
	*x = LocateRelatedCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateRelatedCaseRequest) ProtoMessage() {}

func (x *LocateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*LocateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{4}
}

func (x *LocateRelatedCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *LocateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LocateRelatedCaseRequest) GetPrimaryCaseEtag() string {
	if x != nil {
		return x.PrimaryCaseEtag
	}
	return ""
}

// Input for creating a related case.
type CreateInputRelatedCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Related case details.
	RelatedCase *general.Lookup `protobuf:"bytes,2,opt,name=related_case,json=relatedCase,proto3" json:"related_case,omitempty"`
	// Relation type between the cases.
	RelationType RelationType `protobuf:"varint,3,opt,name=relation_type,json=relationType,proto3,enum=webitel.cases.RelationType" json:"relation_type,omitempty"`
	// Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token.
	UserID *general.Lookup `protobuf:"bytes,20,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CreateInputRelatedCase) Reset() {
	*x = CreateInputRelatedCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInputRelatedCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInputRelatedCase) ProtoMessage() {}

func (x *CreateInputRelatedCase) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInputRelatedCase.ProtoReflect.Descriptor instead.
func (*CreateInputRelatedCase) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{5}
}

func (x *CreateInputRelatedCase) GetRelatedCase() *general.Lookup {
	if x != nil {
		return x.RelatedCase
	}
	return nil
}

func (x *CreateInputRelatedCase) GetRelationType() RelationType {
	if x != nil {
		return x.RelationType
	}
	return RelationType_RELATION_TYPE_UNSPECIFIED
}

func (x *CreateInputRelatedCase) GetUserID() *general.Lookup {
	if x != nil {
		return x.UserID
	}
	return nil
}

// Request to create a related case.
type CreateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary case details.
	PrimaryCaseEtag string `protobuf:"bytes,1,opt,name=primary_case_etag,json=primaryCaseEtag,proto3" json:"primary_case_etag,omitempty"`
	// Input data for the related case.
	Input *CreateInputRelatedCase `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// Fields to include in the response.
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *CreateRelatedCaseRequest) Reset() {
	*x = CreateRelatedCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedCaseRequest) ProtoMessage() {}

func (x *CreateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRelatedCaseRequest) GetPrimaryCaseEtag() string {
	if x != nil {
		return x.PrimaryCaseEtag
	}
	return ""
}

func (x *CreateRelatedCaseRequest) GetInput() *CreateInputRelatedCase {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Request to update a related case.
type UpdateRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the related case to update.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Input data for the related case update.
	Input *InputRelatedCase `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// Fields to include in the response.
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	XJsonMask []string `protobuf:"bytes,4,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
}

func (x *UpdateRelatedCaseRequest) Reset() {
	*x = UpdateRelatedCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedCaseRequest) ProtoMessage() {}

func (x *UpdateRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRelatedCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *UpdateRelatedCaseRequest) GetInput() *InputRelatedCase {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UpdateRelatedCaseRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateRelatedCaseRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

// Request to delete a related case.
type DeleteRelatedCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the related case to delete.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Etag or ID of the primary case
	PrimaryCaseEtag string `protobuf:"bytes,2,opt,name=primary_case_etag,json=primaryCaseEtag,proto3" json:"primary_case_etag,omitempty"`
}

func (x *DeleteRelatedCaseRequest) Reset() {
	*x = DeleteRelatedCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelatedCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedCaseRequest) ProtoMessage() {}

func (x *DeleteRelatedCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelatedCaseRequest) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRelatedCaseRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DeleteRelatedCaseRequest) GetPrimaryCaseEtag() string {
	if x != nil {
		return x.PrimaryCaseEtag
	}
	return ""
}

// Request to list related cases.
type ListRelatedCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Case ID for which related cases are requested.
	PrimaryCaseEtag string `protobuf:"bytes,1,opt,name=primary_case_etag,json=primaryCaseEtag,proto3" json:"primary_case_etag,omitempty"`
	// Page number for pagination.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Number of related cases per page.
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Query string for search.
	Q string `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	// Sorting order.
	Sort string `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	// Fields to return for each related case.
	Fields []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	// Filter by ids
	Ids []string `protobuf:"bytes,7,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListRelatedCasesRequest) Reset() {
	*x = ListRelatedCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_related_case_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelatedCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelatedCasesRequest) ProtoMessage() {}

func (x *ListRelatedCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_related_case_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelatedCasesRequest.ProtoReflect.Descriptor instead.
func (*ListRelatedCasesRequest) Descriptor() ([]byte, []int) {
	return file_related_case_proto_rawDescGZIP(), []int{9}
}

func (x *ListRelatedCasesRequest) GetPrimaryCaseEtag() string {
	if x != nil {
		return x.PrimaryCaseEtag
	}
	return ""
}

func (x *ListRelatedCasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRelatedCasesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListRelatedCasesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *ListRelatedCasesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListRelatedCasesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListRelatedCasesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_related_case_proto protoreflect.FileDescriptor

var file_related_case_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x1a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xad, 0x03, 0x0a, 0x0b, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a,
	0x18, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x73, 0x65, 0x45, 0x74, 0x61,
	0x67, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22,
	0xb7, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x73, 0x65, 0x45, 0x74,
	0x61, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74,
	0x61, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01,
	0x02, 0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x0c, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x68, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x74, 0x61, 0x67, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x73, 0x65, 0x45, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x2a, 0xc3, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x55, 0x53, 0x45, 0x53, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x53, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x54, 0x4f,
	0x10, 0x09, 0x32, 0xf1, 0x07, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x60,
	0x92, 0x41, 0x28, 0x12, 0x26, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x90, 0xb5, 0x18, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d,
	0x12, 0xad, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x53, 0x92, 0x41, 0x1b,
	0x12, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x73, 0x65, 0x90, 0xb5, 0x18, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x22, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x12, 0xf7, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41,
	0x21, 0x12, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61,
	0x73, 0x65, 0x90, 0xb5, 0x18, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x3a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5a, 0x36, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x2d, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x1a, 0x2d, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x73, 0x65, 0x22, 0x58, 0x92, 0x41, 0x20, 0x12, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x73, 0x65, 0x90, 0xb5, 0x18, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x7d,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12,
	0xb9, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x92, 0x41,
	0x2c, 0x12, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x61, 0x73, 0x65, 0x90, 0xb5, 0x18,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x74,
	0x61, 0x67, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x09, 0x8a, 0xb5, 0x18,
	0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x42, 0xa4, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x42, 0x10, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x3b, 0x63, 0x61, 0x73, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58,
	0xaa, 0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73,
	0xca, 0x02, 0x0d, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73,
	0xe2, 0x02, 0x19, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x57,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x3a, 0x3a, 0x43, 0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_related_case_proto_rawDescOnce sync.Once
	file_related_case_proto_rawDescData = file_related_case_proto_rawDesc
)

func file_related_case_proto_rawDescGZIP() []byte {
	file_related_case_proto_rawDescOnce.Do(func() {
		file_related_case_proto_rawDescData = protoimpl.X.CompressGZIP(file_related_case_proto_rawDescData)
	})
	return file_related_case_proto_rawDescData
}

var file_related_case_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_related_case_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_related_case_proto_goTypes = []interface{}{
	(RelationType)(0),                // 0: webitel.cases.RelationType
	(*RelatedCaseLookup)(nil),        // 1: webitel.cases.RelatedCaseLookup
	(*RelatedCase)(nil),              // 2: webitel.cases.RelatedCase
	(*RelatedCaseList)(nil),          // 3: webitel.cases.RelatedCaseList
	(*InputRelatedCase)(nil),         // 4: webitel.cases.InputRelatedCase
	(*LocateRelatedCaseRequest)(nil), // 5: webitel.cases.LocateRelatedCaseRequest
	(*CreateInputRelatedCase)(nil),   // 6: webitel.cases.CreateInputRelatedCase
	(*CreateRelatedCaseRequest)(nil), // 7: webitel.cases.CreateRelatedCaseRequest
	(*UpdateRelatedCaseRequest)(nil), // 8: webitel.cases.UpdateRelatedCaseRequest
	(*DeleteRelatedCaseRequest)(nil), // 9: webitel.cases.DeleteRelatedCaseRequest
	(*ListRelatedCasesRequest)(nil),  // 10: webitel.cases.ListRelatedCasesRequest
	(*general.Lookup)(nil),           // 11: general.Lookup
}
var file_related_case_proto_depIdxs = []int32{
	11, // 0: webitel.cases.RelatedCase.created_by:type_name -> general.Lookup
	11, // 1: webitel.cases.RelatedCase.updated_by:type_name -> general.Lookup
	0,  // 2: webitel.cases.RelatedCase.relation_type:type_name -> webitel.cases.RelationType
	1,  // 3: webitel.cases.RelatedCase.related_case:type_name -> webitel.cases.RelatedCaseLookup
	1,  // 4: webitel.cases.RelatedCase.primary_case:type_name -> webitel.cases.RelatedCaseLookup
	2,  // 5: webitel.cases.RelatedCaseList.data:type_name -> webitel.cases.RelatedCase
	0,  // 6: webitel.cases.InputRelatedCase.relation_type:type_name -> webitel.cases.RelationType
	11, // 7: webitel.cases.InputRelatedCase.primary_case:type_name -> general.Lookup
	11, // 8: webitel.cases.InputRelatedCase.related_case:type_name -> general.Lookup
	11, // 9: webitel.cases.InputRelatedCase.userID:type_name -> general.Lookup
	11, // 10: webitel.cases.CreateInputRelatedCase.related_case:type_name -> general.Lookup
	0,  // 11: webitel.cases.CreateInputRelatedCase.relation_type:type_name -> webitel.cases.RelationType
	11, // 12: webitel.cases.CreateInputRelatedCase.userID:type_name -> general.Lookup
	6,  // 13: webitel.cases.CreateRelatedCaseRequest.input:type_name -> webitel.cases.CreateInputRelatedCase
	4,  // 14: webitel.cases.UpdateRelatedCaseRequest.input:type_name -> webitel.cases.InputRelatedCase
	5,  // 15: webitel.cases.RelatedCases.LocateRelatedCase:input_type -> webitel.cases.LocateRelatedCaseRequest
	7,  // 16: webitel.cases.RelatedCases.CreateRelatedCase:input_type -> webitel.cases.CreateRelatedCaseRequest
	8,  // 17: webitel.cases.RelatedCases.UpdateRelatedCase:input_type -> webitel.cases.UpdateRelatedCaseRequest
	9,  // 18: webitel.cases.RelatedCases.DeleteRelatedCase:input_type -> webitel.cases.DeleteRelatedCaseRequest
	10, // 19: webitel.cases.RelatedCases.ListRelatedCases:input_type -> webitel.cases.ListRelatedCasesRequest
	2,  // 20: webitel.cases.RelatedCases.LocateRelatedCase:output_type -> webitel.cases.RelatedCase
	2,  // 21: webitel.cases.RelatedCases.CreateRelatedCase:output_type -> webitel.cases.RelatedCase
	2,  // 22: webitel.cases.RelatedCases.UpdateRelatedCase:output_type -> webitel.cases.RelatedCase
	2,  // 23: webitel.cases.RelatedCases.DeleteRelatedCase:output_type -> webitel.cases.RelatedCase
	3,  // 24: webitel.cases.RelatedCases.ListRelatedCases:output_type -> webitel.cases.RelatedCaseList
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_related_case_proto_init() }
func file_related_case_proto_init() {
	if File_related_case_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_related_case_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedCaseLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedCaseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputRelatedCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateRelatedCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInputRelatedCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelatedCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelatedCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_related_case_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelatedCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_related_case_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_related_case_proto_goTypes,
		DependencyIndexes: file_related_case_proto_depIdxs,
		EnumInfos:         file_related_case_proto_enumTypes,
		MessageInfos:      file_related_case_proto_msgTypes,
	}.Build()
	File_related_case_proto = out.File
	file_related_case_proto_rawDesc = nil
	file_related_case_proto_goTypes = nil
	file_related_case_proto_depIdxs = nil
}
