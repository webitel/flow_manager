// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: priority.proto

package cases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Priorities_ListPriorities_FullMethodName = "/webitel.cases.Priorities/ListPriorities"
	Priorities_CreatePriority_FullMethodName = "/webitel.cases.Priorities/CreatePriority"
	Priorities_UpdatePriority_FullMethodName = "/webitel.cases.Priorities/UpdatePriority"
	Priorities_DeletePriority_FullMethodName = "/webitel.cases.Priorities/DeletePriority"
	Priorities_LocatePriority_FullMethodName = "/webitel.cases.Priorities/LocatePriority"
)

// PrioritiesClient is the client API for Priorities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrioritiesClient interface {
	// RPC method to list or search priorities
	ListPriorities(ctx context.Context, in *ListPriorityRequest, opts ...grpc.CallOption) (*PriorityList, error)
	// RPC method to create a new priority
	CreatePriority(ctx context.Context, in *CreatePriorityRequest, opts ...grpc.CallOption) (*Priority, error)
	// RPC method to update an existing priority
	UpdatePriority(ctx context.Context, in *UpdatePriorityRequest, opts ...grpc.CallOption) (*Priority, error)
	// RPC method to delete an existing priority
	DeletePriority(ctx context.Context, in *DeletePriorityRequest, opts ...grpc.CallOption) (*Priority, error)
	// RPC method to locate a specific priority by ID
	LocatePriority(ctx context.Context, in *LocatePriorityRequest, opts ...grpc.CallOption) (*LocatePriorityResponse, error)
}

type prioritiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPrioritiesClient(cc grpc.ClientConnInterface) PrioritiesClient {
	return &prioritiesClient{cc}
}

func (c *prioritiesClient) ListPriorities(ctx context.Context, in *ListPriorityRequest, opts ...grpc.CallOption) (*PriorityList, error) {
	out := new(PriorityList)
	err := c.cc.Invoke(ctx, Priorities_ListPriorities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesClient) CreatePriority(ctx context.Context, in *CreatePriorityRequest, opts ...grpc.CallOption) (*Priority, error) {
	out := new(Priority)
	err := c.cc.Invoke(ctx, Priorities_CreatePriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesClient) UpdatePriority(ctx context.Context, in *UpdatePriorityRequest, opts ...grpc.CallOption) (*Priority, error) {
	out := new(Priority)
	err := c.cc.Invoke(ctx, Priorities_UpdatePriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesClient) DeletePriority(ctx context.Context, in *DeletePriorityRequest, opts ...grpc.CallOption) (*Priority, error) {
	out := new(Priority)
	err := c.cc.Invoke(ctx, Priorities_DeletePriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesClient) LocatePriority(ctx context.Context, in *LocatePriorityRequest, opts ...grpc.CallOption) (*LocatePriorityResponse, error) {
	out := new(LocatePriorityResponse)
	err := c.cc.Invoke(ctx, Priorities_LocatePriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrioritiesServer is the server API for Priorities service.
// All implementations must embed UnimplementedPrioritiesServer
// for forward compatibility
type PrioritiesServer interface {
	// RPC method to list or search priorities
	ListPriorities(context.Context, *ListPriorityRequest) (*PriorityList, error)
	// RPC method to create a new priority
	CreatePriority(context.Context, *CreatePriorityRequest) (*Priority, error)
	// RPC method to update an existing priority
	UpdatePriority(context.Context, *UpdatePriorityRequest) (*Priority, error)
	// RPC method to delete an existing priority
	DeletePriority(context.Context, *DeletePriorityRequest) (*Priority, error)
	// RPC method to locate a specific priority by ID
	LocatePriority(context.Context, *LocatePriorityRequest) (*LocatePriorityResponse, error)
	mustEmbedUnimplementedPrioritiesServer()
}

// UnimplementedPrioritiesServer must be embedded to have forward compatible implementations.
type UnimplementedPrioritiesServer struct {
}

func (UnimplementedPrioritiesServer) ListPriorities(context.Context, *ListPriorityRequest) (*PriorityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPriorities not implemented")
}
func (UnimplementedPrioritiesServer) CreatePriority(context.Context, *CreatePriorityRequest) (*Priority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePriority not implemented")
}
func (UnimplementedPrioritiesServer) UpdatePriority(context.Context, *UpdatePriorityRequest) (*Priority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriority not implemented")
}
func (UnimplementedPrioritiesServer) DeletePriority(context.Context, *DeletePriorityRequest) (*Priority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePriority not implemented")
}
func (UnimplementedPrioritiesServer) LocatePriority(context.Context, *LocatePriorityRequest) (*LocatePriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocatePriority not implemented")
}
func (UnimplementedPrioritiesServer) mustEmbedUnimplementedPrioritiesServer() {}

// UnsafePrioritiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrioritiesServer will
// result in compilation errors.
type UnsafePrioritiesServer interface {
	mustEmbedUnimplementedPrioritiesServer()
}

func RegisterPrioritiesServer(s grpc.ServiceRegistrar, srv PrioritiesServer) {
	s.RegisterService(&Priorities_ServiceDesc, srv)
}

func _Priorities_ListPriorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesServer).ListPriorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priorities_ListPriorities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesServer).ListPriorities(ctx, req.(*ListPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Priorities_CreatePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesServer).CreatePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priorities_CreatePriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesServer).CreatePriority(ctx, req.(*CreatePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Priorities_UpdatePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesServer).UpdatePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priorities_UpdatePriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesServer).UpdatePriority(ctx, req.(*UpdatePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Priorities_DeletePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesServer).DeletePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priorities_DeletePriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesServer).DeletePriority(ctx, req.(*DeletePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Priorities_LocatePriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocatePriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesServer).LocatePriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Priorities_LocatePriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesServer).LocatePriority(ctx, req.(*LocatePriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Priorities_ServiceDesc is the grpc.ServiceDesc for Priorities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Priorities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.cases.Priorities",
	HandlerType: (*PrioritiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPriorities",
			Handler:    _Priorities_ListPriorities_Handler,
		},
		{
			MethodName: "CreatePriority",
			Handler:    _Priorities_CreatePriority_Handler,
		},
		{
			MethodName: "UpdatePriority",
			Handler:    _Priorities_UpdatePriority_Handler,
		},
		{
			MethodName: "DeletePriority",
			Handler:    _Priorities_DeletePriority_Handler,
		},
		{
			MethodName: "LocatePriority",
			Handler:    _Priorities_LocatePriority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "priority.proto",
}
