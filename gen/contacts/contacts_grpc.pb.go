// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: contacts/contacts.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Contacts_SearchContacts_FullMethodName   = "/webitel.contacts.Contacts/SearchContacts"
	Contacts_SearchContactsNA_FullMethodName = "/webitel.contacts.Contacts/SearchContactsNA"
	Contacts_LocateContact_FullMethodName    = "/webitel.contacts.Contacts/LocateContact"
	Contacts_CreateContact_FullMethodName    = "/webitel.contacts.Contacts/CreateContact"
	Contacts_UpdateContact_FullMethodName    = "/webitel.contacts.Contacts/UpdateContact"
	Contacts_DeleteContact_FullMethodName    = "/webitel.contacts.Contacts/DeleteContact"
)

// ContactsClient is the client API for Contacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsClient interface {
	// Search for Contact(s)
	SearchContacts(ctx context.Context, in *SearchContactsRequest, opts ...grpc.CallOption) (*ContactList, error)
	SearchContactsNA(ctx context.Context, in *SearchContactsNARequest, opts ...grpc.CallOption) (*ContactList, error)
	// Locate Contact source
	LocateContact(ctx context.Context, in *LocateContactRequest, opts ...grpc.CallOption) (*Contact, error)
	// Create NEW Contact
	CreateContact(ctx context.Context, in *InputContactRequest, opts ...grpc.CallOption) (*Contact, error)
	// NEW Update of the Contact source
	UpdateContact(ctx context.Context, in *InputContactRequest, opts ...grpc.CallOption) (*Contact, error)
	// Remove Contact source
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*Contact, error)
}

type contactsClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsClient(cc grpc.ClientConnInterface) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) SearchContacts(ctx context.Context, in *SearchContactsRequest, opts ...grpc.CallOption) (*ContactList, error) {
	out := new(ContactList)
	err := c.cc.Invoke(ctx, Contacts_SearchContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) SearchContactsNA(ctx context.Context, in *SearchContactsNARequest, opts ...grpc.CallOption) (*ContactList, error) {
	out := new(ContactList)
	err := c.cc.Invoke(ctx, Contacts_SearchContactsNA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) LocateContact(ctx context.Context, in *LocateContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, Contacts_LocateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) CreateContact(ctx context.Context, in *InputContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, Contacts_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) UpdateContact(ctx context.Context, in *InputContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, Contacts_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, Contacts_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServer is the server API for Contacts service.
// All implementations must embed UnimplementedContactsServer
// for forward compatibility
type ContactsServer interface {
	// Search for Contact(s)
	SearchContacts(context.Context, *SearchContactsRequest) (*ContactList, error)
	SearchContactsNA(context.Context, *SearchContactsNARequest) (*ContactList, error)
	// Locate Contact source
	LocateContact(context.Context, *LocateContactRequest) (*Contact, error)
	// Create NEW Contact
	CreateContact(context.Context, *InputContactRequest) (*Contact, error)
	// NEW Update of the Contact source
	UpdateContact(context.Context, *InputContactRequest) (*Contact, error)
	// Remove Contact source
	DeleteContact(context.Context, *DeleteContactRequest) (*Contact, error)
	mustEmbedUnimplementedContactsServer()
}

// UnimplementedContactsServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServer struct {
}

func (UnimplementedContactsServer) SearchContacts(context.Context, *SearchContactsRequest) (*ContactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContacts not implemented")
}
func (UnimplementedContactsServer) SearchContactsNA(context.Context, *SearchContactsNARequest) (*ContactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContactsNA not implemented")
}
func (UnimplementedContactsServer) LocateContact(context.Context, *LocateContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateContact not implemented")
}
func (UnimplementedContactsServer) CreateContact(context.Context, *InputContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactsServer) UpdateContact(context.Context, *InputContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedContactsServer) DeleteContact(context.Context, *DeleteContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactsServer) mustEmbedUnimplementedContactsServer() {}

// UnsafeContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServer will
// result in compilation errors.
type UnsafeContactsServer interface {
	mustEmbedUnimplementedContactsServer()
}

func RegisterContactsServer(s grpc.ServiceRegistrar, srv ContactsServer) {
	s.RegisterService(&Contacts_ServiceDesc, srv)
}

func _Contacts_SearchContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).SearchContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_SearchContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).SearchContacts(ctx, req.(*SearchContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_SearchContactsNA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContactsNARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).SearchContactsNA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_SearchContactsNA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).SearchContactsNA(ctx, req.(*SearchContactsNARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_LocateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).LocateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_LocateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).LocateContact(ctx, req.(*LocateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).CreateContact(ctx, req.(*InputContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).UpdateContact(ctx, req.(*InputContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contacts_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Contacts_ServiceDesc is the grpc.ServiceDesc for Contacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchContacts",
			Handler:    _Contacts_SearchContacts_Handler,
		},
		{
			MethodName: "SearchContactsNA",
			Handler:    _Contacts_SearchContactsNA_Handler,
		},
		{
			MethodName: "LocateContact",
			Handler:    _Contacts_LocateContact_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _Contacts_CreateContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Contacts_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Contacts_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/contacts.proto",
}
