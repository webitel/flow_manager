// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: contacts/comments.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Contact's internal Comment.
// Output purpose only
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the Comment. Never changes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the latest update. Numeric sequence.
	Ver int32 `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The user who created this Field.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp(milli) of the Field creation.
	CreatedBy *Lookup `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp(milli) of the last Field update.
	// Take part in Etag generation.
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The user who performed last Update.
	UpdatedBy *Lookup `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Rich Text, multi-line[d] string value.
	Text string `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	// Styles of the text components.
	Format []*Comment_Format `protobuf:"bytes,12,rep,name=format,proto3" json:"format,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Comment) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Comment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Comment) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Comment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Comment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Comment) GetFormat() []*Comment_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

type InputComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the latest version of an existing resorce.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// NEW Text of the comment.
	Text string `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	// NEW Text components styling format.
	Format []*Comment_Format `protobuf:"bytes,12,rep,name=format,proto3" json:"format,omitempty"`
}

func (x *InputComment) Reset() {
	*x = InputComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputComment) ProtoMessage() {}

func (x *InputComment) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputComment.ProtoReflect.Descriptor instead.
func (*InputComment) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{1}
}

func (x *InputComment) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InputComment) GetFormat() []*Comment_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

// Comment dataset.
type CommentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment dataset page.
	Data []*Comment `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// The page number of the partial result.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Indicates that this is a partial result.
	// More data available upon query: ?size=${data.len}&page=${page++}
	Next bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *CommentList) Reset() {
	*x = CommentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentList) ProtoMessage() {}

func (x *CommentList) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentList.ProtoReflect.Descriptor instead.
func (*CommentList) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{2}
}

func (x *CommentList) GetData() []*Comment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommentList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CommentList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

type Comment_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset text runes count.
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Length text runes count.
	Length int32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// Style Options.
	//
	// Types that are assignable to Style:
	//
	//	*Comment_Format_Link_
	//	*Comment_Format_Bold_
	//	*Comment_Format_Italic_
	//	*Comment_Format_Underline_
	//	*Comment_Format_Strikethrough_
	//	*Comment_Format_Monospace_
	//	*Comment_Format_Codeblock_
	Style isComment_Format_Style `protobuf_oneof:"style"`
}

func (x *Comment_Format) Reset() {
	*x = Comment_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format) ProtoMessage() {}

func (x *Comment_Format) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format.ProtoReflect.Descriptor instead.
func (*Comment_Format) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Comment_Format) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Comment_Format) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (m *Comment_Format) GetStyle() isComment_Format_Style {
	if m != nil {
		return m.Style
	}
	return nil
}

func (x *Comment_Format) GetLink() *Comment_Format_Link {
	if x, ok := x.GetStyle().(*Comment_Format_Link_); ok {
		return x.Link
	}
	return nil
}

func (x *Comment_Format) GetBold() *Comment_Format_Bold {
	if x, ok := x.GetStyle().(*Comment_Format_Bold_); ok {
		return x.Bold
	}
	return nil
}

func (x *Comment_Format) GetItalic() *Comment_Format_Italic {
	if x, ok := x.GetStyle().(*Comment_Format_Italic_); ok {
		return x.Italic
	}
	return nil
}

func (x *Comment_Format) GetUnderline() *Comment_Format_Underline {
	if x, ok := x.GetStyle().(*Comment_Format_Underline_); ok {
		return x.Underline
	}
	return nil
}

func (x *Comment_Format) GetStrikethrough() *Comment_Format_Strikethrough {
	if x, ok := x.GetStyle().(*Comment_Format_Strikethrough_); ok {
		return x.Strikethrough
	}
	return nil
}

func (x *Comment_Format) GetMonospace() *Comment_Format_Monospace {
	if x, ok := x.GetStyle().(*Comment_Format_Monospace_); ok {
		return x.Monospace
	}
	return nil
}

func (x *Comment_Format) GetCodeblock() *Comment_Format_Codeblock {
	if x, ok := x.GetStyle().(*Comment_Format_Codeblock_); ok {
		return x.Codeblock
	}
	return nil
}

type isComment_Format_Style interface {
	isComment_Format_Style()
}

type Comment_Format_Link_ struct {
	Link *Comment_Format_Link `protobuf:"bytes,5,opt,name=link,proto3,oneof"`
}

type Comment_Format_Bold_ struct {
	Bold *Comment_Format_Bold `protobuf:"bytes,6,opt,name=bold,proto3,oneof"`
}

type Comment_Format_Italic_ struct {
	Italic *Comment_Format_Italic `protobuf:"bytes,7,opt,name=italic,proto3,oneof"`
}

type Comment_Format_Underline_ struct {
	Underline *Comment_Format_Underline `protobuf:"bytes,8,opt,name=underline,proto3,oneof"`
}

type Comment_Format_Strikethrough_ struct {
	Strikethrough *Comment_Format_Strikethrough `protobuf:"bytes,9,opt,name=strikethrough,proto3,oneof"`
}

type Comment_Format_Monospace_ struct {
	Monospace *Comment_Format_Monospace `protobuf:"bytes,10,opt,name=monospace,proto3,oneof"`
}

type Comment_Format_Codeblock_ struct {
	Codeblock *Comment_Format_Codeblock `protobuf:"bytes,11,opt,name=codeblock,proto3,oneof"`
}

func (*Comment_Format_Link_) isComment_Format_Style() {}

func (*Comment_Format_Bold_) isComment_Format_Style() {}

func (*Comment_Format_Italic_) isComment_Format_Style() {}

func (*Comment_Format_Underline_) isComment_Format_Style() {}

func (*Comment_Format_Strikethrough_) isComment_Format_Style() {}

func (*Comment_Format_Monospace_) isComment_Format_Style() {}

func (*Comment_Format_Codeblock_) isComment_Format_Style() {}

type Comment_Format_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. If text[offset:length] is a regular plaintext, NOT an URL itself !
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Comment_Format_Link) Reset() {
	*x = Comment_Format_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Link) ProtoMessage() {}

func (x *Comment_Format_Link) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Link.ProtoReflect.Descriptor instead.
func (*Comment_Format_Link) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Comment_Format_Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Comment_Format_Bold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Comment_Format_Bold) Reset() {
	*x = Comment_Format_Bold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Bold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Bold) ProtoMessage() {}

func (x *Comment_Format_Bold) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Bold.ProtoReflect.Descriptor instead.
func (*Comment_Format_Bold) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Comment_Format_Italic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Comment_Format_Italic) Reset() {
	*x = Comment_Format_Italic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Italic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Italic) ProtoMessage() {}

func (x *Comment_Format_Italic) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Italic.ProtoReflect.Descriptor instead.
func (*Comment_Format_Italic) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Comment_Format_Underline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Comment_Format_Underline) Reset() {
	*x = Comment_Format_Underline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Underline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Underline) ProtoMessage() {}

func (x *Comment_Format_Underline) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Underline.ProtoReflect.Descriptor instead.
func (*Comment_Format_Underline) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 3}
}

type Comment_Format_Strikethrough struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Comment_Format_Strikethrough) Reset() {
	*x = Comment_Format_Strikethrough{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Strikethrough) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Strikethrough) ProtoMessage() {}

func (x *Comment_Format_Strikethrough) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Strikethrough.ProtoReflect.Descriptor instead.
func (*Comment_Format_Strikethrough) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 4}
}

type Comment_Format_Monospace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Comment_Format_Monospace) Reset() {
	*x = Comment_Format_Monospace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Monospace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Monospace) ProtoMessage() {}

func (x *Comment_Format_Monospace) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Monospace.ProtoReflect.Descriptor instead.
func (*Comment_Format_Monospace) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 5}
}

type Comment_Format_Codeblock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *Comment_Format_Codeblock) Reset() {
	*x = Comment_Format_Codeblock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_comments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment_Format_Codeblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment_Format_Codeblock) ProtoMessage() {}

func (x *Comment_Format_Codeblock) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_comments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment_Format_Codeblock.ProtoReflect.Descriptor instead.
func (*Comment_Format_Codeblock) Descriptor() ([]byte, []int) {
	return file_contacts_comments_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Comment_Format_Codeblock) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

var File_contacts_comments_proto protoreflect.FileDescriptor

var file_contacts_comments_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x0a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x1a, 0xba, 0x05, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x04, 0x62, 0x6f,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x42, 0x6f, 0x6c, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x09, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x4a,
	0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x6f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x6f, 0x6e, 0x6f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x18, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0x06, 0x0a, 0x04, 0x42, 0x6f, 0x6c, 0x64, 0x1a, 0x08, 0x0a, 0x06, 0x49, 0x74, 0x61, 0x6c,
	0x69, 0x63, 0x1a, 0x0b, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x1a,
	0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x1a, 0x0b, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x6f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x27, 0x0a,
	0x09, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3a,
	0x85, 0x02, 0x92, 0x41, 0x81, 0x02, 0x32, 0xfe, 0x01, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22,
	0x33, 0x35, 0x34, 0x22, 0x2c, 0x22, 0x65, 0x74, 0x61, 0x67, 0x22, 0x3a, 0x22, 0x46, 0x71, 0x61,
	0x54, 0x43, 0x44, 0x4c, 0x62, 0x68, 0x70, 0x61, 0x6f, 0x55, 0x72, 0x65, 0x4c, 0x22, 0x2c, 0x22,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38,
	0x30, 0x32, 0x36, 0x38, 0x35, 0x30, 0x37, 0x36, 0x39, 0x38, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22,
	0x33, 0x34, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e,
	0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38, 0x30, 0x32, 0x36, 0x38, 0x35, 0x30, 0x37, 0x36,
	0x39, 0x38, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22,
	0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x2c, 0x22,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x27, 0x73, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x53,
	0x6f, 0x20, 0x2e, 0x2e, 0x2e, 0x22, 0x7d, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0xca, 0x3e, 0x07, 0xfa, 0x02,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x07,
	0xd2, 0x01, 0x04, 0x74, 0x65, 0x78, 0x74, 0x32, 0x49, 0x7b, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x3a, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x6e, 0x6f, 0x74, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x27, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x53, 0x6f, 0x20, 0x2e, 0x2e, 0x2e,
	0x22, 0x7d, 0x22, 0x8a, 0x05, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x3a, 0xa3, 0x04, 0x92, 0x41, 0x9f, 0x04,
	0x32, 0x9c, 0x04, 0x7b, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x69, 0x64,
	0x22, 0x3a, 0x22, 0x33, 0x35, 0x34, 0x22, 0x2c, 0x22, 0x65, 0x74, 0x61, 0x67, 0x22, 0x3a, 0x22,
	0x46, 0x71, 0x61, 0x54, 0x43, 0x44, 0x4c, 0x62, 0x68, 0x70, 0x61, 0x6f, 0x55, 0x72, 0x65, 0x4c,
	0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22,
	0x31, 0x36, 0x38, 0x30, 0x32, 0x36, 0x38, 0x35, 0x30, 0x37, 0x36, 0x39, 0x38, 0x22, 0x2c, 0x22,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64,
	0x22, 0x3a, 0x22, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a,
	0x6f, 0x68, 0x6e, 0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38, 0x30, 0x35, 0x31, 0x36, 0x37,
	0x38, 0x35, 0x33, 0x35, 0x37, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x33, 0x34, 0x22, 0x2c, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x44, 0x6f, 0x65, 0x22,
	0x7d, 0x2c, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x27, 0x73,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x20, 0x53, 0x6f, 0x20, 0x2e, 0x2e, 0x2e, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x69, 0x64, 0x22,
	0x3a, 0x22, 0x33, 0x35, 0x37, 0x22, 0x2c, 0x22, 0x76, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x34, 0x22,
	0x2c, 0x22, 0x65, 0x74, 0x61, 0x67, 0x22, 0x3a, 0x22, 0x46, 0x5a, 0x69, 0x54, 0x78, 0x56, 0x67,
	0x72, 0x34, 0x31, 0x56, 0x50, 0x46, 0x78, 0x79, 0x75, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38, 0x30, 0x32, 0x36, 0x38,
	0x35, 0x33, 0x37, 0x36, 0x39, 0x38, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x35, 0x36, 0x22, 0x2c,
	0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x42, 0x72, 0x75, 0x63, 0x65, 0x20, 0x57, 0x61,
	0x79, 0x6e, 0x65, 0x22, 0x7d, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0x3a, 0x22, 0x31, 0x36, 0x38, 0x30, 0x32, 0x36, 0x38, 0x35, 0x36, 0x33, 0x33, 0x35,
	0x37, 0x22, 0x2c, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0x3a,
	0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x61, 0x6e, 0x65, 0x20, 0x4c, 0x65,
	0x65, 0x20, 0x28, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x29, 0x22, 0x7d, 0x2c, 0x22, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x20,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x66, 0x65,
	0x77, 0x20, 0x64, 0x61, 0x79, 0x73, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x3a, 0x31, 0x2c, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x42,
	0xa8, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x42, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x57, 0x43,
	0x58, 0xaa, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0xca, 0x02, 0x10, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x5c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1c, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x57, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_contacts_comments_proto_rawDescOnce sync.Once
	file_contacts_comments_proto_rawDescData = file_contacts_comments_proto_rawDesc
)

func file_contacts_comments_proto_rawDescGZIP() []byte {
	file_contacts_comments_proto_rawDescOnce.Do(func() {
		file_contacts_comments_proto_rawDescData = protoimpl.X.CompressGZIP(file_contacts_comments_proto_rawDescData)
	})
	return file_contacts_comments_proto_rawDescData
}

var file_contacts_comments_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_contacts_comments_proto_goTypes = []interface{}{
	(*Comment)(nil),                      // 0: webitel.contacts.Comment
	(*InputComment)(nil),                 // 1: webitel.contacts.InputComment
	(*CommentList)(nil),                  // 2: webitel.contacts.CommentList
	(*Comment_Format)(nil),               // 3: webitel.contacts.Comment.Format
	(*Comment_Format_Link)(nil),          // 4: webitel.contacts.Comment.Format.Link
	(*Comment_Format_Bold)(nil),          // 5: webitel.contacts.Comment.Format.Bold
	(*Comment_Format_Italic)(nil),        // 6: webitel.contacts.Comment.Format.Italic
	(*Comment_Format_Underline)(nil),     // 7: webitel.contacts.Comment.Format.Underline
	(*Comment_Format_Strikethrough)(nil), // 8: webitel.contacts.Comment.Format.Strikethrough
	(*Comment_Format_Monospace)(nil),     // 9: webitel.contacts.Comment.Format.Monospace
	(*Comment_Format_Codeblock)(nil),     // 10: webitel.contacts.Comment.Format.Codeblock
	(*Lookup)(nil),                       // 11: webitel.contacts.Lookup
}
var file_contacts_comments_proto_depIdxs = []int32{
	11, // 0: webitel.contacts.Comment.created_by:type_name -> webitel.contacts.Lookup
	11, // 1: webitel.contacts.Comment.updated_by:type_name -> webitel.contacts.Lookup
	3,  // 2: webitel.contacts.Comment.format:type_name -> webitel.contacts.Comment.Format
	3,  // 3: webitel.contacts.InputComment.format:type_name -> webitel.contacts.Comment.Format
	0,  // 4: webitel.contacts.CommentList.data:type_name -> webitel.contacts.Comment
	4,  // 5: webitel.contacts.Comment.Format.link:type_name -> webitel.contacts.Comment.Format.Link
	5,  // 6: webitel.contacts.Comment.Format.bold:type_name -> webitel.contacts.Comment.Format.Bold
	6,  // 7: webitel.contacts.Comment.Format.italic:type_name -> webitel.contacts.Comment.Format.Italic
	7,  // 8: webitel.contacts.Comment.Format.underline:type_name -> webitel.contacts.Comment.Format.Underline
	8,  // 9: webitel.contacts.Comment.Format.strikethrough:type_name -> webitel.contacts.Comment.Format.Strikethrough
	9,  // 10: webitel.contacts.Comment.Format.monospace:type_name -> webitel.contacts.Comment.Format.Monospace
	10, // 11: webitel.contacts.Comment.Format.codeblock:type_name -> webitel.contacts.Comment.Format.Codeblock
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_contacts_comments_proto_init() }
func file_contacts_comments_proto_init() {
	if File_contacts_comments_proto != nil {
		return
	}
	file_contacts_fields_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contacts_comments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Bold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Italic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Underline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Strikethrough); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Monospace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_comments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment_Format_Codeblock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contacts_comments_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Comment_Format_Link_)(nil),
		(*Comment_Format_Bold_)(nil),
		(*Comment_Format_Italic_)(nil),
		(*Comment_Format_Underline_)(nil),
		(*Comment_Format_Strikethrough_)(nil),
		(*Comment_Format_Monospace_)(nil),
		(*Comment_Format_Codeblock_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contacts_comments_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contacts_comments_proto_goTypes,
		DependencyIndexes: file_contacts_comments_proto_depIdxs,
		MessageInfos:      file_contacts_comments_proto_msgTypes,
	}.Build()
	File_contacts_comments_proto = out.File
	file_contacts_comments_proto_rawDesc = nil
	file_contacts_comments_proto_goTypes = nil
	file_contacts_comments_proto_depIdxs = nil
}
